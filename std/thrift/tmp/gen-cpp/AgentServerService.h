/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AgentServerService_H
#define AgentServerService_H

#include <thrift/TDispatchProcessor.h>
#include "AgentServer_types.h"

namespace hawkeye {

class AgentServerServiceIf {
 public:
  virtual ~AgentServerServiceIf() {}
  virtual void find_cameras(std::vector<std::string> & _return) = 0;
  virtual int32_t add_cameras(const std::vector<std::string> & l) = 0;
  virtual void get_hold_cameras(std::vector<std::string> & _return) = 0;
  virtual int32_t del_cameras(const std::vector<std::string> & l) = 0;
  virtual int32_t open(const std::string& camera_name) = 0;
  virtual int32_t close(const std::string& camera_name) = 0;
  virtual int32_t start(const std::string& camera_name, const int32_t display_frame_rate) = 0;
  virtual int32_t stop(const std::string& camera_name) = 0;
  virtual int32_t set_exposure_time(const std::string& camera_name, const double microseconds) = 0;
  virtual int32_t set_gain_by_sensor_all(const std::string& camera_name, const double gain) = 0;
  virtual int32_t set_gain_by_sensor_analog(const std::string& camera_name, const double gain) = 0;
  virtual int32_t set_gain_by_sensor_digital(const std::string& camera_name, const double gain) = 0;
  virtual int32_t set_frame_rate(const std::string& camera_name, const double rate) = 0;
  virtual int32_t enable_turbo_transfer(const std::string& camera_name, const int32_t enabled) = 0;
  virtual int32_t set_pixel_fmt(const std::string& camera_name, const std::string& pixel_fmt) = 0;
  virtual int32_t set_offset_x(const std::string& camera_name, const int32_t offset_x) = 0;
  virtual int32_t set_offset_y(const std::string& camera_name, const int32_t offset_y) = 0;
  virtual int32_t set_image_width(const std::string& camera_name, const int32_t width) = 0;
  virtual int32_t set_image_height(const std::string& camera_name, const int32_t height) = 0;
  virtual double get_exposure_time(const std::string& camera_name) = 0;
  virtual double get_gain_by_sensor_all(const std::string& camera_name) = 0;
  virtual double get_gain_by_sensor_analog(const std::string& camera_name) = 0;
  virtual double get_gain_by_sensor_digital(const std::string& camera_name) = 0;
  virtual double get_frame_rate(const std::string& camera_name) = 0;
  virtual void get_exposure_time_range(MinMaxStruct& _return, const std::string& camera_name) = 0;
  virtual void get_gain_range_by_sensor_all(MinMaxStruct& _return, const std::string& camera_name) = 0;
  virtual void get_gain_range_by_sensor_analog(MinMaxStruct& _return, const std::string& camera_name) = 0;
  virtual void get_gain_range_by_sensor_digital(MinMaxStruct& _return, const std::string& camera_name) = 0;
  virtual void get_frame_rate_range(MinMaxStruct& _return, const std::string& camera_name) = 0;
  virtual int32_t get_image_width(const std::string& camera_name) = 0;
  virtual int32_t get_image_height(const std::string& camera_name) = 0;
  virtual int32_t get_height_max(const std::string& camera_name) = 0;
  virtual int32_t get_width_max(const std::string& camera_name) = 0;
  virtual int32_t get_offset_x(const std::string& camera_name) = 0;
  virtual int32_t get_offset_y(const std::string& camera_name) = 0;
  virtual int32_t is_enabled_turbo_transfer(const std::string& camera_name) = 0;
  virtual void get_pixel_fmt(std::string& _return, const std::string& camera_name) = 0;
  virtual void get_user_defined_name(std::string& _return, const std::string& camera_name) = 0;
  virtual void get_device_serial_number(std::string& _return, const std::string& camera_name) = 0;
  virtual void get_current_ip_address(std::string& _return, const std::string& camera_name) = 0;
  virtual double get_grab_fps(const std::string& camera_name) = 0;
  virtual double get_process_fps(const std::string& camera_name) = 0;
  virtual void save_feature(std::string& _return, const std::string& camera_name) = 0;
  virtual int32_t update_feature(const std::string& camera_name, const std::string& content) = 0;
  virtual int64_t ping_server(const int64_t seq) = 0;
};

class AgentServerServiceIfFactory {
 public:
  typedef AgentServerServiceIf Handler;

  virtual ~AgentServerServiceIfFactory() {}

  virtual AgentServerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AgentServerServiceIf* /* handler */) = 0;
};

class AgentServerServiceIfSingletonFactory : virtual public AgentServerServiceIfFactory {
 public:
  AgentServerServiceIfSingletonFactory(const boost::shared_ptr<AgentServerServiceIf>& iface) : iface_(iface) {}
  virtual ~AgentServerServiceIfSingletonFactory() {}

  virtual AgentServerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AgentServerServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<AgentServerServiceIf> iface_;
};

class AgentServerServiceNull : virtual public AgentServerServiceIf {
 public:
  virtual ~AgentServerServiceNull() {}
  void find_cameras(std::vector<std::string> & /* _return */) {
    return;
  }
  int32_t add_cameras(const std::vector<std::string> & /* l */) {
    int32_t _return = 0;
    return _return;
  }
  void get_hold_cameras(std::vector<std::string> & /* _return */) {
    return;
  }
  int32_t del_cameras(const std::vector<std::string> & /* l */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t open(const std::string& /* camera_name */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t close(const std::string& /* camera_name */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t start(const std::string& /* camera_name */, const int32_t /* display_frame_rate */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t stop(const std::string& /* camera_name */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t set_exposure_time(const std::string& /* camera_name */, const double /* microseconds */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t set_gain_by_sensor_all(const std::string& /* camera_name */, const double /* gain */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t set_gain_by_sensor_analog(const std::string& /* camera_name */, const double /* gain */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t set_gain_by_sensor_digital(const std::string& /* camera_name */, const double /* gain */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t set_frame_rate(const std::string& /* camera_name */, const double /* rate */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t enable_turbo_transfer(const std::string& /* camera_name */, const int32_t /* enabled */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t set_pixel_fmt(const std::string& /* camera_name */, const std::string& /* pixel_fmt */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t set_offset_x(const std::string& /* camera_name */, const int32_t /* offset_x */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t set_offset_y(const std::string& /* camera_name */, const int32_t /* offset_y */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t set_image_width(const std::string& /* camera_name */, const int32_t /* width */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t set_image_height(const std::string& /* camera_name */, const int32_t /* height */) {
    int32_t _return = 0;
    return _return;
  }
  double get_exposure_time(const std::string& /* camera_name */) {
    double _return = (double)0;
    return _return;
  }
  double get_gain_by_sensor_all(const std::string& /* camera_name */) {
    double _return = (double)0;
    return _return;
  }
  double get_gain_by_sensor_analog(const std::string& /* camera_name */) {
    double _return = (double)0;
    return _return;
  }
  double get_gain_by_sensor_digital(const std::string& /* camera_name */) {
    double _return = (double)0;
    return _return;
  }
  double get_frame_rate(const std::string& /* camera_name */) {
    double _return = (double)0;
    return _return;
  }
  void get_exposure_time_range(MinMaxStruct& /* _return */, const std::string& /* camera_name */) {
    return;
  }
  void get_gain_range_by_sensor_all(MinMaxStruct& /* _return */, const std::string& /* camera_name */) {
    return;
  }
  void get_gain_range_by_sensor_analog(MinMaxStruct& /* _return */, const std::string& /* camera_name */) {
    return;
  }
  void get_gain_range_by_sensor_digital(MinMaxStruct& /* _return */, const std::string& /* camera_name */) {
    return;
  }
  void get_frame_rate_range(MinMaxStruct& /* _return */, const std::string& /* camera_name */) {
    return;
  }
  int32_t get_image_width(const std::string& /* camera_name */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t get_image_height(const std::string& /* camera_name */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t get_height_max(const std::string& /* camera_name */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t get_width_max(const std::string& /* camera_name */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t get_offset_x(const std::string& /* camera_name */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t get_offset_y(const std::string& /* camera_name */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t is_enabled_turbo_transfer(const std::string& /* camera_name */) {
    int32_t _return = 0;
    return _return;
  }
  void get_pixel_fmt(std::string& /* _return */, const std::string& /* camera_name */) {
    return;
  }
  void get_user_defined_name(std::string& /* _return */, const std::string& /* camera_name */) {
    return;
  }
  void get_device_serial_number(std::string& /* _return */, const std::string& /* camera_name */) {
    return;
  }
  void get_current_ip_address(std::string& /* _return */, const std::string& /* camera_name */) {
    return;
  }
  double get_grab_fps(const std::string& /* camera_name */) {
    double _return = (double)0;
    return _return;
  }
  double get_process_fps(const std::string& /* camera_name */) {
    double _return = (double)0;
    return _return;
  }
  void save_feature(std::string& /* _return */, const std::string& /* camera_name */) {
    return;
  }
  int32_t update_feature(const std::string& /* camera_name */, const std::string& /* content */) {
    int32_t _return = 0;
    return _return;
  }
  int64_t ping_server(const int64_t /* seq */) {
    int64_t _return = 0;
    return _return;
  }
};


class AgentServerService_find_cameras_args {
 public:

  AgentServerService_find_cameras_args() {
  }

  virtual ~AgentServerService_find_cameras_args() throw() {}


  bool operator == (const AgentServerService_find_cameras_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AgentServerService_find_cameras_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_find_cameras_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_find_cameras_pargs {
 public:


  virtual ~AgentServerService_find_cameras_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_find_cameras_result__isset {
  _AgentServerService_find_cameras_result__isset() : success(false) {}
  bool success;
} _AgentServerService_find_cameras_result__isset;

class AgentServerService_find_cameras_result {
 public:

  AgentServerService_find_cameras_result() {
  }

  virtual ~AgentServerService_find_cameras_result() throw() {}

  std::vector<std::string>  success;

  _AgentServerService_find_cameras_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const AgentServerService_find_cameras_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_find_cameras_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_find_cameras_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_find_cameras_presult__isset {
  _AgentServerService_find_cameras_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_find_cameras_presult__isset;

class AgentServerService_find_cameras_presult {
 public:


  virtual ~AgentServerService_find_cameras_presult() throw() {}

  std::vector<std::string> * success;

  _AgentServerService_find_cameras_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_add_cameras_args__isset {
  _AgentServerService_add_cameras_args__isset() : l(false) {}
  bool l;
} _AgentServerService_add_cameras_args__isset;

class AgentServerService_add_cameras_args {
 public:

  AgentServerService_add_cameras_args() {
  }

  virtual ~AgentServerService_add_cameras_args() throw() {}

  std::vector<std::string>  l;

  _AgentServerService_add_cameras_args__isset __isset;

  void __set_l(const std::vector<std::string> & val) {
    l = val;
  }

  bool operator == (const AgentServerService_add_cameras_args & rhs) const
  {
    if (!(l == rhs.l))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_add_cameras_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_add_cameras_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_add_cameras_pargs {
 public:


  virtual ~AgentServerService_add_cameras_pargs() throw() {}

  const std::vector<std::string> * l;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_add_cameras_result__isset {
  _AgentServerService_add_cameras_result__isset() : success(false) {}
  bool success;
} _AgentServerService_add_cameras_result__isset;

class AgentServerService_add_cameras_result {
 public:

  AgentServerService_add_cameras_result() : success(0) {
  }

  virtual ~AgentServerService_add_cameras_result() throw() {}

  int32_t success;

  _AgentServerService_add_cameras_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AgentServerService_add_cameras_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_add_cameras_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_add_cameras_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_add_cameras_presult__isset {
  _AgentServerService_add_cameras_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_add_cameras_presult__isset;

class AgentServerService_add_cameras_presult {
 public:


  virtual ~AgentServerService_add_cameras_presult() throw() {}

  int32_t* success;

  _AgentServerService_add_cameras_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class AgentServerService_get_hold_cameras_args {
 public:

  AgentServerService_get_hold_cameras_args() {
  }

  virtual ~AgentServerService_get_hold_cameras_args() throw() {}


  bool operator == (const AgentServerService_get_hold_cameras_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AgentServerService_get_hold_cameras_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_hold_cameras_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_get_hold_cameras_pargs {
 public:


  virtual ~AgentServerService_get_hold_cameras_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_hold_cameras_result__isset {
  _AgentServerService_get_hold_cameras_result__isset() : success(false) {}
  bool success;
} _AgentServerService_get_hold_cameras_result__isset;

class AgentServerService_get_hold_cameras_result {
 public:

  AgentServerService_get_hold_cameras_result() {
  }

  virtual ~AgentServerService_get_hold_cameras_result() throw() {}

  std::vector<std::string>  success;

  _AgentServerService_get_hold_cameras_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const AgentServerService_get_hold_cameras_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_hold_cameras_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_hold_cameras_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_hold_cameras_presult__isset {
  _AgentServerService_get_hold_cameras_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_get_hold_cameras_presult__isset;

class AgentServerService_get_hold_cameras_presult {
 public:


  virtual ~AgentServerService_get_hold_cameras_presult() throw() {}

  std::vector<std::string> * success;

  _AgentServerService_get_hold_cameras_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_del_cameras_args__isset {
  _AgentServerService_del_cameras_args__isset() : l(false) {}
  bool l;
} _AgentServerService_del_cameras_args__isset;

class AgentServerService_del_cameras_args {
 public:

  AgentServerService_del_cameras_args() {
  }

  virtual ~AgentServerService_del_cameras_args() throw() {}

  std::vector<std::string>  l;

  _AgentServerService_del_cameras_args__isset __isset;

  void __set_l(const std::vector<std::string> & val) {
    l = val;
  }

  bool operator == (const AgentServerService_del_cameras_args & rhs) const
  {
    if (!(l == rhs.l))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_del_cameras_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_del_cameras_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_del_cameras_pargs {
 public:


  virtual ~AgentServerService_del_cameras_pargs() throw() {}

  const std::vector<std::string> * l;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_del_cameras_result__isset {
  _AgentServerService_del_cameras_result__isset() : success(false) {}
  bool success;
} _AgentServerService_del_cameras_result__isset;

class AgentServerService_del_cameras_result {
 public:

  AgentServerService_del_cameras_result() : success(0) {
  }

  virtual ~AgentServerService_del_cameras_result() throw() {}

  int32_t success;

  _AgentServerService_del_cameras_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AgentServerService_del_cameras_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_del_cameras_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_del_cameras_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_del_cameras_presult__isset {
  _AgentServerService_del_cameras_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_del_cameras_presult__isset;

class AgentServerService_del_cameras_presult {
 public:


  virtual ~AgentServerService_del_cameras_presult() throw() {}

  int32_t* success;

  _AgentServerService_del_cameras_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_open_args__isset {
  _AgentServerService_open_args__isset() : camera_name(false) {}
  bool camera_name;
} _AgentServerService_open_args__isset;

class AgentServerService_open_args {
 public:

  AgentServerService_open_args() : camera_name() {
  }

  virtual ~AgentServerService_open_args() throw() {}

  std::string camera_name;

  _AgentServerService_open_args__isset __isset;

  void __set_camera_name(const std::string& val) {
    camera_name = val;
  }

  bool operator == (const AgentServerService_open_args & rhs) const
  {
    if (!(camera_name == rhs.camera_name))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_open_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_open_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_open_pargs {
 public:


  virtual ~AgentServerService_open_pargs() throw() {}

  const std::string* camera_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_open_result__isset {
  _AgentServerService_open_result__isset() : success(false) {}
  bool success;
} _AgentServerService_open_result__isset;

class AgentServerService_open_result {
 public:

  AgentServerService_open_result() : success(0) {
  }

  virtual ~AgentServerService_open_result() throw() {}

  int32_t success;

  _AgentServerService_open_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AgentServerService_open_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_open_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_open_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_open_presult__isset {
  _AgentServerService_open_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_open_presult__isset;

class AgentServerService_open_presult {
 public:


  virtual ~AgentServerService_open_presult() throw() {}

  int32_t* success;

  _AgentServerService_open_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_close_args__isset {
  _AgentServerService_close_args__isset() : camera_name(false) {}
  bool camera_name;
} _AgentServerService_close_args__isset;

class AgentServerService_close_args {
 public:

  AgentServerService_close_args() : camera_name() {
  }

  virtual ~AgentServerService_close_args() throw() {}

  std::string camera_name;

  _AgentServerService_close_args__isset __isset;

  void __set_camera_name(const std::string& val) {
    camera_name = val;
  }

  bool operator == (const AgentServerService_close_args & rhs) const
  {
    if (!(camera_name == rhs.camera_name))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_close_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_close_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_close_pargs {
 public:


  virtual ~AgentServerService_close_pargs() throw() {}

  const std::string* camera_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_close_result__isset {
  _AgentServerService_close_result__isset() : success(false) {}
  bool success;
} _AgentServerService_close_result__isset;

class AgentServerService_close_result {
 public:

  AgentServerService_close_result() : success(0) {
  }

  virtual ~AgentServerService_close_result() throw() {}

  int32_t success;

  _AgentServerService_close_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AgentServerService_close_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_close_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_close_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_close_presult__isset {
  _AgentServerService_close_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_close_presult__isset;

class AgentServerService_close_presult {
 public:


  virtual ~AgentServerService_close_presult() throw() {}

  int32_t* success;

  _AgentServerService_close_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_start_args__isset {
  _AgentServerService_start_args__isset() : camera_name(false), display_frame_rate(false) {}
  bool camera_name;
  bool display_frame_rate;
} _AgentServerService_start_args__isset;

class AgentServerService_start_args {
 public:

  AgentServerService_start_args() : camera_name(), display_frame_rate(0) {
  }

  virtual ~AgentServerService_start_args() throw() {}

  std::string camera_name;
  int32_t display_frame_rate;

  _AgentServerService_start_args__isset __isset;

  void __set_camera_name(const std::string& val) {
    camera_name = val;
  }

  void __set_display_frame_rate(const int32_t val) {
    display_frame_rate = val;
  }

  bool operator == (const AgentServerService_start_args & rhs) const
  {
    if (!(camera_name == rhs.camera_name))
      return false;
    if (!(display_frame_rate == rhs.display_frame_rate))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_start_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_start_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_start_pargs {
 public:


  virtual ~AgentServerService_start_pargs() throw() {}

  const std::string* camera_name;
  const int32_t* display_frame_rate;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_start_result__isset {
  _AgentServerService_start_result__isset() : success(false) {}
  bool success;
} _AgentServerService_start_result__isset;

class AgentServerService_start_result {
 public:

  AgentServerService_start_result() : success(0) {
  }

  virtual ~AgentServerService_start_result() throw() {}

  int32_t success;

  _AgentServerService_start_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AgentServerService_start_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_start_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_start_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_start_presult__isset {
  _AgentServerService_start_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_start_presult__isset;

class AgentServerService_start_presult {
 public:


  virtual ~AgentServerService_start_presult() throw() {}

  int32_t* success;

  _AgentServerService_start_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_stop_args__isset {
  _AgentServerService_stop_args__isset() : camera_name(false) {}
  bool camera_name;
} _AgentServerService_stop_args__isset;

class AgentServerService_stop_args {
 public:

  AgentServerService_stop_args() : camera_name() {
  }

  virtual ~AgentServerService_stop_args() throw() {}

  std::string camera_name;

  _AgentServerService_stop_args__isset __isset;

  void __set_camera_name(const std::string& val) {
    camera_name = val;
  }

  bool operator == (const AgentServerService_stop_args & rhs) const
  {
    if (!(camera_name == rhs.camera_name))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_stop_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_stop_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_stop_pargs {
 public:


  virtual ~AgentServerService_stop_pargs() throw() {}

  const std::string* camera_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_stop_result__isset {
  _AgentServerService_stop_result__isset() : success(false) {}
  bool success;
} _AgentServerService_stop_result__isset;

class AgentServerService_stop_result {
 public:

  AgentServerService_stop_result() : success(0) {
  }

  virtual ~AgentServerService_stop_result() throw() {}

  int32_t success;

  _AgentServerService_stop_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AgentServerService_stop_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_stop_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_stop_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_stop_presult__isset {
  _AgentServerService_stop_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_stop_presult__isset;

class AgentServerService_stop_presult {
 public:


  virtual ~AgentServerService_stop_presult() throw() {}

  int32_t* success;

  _AgentServerService_stop_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_set_exposure_time_args__isset {
  _AgentServerService_set_exposure_time_args__isset() : camera_name(false), microseconds(false) {}
  bool camera_name;
  bool microseconds;
} _AgentServerService_set_exposure_time_args__isset;

class AgentServerService_set_exposure_time_args {
 public:

  AgentServerService_set_exposure_time_args() : camera_name(), microseconds(0) {
  }

  virtual ~AgentServerService_set_exposure_time_args() throw() {}

  std::string camera_name;
  double microseconds;

  _AgentServerService_set_exposure_time_args__isset __isset;

  void __set_camera_name(const std::string& val) {
    camera_name = val;
  }

  void __set_microseconds(const double val) {
    microseconds = val;
  }

  bool operator == (const AgentServerService_set_exposure_time_args & rhs) const
  {
    if (!(camera_name == rhs.camera_name))
      return false;
    if (!(microseconds == rhs.microseconds))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_set_exposure_time_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_set_exposure_time_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_set_exposure_time_pargs {
 public:


  virtual ~AgentServerService_set_exposure_time_pargs() throw() {}

  const std::string* camera_name;
  const double* microseconds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_set_exposure_time_result__isset {
  _AgentServerService_set_exposure_time_result__isset() : success(false) {}
  bool success;
} _AgentServerService_set_exposure_time_result__isset;

class AgentServerService_set_exposure_time_result {
 public:

  AgentServerService_set_exposure_time_result() : success(0) {
  }

  virtual ~AgentServerService_set_exposure_time_result() throw() {}

  int32_t success;

  _AgentServerService_set_exposure_time_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AgentServerService_set_exposure_time_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_set_exposure_time_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_set_exposure_time_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_set_exposure_time_presult__isset {
  _AgentServerService_set_exposure_time_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_set_exposure_time_presult__isset;

class AgentServerService_set_exposure_time_presult {
 public:


  virtual ~AgentServerService_set_exposure_time_presult() throw() {}

  int32_t* success;

  _AgentServerService_set_exposure_time_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_set_gain_by_sensor_all_args__isset {
  _AgentServerService_set_gain_by_sensor_all_args__isset() : camera_name(false), gain(false) {}
  bool camera_name;
  bool gain;
} _AgentServerService_set_gain_by_sensor_all_args__isset;

class AgentServerService_set_gain_by_sensor_all_args {
 public:

  AgentServerService_set_gain_by_sensor_all_args() : camera_name(), gain(0) {
  }

  virtual ~AgentServerService_set_gain_by_sensor_all_args() throw() {}

  std::string camera_name;
  double gain;

  _AgentServerService_set_gain_by_sensor_all_args__isset __isset;

  void __set_camera_name(const std::string& val) {
    camera_name = val;
  }

  void __set_gain(const double val) {
    gain = val;
  }

  bool operator == (const AgentServerService_set_gain_by_sensor_all_args & rhs) const
  {
    if (!(camera_name == rhs.camera_name))
      return false;
    if (!(gain == rhs.gain))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_set_gain_by_sensor_all_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_set_gain_by_sensor_all_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_set_gain_by_sensor_all_pargs {
 public:


  virtual ~AgentServerService_set_gain_by_sensor_all_pargs() throw() {}

  const std::string* camera_name;
  const double* gain;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_set_gain_by_sensor_all_result__isset {
  _AgentServerService_set_gain_by_sensor_all_result__isset() : success(false) {}
  bool success;
} _AgentServerService_set_gain_by_sensor_all_result__isset;

class AgentServerService_set_gain_by_sensor_all_result {
 public:

  AgentServerService_set_gain_by_sensor_all_result() : success(0) {
  }

  virtual ~AgentServerService_set_gain_by_sensor_all_result() throw() {}

  int32_t success;

  _AgentServerService_set_gain_by_sensor_all_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AgentServerService_set_gain_by_sensor_all_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_set_gain_by_sensor_all_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_set_gain_by_sensor_all_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_set_gain_by_sensor_all_presult__isset {
  _AgentServerService_set_gain_by_sensor_all_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_set_gain_by_sensor_all_presult__isset;

class AgentServerService_set_gain_by_sensor_all_presult {
 public:


  virtual ~AgentServerService_set_gain_by_sensor_all_presult() throw() {}

  int32_t* success;

  _AgentServerService_set_gain_by_sensor_all_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_set_gain_by_sensor_analog_args__isset {
  _AgentServerService_set_gain_by_sensor_analog_args__isset() : camera_name(false), gain(false) {}
  bool camera_name;
  bool gain;
} _AgentServerService_set_gain_by_sensor_analog_args__isset;

class AgentServerService_set_gain_by_sensor_analog_args {
 public:

  AgentServerService_set_gain_by_sensor_analog_args() : camera_name(), gain(0) {
  }

  virtual ~AgentServerService_set_gain_by_sensor_analog_args() throw() {}

  std::string camera_name;
  double gain;

  _AgentServerService_set_gain_by_sensor_analog_args__isset __isset;

  void __set_camera_name(const std::string& val) {
    camera_name = val;
  }

  void __set_gain(const double val) {
    gain = val;
  }

  bool operator == (const AgentServerService_set_gain_by_sensor_analog_args & rhs) const
  {
    if (!(camera_name == rhs.camera_name))
      return false;
    if (!(gain == rhs.gain))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_set_gain_by_sensor_analog_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_set_gain_by_sensor_analog_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_set_gain_by_sensor_analog_pargs {
 public:


  virtual ~AgentServerService_set_gain_by_sensor_analog_pargs() throw() {}

  const std::string* camera_name;
  const double* gain;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_set_gain_by_sensor_analog_result__isset {
  _AgentServerService_set_gain_by_sensor_analog_result__isset() : success(false) {}
  bool success;
} _AgentServerService_set_gain_by_sensor_analog_result__isset;

class AgentServerService_set_gain_by_sensor_analog_result {
 public:

  AgentServerService_set_gain_by_sensor_analog_result() : success(0) {
  }

  virtual ~AgentServerService_set_gain_by_sensor_analog_result() throw() {}

  int32_t success;

  _AgentServerService_set_gain_by_sensor_analog_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AgentServerService_set_gain_by_sensor_analog_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_set_gain_by_sensor_analog_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_set_gain_by_sensor_analog_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_set_gain_by_sensor_analog_presult__isset {
  _AgentServerService_set_gain_by_sensor_analog_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_set_gain_by_sensor_analog_presult__isset;

class AgentServerService_set_gain_by_sensor_analog_presult {
 public:


  virtual ~AgentServerService_set_gain_by_sensor_analog_presult() throw() {}

  int32_t* success;

  _AgentServerService_set_gain_by_sensor_analog_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_set_gain_by_sensor_digital_args__isset {
  _AgentServerService_set_gain_by_sensor_digital_args__isset() : camera_name(false), gain(false) {}
  bool camera_name;
  bool gain;
} _AgentServerService_set_gain_by_sensor_digital_args__isset;

class AgentServerService_set_gain_by_sensor_digital_args {
 public:

  AgentServerService_set_gain_by_sensor_digital_args() : camera_name(), gain(0) {
  }

  virtual ~AgentServerService_set_gain_by_sensor_digital_args() throw() {}

  std::string camera_name;
  double gain;

  _AgentServerService_set_gain_by_sensor_digital_args__isset __isset;

  void __set_camera_name(const std::string& val) {
    camera_name = val;
  }

  void __set_gain(const double val) {
    gain = val;
  }

  bool operator == (const AgentServerService_set_gain_by_sensor_digital_args & rhs) const
  {
    if (!(camera_name == rhs.camera_name))
      return false;
    if (!(gain == rhs.gain))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_set_gain_by_sensor_digital_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_set_gain_by_sensor_digital_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_set_gain_by_sensor_digital_pargs {
 public:


  virtual ~AgentServerService_set_gain_by_sensor_digital_pargs() throw() {}

  const std::string* camera_name;
  const double* gain;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_set_gain_by_sensor_digital_result__isset {
  _AgentServerService_set_gain_by_sensor_digital_result__isset() : success(false) {}
  bool success;
} _AgentServerService_set_gain_by_sensor_digital_result__isset;

class AgentServerService_set_gain_by_sensor_digital_result {
 public:

  AgentServerService_set_gain_by_sensor_digital_result() : success(0) {
  }

  virtual ~AgentServerService_set_gain_by_sensor_digital_result() throw() {}

  int32_t success;

  _AgentServerService_set_gain_by_sensor_digital_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AgentServerService_set_gain_by_sensor_digital_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_set_gain_by_sensor_digital_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_set_gain_by_sensor_digital_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_set_gain_by_sensor_digital_presult__isset {
  _AgentServerService_set_gain_by_sensor_digital_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_set_gain_by_sensor_digital_presult__isset;

class AgentServerService_set_gain_by_sensor_digital_presult {
 public:


  virtual ~AgentServerService_set_gain_by_sensor_digital_presult() throw() {}

  int32_t* success;

  _AgentServerService_set_gain_by_sensor_digital_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_set_frame_rate_args__isset {
  _AgentServerService_set_frame_rate_args__isset() : camera_name(false), rate(false) {}
  bool camera_name;
  bool rate;
} _AgentServerService_set_frame_rate_args__isset;

class AgentServerService_set_frame_rate_args {
 public:

  AgentServerService_set_frame_rate_args() : camera_name(), rate(0) {
  }

  virtual ~AgentServerService_set_frame_rate_args() throw() {}

  std::string camera_name;
  double rate;

  _AgentServerService_set_frame_rate_args__isset __isset;

  void __set_camera_name(const std::string& val) {
    camera_name = val;
  }

  void __set_rate(const double val) {
    rate = val;
  }

  bool operator == (const AgentServerService_set_frame_rate_args & rhs) const
  {
    if (!(camera_name == rhs.camera_name))
      return false;
    if (!(rate == rhs.rate))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_set_frame_rate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_set_frame_rate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_set_frame_rate_pargs {
 public:


  virtual ~AgentServerService_set_frame_rate_pargs() throw() {}

  const std::string* camera_name;
  const double* rate;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_set_frame_rate_result__isset {
  _AgentServerService_set_frame_rate_result__isset() : success(false) {}
  bool success;
} _AgentServerService_set_frame_rate_result__isset;

class AgentServerService_set_frame_rate_result {
 public:

  AgentServerService_set_frame_rate_result() : success(0) {
  }

  virtual ~AgentServerService_set_frame_rate_result() throw() {}

  int32_t success;

  _AgentServerService_set_frame_rate_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AgentServerService_set_frame_rate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_set_frame_rate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_set_frame_rate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_set_frame_rate_presult__isset {
  _AgentServerService_set_frame_rate_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_set_frame_rate_presult__isset;

class AgentServerService_set_frame_rate_presult {
 public:


  virtual ~AgentServerService_set_frame_rate_presult() throw() {}

  int32_t* success;

  _AgentServerService_set_frame_rate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_enable_turbo_transfer_args__isset {
  _AgentServerService_enable_turbo_transfer_args__isset() : camera_name(false), enabled(false) {}
  bool camera_name;
  bool enabled;
} _AgentServerService_enable_turbo_transfer_args__isset;

class AgentServerService_enable_turbo_transfer_args {
 public:

  AgentServerService_enable_turbo_transfer_args() : camera_name(), enabled(0) {
  }

  virtual ~AgentServerService_enable_turbo_transfer_args() throw() {}

  std::string camera_name;
  int32_t enabled;

  _AgentServerService_enable_turbo_transfer_args__isset __isset;

  void __set_camera_name(const std::string& val) {
    camera_name = val;
  }

  void __set_enabled(const int32_t val) {
    enabled = val;
  }

  bool operator == (const AgentServerService_enable_turbo_transfer_args & rhs) const
  {
    if (!(camera_name == rhs.camera_name))
      return false;
    if (!(enabled == rhs.enabled))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_enable_turbo_transfer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_enable_turbo_transfer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_enable_turbo_transfer_pargs {
 public:


  virtual ~AgentServerService_enable_turbo_transfer_pargs() throw() {}

  const std::string* camera_name;
  const int32_t* enabled;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_enable_turbo_transfer_result__isset {
  _AgentServerService_enable_turbo_transfer_result__isset() : success(false) {}
  bool success;
} _AgentServerService_enable_turbo_transfer_result__isset;

class AgentServerService_enable_turbo_transfer_result {
 public:

  AgentServerService_enable_turbo_transfer_result() : success(0) {
  }

  virtual ~AgentServerService_enable_turbo_transfer_result() throw() {}

  int32_t success;

  _AgentServerService_enable_turbo_transfer_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AgentServerService_enable_turbo_transfer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_enable_turbo_transfer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_enable_turbo_transfer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_enable_turbo_transfer_presult__isset {
  _AgentServerService_enable_turbo_transfer_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_enable_turbo_transfer_presult__isset;

class AgentServerService_enable_turbo_transfer_presult {
 public:


  virtual ~AgentServerService_enable_turbo_transfer_presult() throw() {}

  int32_t* success;

  _AgentServerService_enable_turbo_transfer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_set_pixel_fmt_args__isset {
  _AgentServerService_set_pixel_fmt_args__isset() : camera_name(false), pixel_fmt(false) {}
  bool camera_name;
  bool pixel_fmt;
} _AgentServerService_set_pixel_fmt_args__isset;

class AgentServerService_set_pixel_fmt_args {
 public:

  AgentServerService_set_pixel_fmt_args() : camera_name(), pixel_fmt() {
  }

  virtual ~AgentServerService_set_pixel_fmt_args() throw() {}

  std::string camera_name;
  std::string pixel_fmt;

  _AgentServerService_set_pixel_fmt_args__isset __isset;

  void __set_camera_name(const std::string& val) {
    camera_name = val;
  }

  void __set_pixel_fmt(const std::string& val) {
    pixel_fmt = val;
  }

  bool operator == (const AgentServerService_set_pixel_fmt_args & rhs) const
  {
    if (!(camera_name == rhs.camera_name))
      return false;
    if (!(pixel_fmt == rhs.pixel_fmt))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_set_pixel_fmt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_set_pixel_fmt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_set_pixel_fmt_pargs {
 public:


  virtual ~AgentServerService_set_pixel_fmt_pargs() throw() {}

  const std::string* camera_name;
  const std::string* pixel_fmt;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_set_pixel_fmt_result__isset {
  _AgentServerService_set_pixel_fmt_result__isset() : success(false) {}
  bool success;
} _AgentServerService_set_pixel_fmt_result__isset;

class AgentServerService_set_pixel_fmt_result {
 public:

  AgentServerService_set_pixel_fmt_result() : success(0) {
  }

  virtual ~AgentServerService_set_pixel_fmt_result() throw() {}

  int32_t success;

  _AgentServerService_set_pixel_fmt_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AgentServerService_set_pixel_fmt_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_set_pixel_fmt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_set_pixel_fmt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_set_pixel_fmt_presult__isset {
  _AgentServerService_set_pixel_fmt_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_set_pixel_fmt_presult__isset;

class AgentServerService_set_pixel_fmt_presult {
 public:


  virtual ~AgentServerService_set_pixel_fmt_presult() throw() {}

  int32_t* success;

  _AgentServerService_set_pixel_fmt_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_set_offset_x_args__isset {
  _AgentServerService_set_offset_x_args__isset() : camera_name(false), offset_x(false) {}
  bool camera_name;
  bool offset_x;
} _AgentServerService_set_offset_x_args__isset;

class AgentServerService_set_offset_x_args {
 public:

  AgentServerService_set_offset_x_args() : camera_name(), offset_x(0) {
  }

  virtual ~AgentServerService_set_offset_x_args() throw() {}

  std::string camera_name;
  int32_t offset_x;

  _AgentServerService_set_offset_x_args__isset __isset;

  void __set_camera_name(const std::string& val) {
    camera_name = val;
  }

  void __set_offset_x(const int32_t val) {
    offset_x = val;
  }

  bool operator == (const AgentServerService_set_offset_x_args & rhs) const
  {
    if (!(camera_name == rhs.camera_name))
      return false;
    if (!(offset_x == rhs.offset_x))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_set_offset_x_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_set_offset_x_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_set_offset_x_pargs {
 public:


  virtual ~AgentServerService_set_offset_x_pargs() throw() {}

  const std::string* camera_name;
  const int32_t* offset_x;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_set_offset_x_result__isset {
  _AgentServerService_set_offset_x_result__isset() : success(false) {}
  bool success;
} _AgentServerService_set_offset_x_result__isset;

class AgentServerService_set_offset_x_result {
 public:

  AgentServerService_set_offset_x_result() : success(0) {
  }

  virtual ~AgentServerService_set_offset_x_result() throw() {}

  int32_t success;

  _AgentServerService_set_offset_x_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AgentServerService_set_offset_x_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_set_offset_x_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_set_offset_x_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_set_offset_x_presult__isset {
  _AgentServerService_set_offset_x_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_set_offset_x_presult__isset;

class AgentServerService_set_offset_x_presult {
 public:


  virtual ~AgentServerService_set_offset_x_presult() throw() {}

  int32_t* success;

  _AgentServerService_set_offset_x_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_set_offset_y_args__isset {
  _AgentServerService_set_offset_y_args__isset() : camera_name(false), offset_y(false) {}
  bool camera_name;
  bool offset_y;
} _AgentServerService_set_offset_y_args__isset;

class AgentServerService_set_offset_y_args {
 public:

  AgentServerService_set_offset_y_args() : camera_name(), offset_y(0) {
  }

  virtual ~AgentServerService_set_offset_y_args() throw() {}

  std::string camera_name;
  int32_t offset_y;

  _AgentServerService_set_offset_y_args__isset __isset;

  void __set_camera_name(const std::string& val) {
    camera_name = val;
  }

  void __set_offset_y(const int32_t val) {
    offset_y = val;
  }

  bool operator == (const AgentServerService_set_offset_y_args & rhs) const
  {
    if (!(camera_name == rhs.camera_name))
      return false;
    if (!(offset_y == rhs.offset_y))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_set_offset_y_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_set_offset_y_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_set_offset_y_pargs {
 public:


  virtual ~AgentServerService_set_offset_y_pargs() throw() {}

  const std::string* camera_name;
  const int32_t* offset_y;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_set_offset_y_result__isset {
  _AgentServerService_set_offset_y_result__isset() : success(false) {}
  bool success;
} _AgentServerService_set_offset_y_result__isset;

class AgentServerService_set_offset_y_result {
 public:

  AgentServerService_set_offset_y_result() : success(0) {
  }

  virtual ~AgentServerService_set_offset_y_result() throw() {}

  int32_t success;

  _AgentServerService_set_offset_y_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AgentServerService_set_offset_y_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_set_offset_y_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_set_offset_y_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_set_offset_y_presult__isset {
  _AgentServerService_set_offset_y_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_set_offset_y_presult__isset;

class AgentServerService_set_offset_y_presult {
 public:


  virtual ~AgentServerService_set_offset_y_presult() throw() {}

  int32_t* success;

  _AgentServerService_set_offset_y_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_set_image_width_args__isset {
  _AgentServerService_set_image_width_args__isset() : camera_name(false), width(false) {}
  bool camera_name;
  bool width;
} _AgentServerService_set_image_width_args__isset;

class AgentServerService_set_image_width_args {
 public:

  AgentServerService_set_image_width_args() : camera_name(), width(0) {
  }

  virtual ~AgentServerService_set_image_width_args() throw() {}

  std::string camera_name;
  int32_t width;

  _AgentServerService_set_image_width_args__isset __isset;

  void __set_camera_name(const std::string& val) {
    camera_name = val;
  }

  void __set_width(const int32_t val) {
    width = val;
  }

  bool operator == (const AgentServerService_set_image_width_args & rhs) const
  {
    if (!(camera_name == rhs.camera_name))
      return false;
    if (!(width == rhs.width))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_set_image_width_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_set_image_width_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_set_image_width_pargs {
 public:


  virtual ~AgentServerService_set_image_width_pargs() throw() {}

  const std::string* camera_name;
  const int32_t* width;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_set_image_width_result__isset {
  _AgentServerService_set_image_width_result__isset() : success(false) {}
  bool success;
} _AgentServerService_set_image_width_result__isset;

class AgentServerService_set_image_width_result {
 public:

  AgentServerService_set_image_width_result() : success(0) {
  }

  virtual ~AgentServerService_set_image_width_result() throw() {}

  int32_t success;

  _AgentServerService_set_image_width_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AgentServerService_set_image_width_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_set_image_width_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_set_image_width_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_set_image_width_presult__isset {
  _AgentServerService_set_image_width_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_set_image_width_presult__isset;

class AgentServerService_set_image_width_presult {
 public:


  virtual ~AgentServerService_set_image_width_presult() throw() {}

  int32_t* success;

  _AgentServerService_set_image_width_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_set_image_height_args__isset {
  _AgentServerService_set_image_height_args__isset() : camera_name(false), height(false) {}
  bool camera_name;
  bool height;
} _AgentServerService_set_image_height_args__isset;

class AgentServerService_set_image_height_args {
 public:

  AgentServerService_set_image_height_args() : camera_name(), height(0) {
  }

  virtual ~AgentServerService_set_image_height_args() throw() {}

  std::string camera_name;
  int32_t height;

  _AgentServerService_set_image_height_args__isset __isset;

  void __set_camera_name(const std::string& val) {
    camera_name = val;
  }

  void __set_height(const int32_t val) {
    height = val;
  }

  bool operator == (const AgentServerService_set_image_height_args & rhs) const
  {
    if (!(camera_name == rhs.camera_name))
      return false;
    if (!(height == rhs.height))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_set_image_height_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_set_image_height_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_set_image_height_pargs {
 public:


  virtual ~AgentServerService_set_image_height_pargs() throw() {}

  const std::string* camera_name;
  const int32_t* height;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_set_image_height_result__isset {
  _AgentServerService_set_image_height_result__isset() : success(false) {}
  bool success;
} _AgentServerService_set_image_height_result__isset;

class AgentServerService_set_image_height_result {
 public:

  AgentServerService_set_image_height_result() : success(0) {
  }

  virtual ~AgentServerService_set_image_height_result() throw() {}

  int32_t success;

  _AgentServerService_set_image_height_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AgentServerService_set_image_height_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_set_image_height_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_set_image_height_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_set_image_height_presult__isset {
  _AgentServerService_set_image_height_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_set_image_height_presult__isset;

class AgentServerService_set_image_height_presult {
 public:


  virtual ~AgentServerService_set_image_height_presult() throw() {}

  int32_t* success;

  _AgentServerService_set_image_height_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_get_exposure_time_args__isset {
  _AgentServerService_get_exposure_time_args__isset() : camera_name(false) {}
  bool camera_name;
} _AgentServerService_get_exposure_time_args__isset;

class AgentServerService_get_exposure_time_args {
 public:

  AgentServerService_get_exposure_time_args() : camera_name() {
  }

  virtual ~AgentServerService_get_exposure_time_args() throw() {}

  std::string camera_name;

  _AgentServerService_get_exposure_time_args__isset __isset;

  void __set_camera_name(const std::string& val) {
    camera_name = val;
  }

  bool operator == (const AgentServerService_get_exposure_time_args & rhs) const
  {
    if (!(camera_name == rhs.camera_name))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_exposure_time_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_exposure_time_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_get_exposure_time_pargs {
 public:


  virtual ~AgentServerService_get_exposure_time_pargs() throw() {}

  const std::string* camera_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_exposure_time_result__isset {
  _AgentServerService_get_exposure_time_result__isset() : success(false) {}
  bool success;
} _AgentServerService_get_exposure_time_result__isset;

class AgentServerService_get_exposure_time_result {
 public:

  AgentServerService_get_exposure_time_result() : success(0) {
  }

  virtual ~AgentServerService_get_exposure_time_result() throw() {}

  double success;

  _AgentServerService_get_exposure_time_result__isset __isset;

  void __set_success(const double val) {
    success = val;
  }

  bool operator == (const AgentServerService_get_exposure_time_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_exposure_time_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_exposure_time_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_exposure_time_presult__isset {
  _AgentServerService_get_exposure_time_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_get_exposure_time_presult__isset;

class AgentServerService_get_exposure_time_presult {
 public:


  virtual ~AgentServerService_get_exposure_time_presult() throw() {}

  double* success;

  _AgentServerService_get_exposure_time_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_get_gain_by_sensor_all_args__isset {
  _AgentServerService_get_gain_by_sensor_all_args__isset() : camera_name(false) {}
  bool camera_name;
} _AgentServerService_get_gain_by_sensor_all_args__isset;

class AgentServerService_get_gain_by_sensor_all_args {
 public:

  AgentServerService_get_gain_by_sensor_all_args() : camera_name() {
  }

  virtual ~AgentServerService_get_gain_by_sensor_all_args() throw() {}

  std::string camera_name;

  _AgentServerService_get_gain_by_sensor_all_args__isset __isset;

  void __set_camera_name(const std::string& val) {
    camera_name = val;
  }

  bool operator == (const AgentServerService_get_gain_by_sensor_all_args & rhs) const
  {
    if (!(camera_name == rhs.camera_name))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_gain_by_sensor_all_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_gain_by_sensor_all_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_get_gain_by_sensor_all_pargs {
 public:


  virtual ~AgentServerService_get_gain_by_sensor_all_pargs() throw() {}

  const std::string* camera_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_gain_by_sensor_all_result__isset {
  _AgentServerService_get_gain_by_sensor_all_result__isset() : success(false) {}
  bool success;
} _AgentServerService_get_gain_by_sensor_all_result__isset;

class AgentServerService_get_gain_by_sensor_all_result {
 public:

  AgentServerService_get_gain_by_sensor_all_result() : success(0) {
  }

  virtual ~AgentServerService_get_gain_by_sensor_all_result() throw() {}

  double success;

  _AgentServerService_get_gain_by_sensor_all_result__isset __isset;

  void __set_success(const double val) {
    success = val;
  }

  bool operator == (const AgentServerService_get_gain_by_sensor_all_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_gain_by_sensor_all_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_gain_by_sensor_all_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_gain_by_sensor_all_presult__isset {
  _AgentServerService_get_gain_by_sensor_all_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_get_gain_by_sensor_all_presult__isset;

class AgentServerService_get_gain_by_sensor_all_presult {
 public:


  virtual ~AgentServerService_get_gain_by_sensor_all_presult() throw() {}

  double* success;

  _AgentServerService_get_gain_by_sensor_all_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_get_gain_by_sensor_analog_args__isset {
  _AgentServerService_get_gain_by_sensor_analog_args__isset() : camera_name(false) {}
  bool camera_name;
} _AgentServerService_get_gain_by_sensor_analog_args__isset;

class AgentServerService_get_gain_by_sensor_analog_args {
 public:

  AgentServerService_get_gain_by_sensor_analog_args() : camera_name() {
  }

  virtual ~AgentServerService_get_gain_by_sensor_analog_args() throw() {}

  std::string camera_name;

  _AgentServerService_get_gain_by_sensor_analog_args__isset __isset;

  void __set_camera_name(const std::string& val) {
    camera_name = val;
  }

  bool operator == (const AgentServerService_get_gain_by_sensor_analog_args & rhs) const
  {
    if (!(camera_name == rhs.camera_name))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_gain_by_sensor_analog_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_gain_by_sensor_analog_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_get_gain_by_sensor_analog_pargs {
 public:


  virtual ~AgentServerService_get_gain_by_sensor_analog_pargs() throw() {}

  const std::string* camera_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_gain_by_sensor_analog_result__isset {
  _AgentServerService_get_gain_by_sensor_analog_result__isset() : success(false) {}
  bool success;
} _AgentServerService_get_gain_by_sensor_analog_result__isset;

class AgentServerService_get_gain_by_sensor_analog_result {
 public:

  AgentServerService_get_gain_by_sensor_analog_result() : success(0) {
  }

  virtual ~AgentServerService_get_gain_by_sensor_analog_result() throw() {}

  double success;

  _AgentServerService_get_gain_by_sensor_analog_result__isset __isset;

  void __set_success(const double val) {
    success = val;
  }

  bool operator == (const AgentServerService_get_gain_by_sensor_analog_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_gain_by_sensor_analog_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_gain_by_sensor_analog_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_gain_by_sensor_analog_presult__isset {
  _AgentServerService_get_gain_by_sensor_analog_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_get_gain_by_sensor_analog_presult__isset;

class AgentServerService_get_gain_by_sensor_analog_presult {
 public:


  virtual ~AgentServerService_get_gain_by_sensor_analog_presult() throw() {}

  double* success;

  _AgentServerService_get_gain_by_sensor_analog_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_get_gain_by_sensor_digital_args__isset {
  _AgentServerService_get_gain_by_sensor_digital_args__isset() : camera_name(false) {}
  bool camera_name;
} _AgentServerService_get_gain_by_sensor_digital_args__isset;

class AgentServerService_get_gain_by_sensor_digital_args {
 public:

  AgentServerService_get_gain_by_sensor_digital_args() : camera_name() {
  }

  virtual ~AgentServerService_get_gain_by_sensor_digital_args() throw() {}

  std::string camera_name;

  _AgentServerService_get_gain_by_sensor_digital_args__isset __isset;

  void __set_camera_name(const std::string& val) {
    camera_name = val;
  }

  bool operator == (const AgentServerService_get_gain_by_sensor_digital_args & rhs) const
  {
    if (!(camera_name == rhs.camera_name))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_gain_by_sensor_digital_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_gain_by_sensor_digital_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_get_gain_by_sensor_digital_pargs {
 public:


  virtual ~AgentServerService_get_gain_by_sensor_digital_pargs() throw() {}

  const std::string* camera_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_gain_by_sensor_digital_result__isset {
  _AgentServerService_get_gain_by_sensor_digital_result__isset() : success(false) {}
  bool success;
} _AgentServerService_get_gain_by_sensor_digital_result__isset;

class AgentServerService_get_gain_by_sensor_digital_result {
 public:

  AgentServerService_get_gain_by_sensor_digital_result() : success(0) {
  }

  virtual ~AgentServerService_get_gain_by_sensor_digital_result() throw() {}

  double success;

  _AgentServerService_get_gain_by_sensor_digital_result__isset __isset;

  void __set_success(const double val) {
    success = val;
  }

  bool operator == (const AgentServerService_get_gain_by_sensor_digital_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_gain_by_sensor_digital_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_gain_by_sensor_digital_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_gain_by_sensor_digital_presult__isset {
  _AgentServerService_get_gain_by_sensor_digital_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_get_gain_by_sensor_digital_presult__isset;

class AgentServerService_get_gain_by_sensor_digital_presult {
 public:


  virtual ~AgentServerService_get_gain_by_sensor_digital_presult() throw() {}

  double* success;

  _AgentServerService_get_gain_by_sensor_digital_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_get_frame_rate_args__isset {
  _AgentServerService_get_frame_rate_args__isset() : camera_name(false) {}
  bool camera_name;
} _AgentServerService_get_frame_rate_args__isset;

class AgentServerService_get_frame_rate_args {
 public:

  AgentServerService_get_frame_rate_args() : camera_name() {
  }

  virtual ~AgentServerService_get_frame_rate_args() throw() {}

  std::string camera_name;

  _AgentServerService_get_frame_rate_args__isset __isset;

  void __set_camera_name(const std::string& val) {
    camera_name = val;
  }

  bool operator == (const AgentServerService_get_frame_rate_args & rhs) const
  {
    if (!(camera_name == rhs.camera_name))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_frame_rate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_frame_rate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_get_frame_rate_pargs {
 public:


  virtual ~AgentServerService_get_frame_rate_pargs() throw() {}

  const std::string* camera_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_frame_rate_result__isset {
  _AgentServerService_get_frame_rate_result__isset() : success(false) {}
  bool success;
} _AgentServerService_get_frame_rate_result__isset;

class AgentServerService_get_frame_rate_result {
 public:

  AgentServerService_get_frame_rate_result() : success(0) {
  }

  virtual ~AgentServerService_get_frame_rate_result() throw() {}

  double success;

  _AgentServerService_get_frame_rate_result__isset __isset;

  void __set_success(const double val) {
    success = val;
  }

  bool operator == (const AgentServerService_get_frame_rate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_frame_rate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_frame_rate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_frame_rate_presult__isset {
  _AgentServerService_get_frame_rate_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_get_frame_rate_presult__isset;

class AgentServerService_get_frame_rate_presult {
 public:


  virtual ~AgentServerService_get_frame_rate_presult() throw() {}

  double* success;

  _AgentServerService_get_frame_rate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_get_exposure_time_range_args__isset {
  _AgentServerService_get_exposure_time_range_args__isset() : camera_name(false) {}
  bool camera_name;
} _AgentServerService_get_exposure_time_range_args__isset;

class AgentServerService_get_exposure_time_range_args {
 public:

  AgentServerService_get_exposure_time_range_args() : camera_name() {
  }

  virtual ~AgentServerService_get_exposure_time_range_args() throw() {}

  std::string camera_name;

  _AgentServerService_get_exposure_time_range_args__isset __isset;

  void __set_camera_name(const std::string& val) {
    camera_name = val;
  }

  bool operator == (const AgentServerService_get_exposure_time_range_args & rhs) const
  {
    if (!(camera_name == rhs.camera_name))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_exposure_time_range_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_exposure_time_range_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_get_exposure_time_range_pargs {
 public:


  virtual ~AgentServerService_get_exposure_time_range_pargs() throw() {}

  const std::string* camera_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_exposure_time_range_result__isset {
  _AgentServerService_get_exposure_time_range_result__isset() : success(false) {}
  bool success;
} _AgentServerService_get_exposure_time_range_result__isset;

class AgentServerService_get_exposure_time_range_result {
 public:

  AgentServerService_get_exposure_time_range_result() {
  }

  virtual ~AgentServerService_get_exposure_time_range_result() throw() {}

  MinMaxStruct success;

  _AgentServerService_get_exposure_time_range_result__isset __isset;

  void __set_success(const MinMaxStruct& val) {
    success = val;
  }

  bool operator == (const AgentServerService_get_exposure_time_range_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_exposure_time_range_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_exposure_time_range_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_exposure_time_range_presult__isset {
  _AgentServerService_get_exposure_time_range_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_get_exposure_time_range_presult__isset;

class AgentServerService_get_exposure_time_range_presult {
 public:


  virtual ~AgentServerService_get_exposure_time_range_presult() throw() {}

  MinMaxStruct* success;

  _AgentServerService_get_exposure_time_range_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_get_gain_range_by_sensor_all_args__isset {
  _AgentServerService_get_gain_range_by_sensor_all_args__isset() : camera_name(false) {}
  bool camera_name;
} _AgentServerService_get_gain_range_by_sensor_all_args__isset;

class AgentServerService_get_gain_range_by_sensor_all_args {
 public:

  AgentServerService_get_gain_range_by_sensor_all_args() : camera_name() {
  }

  virtual ~AgentServerService_get_gain_range_by_sensor_all_args() throw() {}

  std::string camera_name;

  _AgentServerService_get_gain_range_by_sensor_all_args__isset __isset;

  void __set_camera_name(const std::string& val) {
    camera_name = val;
  }

  bool operator == (const AgentServerService_get_gain_range_by_sensor_all_args & rhs) const
  {
    if (!(camera_name == rhs.camera_name))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_gain_range_by_sensor_all_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_gain_range_by_sensor_all_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_get_gain_range_by_sensor_all_pargs {
 public:


  virtual ~AgentServerService_get_gain_range_by_sensor_all_pargs() throw() {}

  const std::string* camera_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_gain_range_by_sensor_all_result__isset {
  _AgentServerService_get_gain_range_by_sensor_all_result__isset() : success(false) {}
  bool success;
} _AgentServerService_get_gain_range_by_sensor_all_result__isset;

class AgentServerService_get_gain_range_by_sensor_all_result {
 public:

  AgentServerService_get_gain_range_by_sensor_all_result() {
  }

  virtual ~AgentServerService_get_gain_range_by_sensor_all_result() throw() {}

  MinMaxStruct success;

  _AgentServerService_get_gain_range_by_sensor_all_result__isset __isset;

  void __set_success(const MinMaxStruct& val) {
    success = val;
  }

  bool operator == (const AgentServerService_get_gain_range_by_sensor_all_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_gain_range_by_sensor_all_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_gain_range_by_sensor_all_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_gain_range_by_sensor_all_presult__isset {
  _AgentServerService_get_gain_range_by_sensor_all_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_get_gain_range_by_sensor_all_presult__isset;

class AgentServerService_get_gain_range_by_sensor_all_presult {
 public:


  virtual ~AgentServerService_get_gain_range_by_sensor_all_presult() throw() {}

  MinMaxStruct* success;

  _AgentServerService_get_gain_range_by_sensor_all_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_get_gain_range_by_sensor_analog_args__isset {
  _AgentServerService_get_gain_range_by_sensor_analog_args__isset() : camera_name(false) {}
  bool camera_name;
} _AgentServerService_get_gain_range_by_sensor_analog_args__isset;

class AgentServerService_get_gain_range_by_sensor_analog_args {
 public:

  AgentServerService_get_gain_range_by_sensor_analog_args() : camera_name() {
  }

  virtual ~AgentServerService_get_gain_range_by_sensor_analog_args() throw() {}

  std::string camera_name;

  _AgentServerService_get_gain_range_by_sensor_analog_args__isset __isset;

  void __set_camera_name(const std::string& val) {
    camera_name = val;
  }

  bool operator == (const AgentServerService_get_gain_range_by_sensor_analog_args & rhs) const
  {
    if (!(camera_name == rhs.camera_name))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_gain_range_by_sensor_analog_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_gain_range_by_sensor_analog_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_get_gain_range_by_sensor_analog_pargs {
 public:


  virtual ~AgentServerService_get_gain_range_by_sensor_analog_pargs() throw() {}

  const std::string* camera_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_gain_range_by_sensor_analog_result__isset {
  _AgentServerService_get_gain_range_by_sensor_analog_result__isset() : success(false) {}
  bool success;
} _AgentServerService_get_gain_range_by_sensor_analog_result__isset;

class AgentServerService_get_gain_range_by_sensor_analog_result {
 public:

  AgentServerService_get_gain_range_by_sensor_analog_result() {
  }

  virtual ~AgentServerService_get_gain_range_by_sensor_analog_result() throw() {}

  MinMaxStruct success;

  _AgentServerService_get_gain_range_by_sensor_analog_result__isset __isset;

  void __set_success(const MinMaxStruct& val) {
    success = val;
  }

  bool operator == (const AgentServerService_get_gain_range_by_sensor_analog_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_gain_range_by_sensor_analog_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_gain_range_by_sensor_analog_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_gain_range_by_sensor_analog_presult__isset {
  _AgentServerService_get_gain_range_by_sensor_analog_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_get_gain_range_by_sensor_analog_presult__isset;

class AgentServerService_get_gain_range_by_sensor_analog_presult {
 public:


  virtual ~AgentServerService_get_gain_range_by_sensor_analog_presult() throw() {}

  MinMaxStruct* success;

  _AgentServerService_get_gain_range_by_sensor_analog_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_get_gain_range_by_sensor_digital_args__isset {
  _AgentServerService_get_gain_range_by_sensor_digital_args__isset() : camera_name(false) {}
  bool camera_name;
} _AgentServerService_get_gain_range_by_sensor_digital_args__isset;

class AgentServerService_get_gain_range_by_sensor_digital_args {
 public:

  AgentServerService_get_gain_range_by_sensor_digital_args() : camera_name() {
  }

  virtual ~AgentServerService_get_gain_range_by_sensor_digital_args() throw() {}

  std::string camera_name;

  _AgentServerService_get_gain_range_by_sensor_digital_args__isset __isset;

  void __set_camera_name(const std::string& val) {
    camera_name = val;
  }

  bool operator == (const AgentServerService_get_gain_range_by_sensor_digital_args & rhs) const
  {
    if (!(camera_name == rhs.camera_name))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_gain_range_by_sensor_digital_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_gain_range_by_sensor_digital_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_get_gain_range_by_sensor_digital_pargs {
 public:


  virtual ~AgentServerService_get_gain_range_by_sensor_digital_pargs() throw() {}

  const std::string* camera_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_gain_range_by_sensor_digital_result__isset {
  _AgentServerService_get_gain_range_by_sensor_digital_result__isset() : success(false) {}
  bool success;
} _AgentServerService_get_gain_range_by_sensor_digital_result__isset;

class AgentServerService_get_gain_range_by_sensor_digital_result {
 public:

  AgentServerService_get_gain_range_by_sensor_digital_result() {
  }

  virtual ~AgentServerService_get_gain_range_by_sensor_digital_result() throw() {}

  MinMaxStruct success;

  _AgentServerService_get_gain_range_by_sensor_digital_result__isset __isset;

  void __set_success(const MinMaxStruct& val) {
    success = val;
  }

  bool operator == (const AgentServerService_get_gain_range_by_sensor_digital_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_gain_range_by_sensor_digital_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_gain_range_by_sensor_digital_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_gain_range_by_sensor_digital_presult__isset {
  _AgentServerService_get_gain_range_by_sensor_digital_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_get_gain_range_by_sensor_digital_presult__isset;

class AgentServerService_get_gain_range_by_sensor_digital_presult {
 public:


  virtual ~AgentServerService_get_gain_range_by_sensor_digital_presult() throw() {}

  MinMaxStruct* success;

  _AgentServerService_get_gain_range_by_sensor_digital_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_get_frame_rate_range_args__isset {
  _AgentServerService_get_frame_rate_range_args__isset() : camera_name(false) {}
  bool camera_name;
} _AgentServerService_get_frame_rate_range_args__isset;

class AgentServerService_get_frame_rate_range_args {
 public:

  AgentServerService_get_frame_rate_range_args() : camera_name() {
  }

  virtual ~AgentServerService_get_frame_rate_range_args() throw() {}

  std::string camera_name;

  _AgentServerService_get_frame_rate_range_args__isset __isset;

  void __set_camera_name(const std::string& val) {
    camera_name = val;
  }

  bool operator == (const AgentServerService_get_frame_rate_range_args & rhs) const
  {
    if (!(camera_name == rhs.camera_name))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_frame_rate_range_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_frame_rate_range_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_get_frame_rate_range_pargs {
 public:


  virtual ~AgentServerService_get_frame_rate_range_pargs() throw() {}

  const std::string* camera_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_frame_rate_range_result__isset {
  _AgentServerService_get_frame_rate_range_result__isset() : success(false) {}
  bool success;
} _AgentServerService_get_frame_rate_range_result__isset;

class AgentServerService_get_frame_rate_range_result {
 public:

  AgentServerService_get_frame_rate_range_result() {
  }

  virtual ~AgentServerService_get_frame_rate_range_result() throw() {}

  MinMaxStruct success;

  _AgentServerService_get_frame_rate_range_result__isset __isset;

  void __set_success(const MinMaxStruct& val) {
    success = val;
  }

  bool operator == (const AgentServerService_get_frame_rate_range_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_frame_rate_range_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_frame_rate_range_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_frame_rate_range_presult__isset {
  _AgentServerService_get_frame_rate_range_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_get_frame_rate_range_presult__isset;

class AgentServerService_get_frame_rate_range_presult {
 public:


  virtual ~AgentServerService_get_frame_rate_range_presult() throw() {}

  MinMaxStruct* success;

  _AgentServerService_get_frame_rate_range_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_get_image_width_args__isset {
  _AgentServerService_get_image_width_args__isset() : camera_name(false) {}
  bool camera_name;
} _AgentServerService_get_image_width_args__isset;

class AgentServerService_get_image_width_args {
 public:

  AgentServerService_get_image_width_args() : camera_name() {
  }

  virtual ~AgentServerService_get_image_width_args() throw() {}

  std::string camera_name;

  _AgentServerService_get_image_width_args__isset __isset;

  void __set_camera_name(const std::string& val) {
    camera_name = val;
  }

  bool operator == (const AgentServerService_get_image_width_args & rhs) const
  {
    if (!(camera_name == rhs.camera_name))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_image_width_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_image_width_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_get_image_width_pargs {
 public:


  virtual ~AgentServerService_get_image_width_pargs() throw() {}

  const std::string* camera_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_image_width_result__isset {
  _AgentServerService_get_image_width_result__isset() : success(false) {}
  bool success;
} _AgentServerService_get_image_width_result__isset;

class AgentServerService_get_image_width_result {
 public:

  AgentServerService_get_image_width_result() : success(0) {
  }

  virtual ~AgentServerService_get_image_width_result() throw() {}

  int32_t success;

  _AgentServerService_get_image_width_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AgentServerService_get_image_width_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_image_width_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_image_width_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_image_width_presult__isset {
  _AgentServerService_get_image_width_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_get_image_width_presult__isset;

class AgentServerService_get_image_width_presult {
 public:


  virtual ~AgentServerService_get_image_width_presult() throw() {}

  int32_t* success;

  _AgentServerService_get_image_width_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_get_image_height_args__isset {
  _AgentServerService_get_image_height_args__isset() : camera_name(false) {}
  bool camera_name;
} _AgentServerService_get_image_height_args__isset;

class AgentServerService_get_image_height_args {
 public:

  AgentServerService_get_image_height_args() : camera_name() {
  }

  virtual ~AgentServerService_get_image_height_args() throw() {}

  std::string camera_name;

  _AgentServerService_get_image_height_args__isset __isset;

  void __set_camera_name(const std::string& val) {
    camera_name = val;
  }

  bool operator == (const AgentServerService_get_image_height_args & rhs) const
  {
    if (!(camera_name == rhs.camera_name))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_image_height_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_image_height_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_get_image_height_pargs {
 public:


  virtual ~AgentServerService_get_image_height_pargs() throw() {}

  const std::string* camera_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_image_height_result__isset {
  _AgentServerService_get_image_height_result__isset() : success(false) {}
  bool success;
} _AgentServerService_get_image_height_result__isset;

class AgentServerService_get_image_height_result {
 public:

  AgentServerService_get_image_height_result() : success(0) {
  }

  virtual ~AgentServerService_get_image_height_result() throw() {}

  int32_t success;

  _AgentServerService_get_image_height_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AgentServerService_get_image_height_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_image_height_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_image_height_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_image_height_presult__isset {
  _AgentServerService_get_image_height_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_get_image_height_presult__isset;

class AgentServerService_get_image_height_presult {
 public:


  virtual ~AgentServerService_get_image_height_presult() throw() {}

  int32_t* success;

  _AgentServerService_get_image_height_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_get_height_max_args__isset {
  _AgentServerService_get_height_max_args__isset() : camera_name(false) {}
  bool camera_name;
} _AgentServerService_get_height_max_args__isset;

class AgentServerService_get_height_max_args {
 public:

  AgentServerService_get_height_max_args() : camera_name() {
  }

  virtual ~AgentServerService_get_height_max_args() throw() {}

  std::string camera_name;

  _AgentServerService_get_height_max_args__isset __isset;

  void __set_camera_name(const std::string& val) {
    camera_name = val;
  }

  bool operator == (const AgentServerService_get_height_max_args & rhs) const
  {
    if (!(camera_name == rhs.camera_name))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_height_max_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_height_max_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_get_height_max_pargs {
 public:


  virtual ~AgentServerService_get_height_max_pargs() throw() {}

  const std::string* camera_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_height_max_result__isset {
  _AgentServerService_get_height_max_result__isset() : success(false) {}
  bool success;
} _AgentServerService_get_height_max_result__isset;

class AgentServerService_get_height_max_result {
 public:

  AgentServerService_get_height_max_result() : success(0) {
  }

  virtual ~AgentServerService_get_height_max_result() throw() {}

  int32_t success;

  _AgentServerService_get_height_max_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AgentServerService_get_height_max_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_height_max_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_height_max_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_height_max_presult__isset {
  _AgentServerService_get_height_max_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_get_height_max_presult__isset;

class AgentServerService_get_height_max_presult {
 public:


  virtual ~AgentServerService_get_height_max_presult() throw() {}

  int32_t* success;

  _AgentServerService_get_height_max_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_get_width_max_args__isset {
  _AgentServerService_get_width_max_args__isset() : camera_name(false) {}
  bool camera_name;
} _AgentServerService_get_width_max_args__isset;

class AgentServerService_get_width_max_args {
 public:

  AgentServerService_get_width_max_args() : camera_name() {
  }

  virtual ~AgentServerService_get_width_max_args() throw() {}

  std::string camera_name;

  _AgentServerService_get_width_max_args__isset __isset;

  void __set_camera_name(const std::string& val) {
    camera_name = val;
  }

  bool operator == (const AgentServerService_get_width_max_args & rhs) const
  {
    if (!(camera_name == rhs.camera_name))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_width_max_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_width_max_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_get_width_max_pargs {
 public:


  virtual ~AgentServerService_get_width_max_pargs() throw() {}

  const std::string* camera_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_width_max_result__isset {
  _AgentServerService_get_width_max_result__isset() : success(false) {}
  bool success;
} _AgentServerService_get_width_max_result__isset;

class AgentServerService_get_width_max_result {
 public:

  AgentServerService_get_width_max_result() : success(0) {
  }

  virtual ~AgentServerService_get_width_max_result() throw() {}

  int32_t success;

  _AgentServerService_get_width_max_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AgentServerService_get_width_max_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_width_max_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_width_max_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_width_max_presult__isset {
  _AgentServerService_get_width_max_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_get_width_max_presult__isset;

class AgentServerService_get_width_max_presult {
 public:


  virtual ~AgentServerService_get_width_max_presult() throw() {}

  int32_t* success;

  _AgentServerService_get_width_max_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_get_offset_x_args__isset {
  _AgentServerService_get_offset_x_args__isset() : camera_name(false) {}
  bool camera_name;
} _AgentServerService_get_offset_x_args__isset;

class AgentServerService_get_offset_x_args {
 public:

  AgentServerService_get_offset_x_args() : camera_name() {
  }

  virtual ~AgentServerService_get_offset_x_args() throw() {}

  std::string camera_name;

  _AgentServerService_get_offset_x_args__isset __isset;

  void __set_camera_name(const std::string& val) {
    camera_name = val;
  }

  bool operator == (const AgentServerService_get_offset_x_args & rhs) const
  {
    if (!(camera_name == rhs.camera_name))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_offset_x_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_offset_x_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_get_offset_x_pargs {
 public:


  virtual ~AgentServerService_get_offset_x_pargs() throw() {}

  const std::string* camera_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_offset_x_result__isset {
  _AgentServerService_get_offset_x_result__isset() : success(false) {}
  bool success;
} _AgentServerService_get_offset_x_result__isset;

class AgentServerService_get_offset_x_result {
 public:

  AgentServerService_get_offset_x_result() : success(0) {
  }

  virtual ~AgentServerService_get_offset_x_result() throw() {}

  int32_t success;

  _AgentServerService_get_offset_x_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AgentServerService_get_offset_x_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_offset_x_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_offset_x_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_offset_x_presult__isset {
  _AgentServerService_get_offset_x_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_get_offset_x_presult__isset;

class AgentServerService_get_offset_x_presult {
 public:


  virtual ~AgentServerService_get_offset_x_presult() throw() {}

  int32_t* success;

  _AgentServerService_get_offset_x_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_get_offset_y_args__isset {
  _AgentServerService_get_offset_y_args__isset() : camera_name(false) {}
  bool camera_name;
} _AgentServerService_get_offset_y_args__isset;

class AgentServerService_get_offset_y_args {
 public:

  AgentServerService_get_offset_y_args() : camera_name() {
  }

  virtual ~AgentServerService_get_offset_y_args() throw() {}

  std::string camera_name;

  _AgentServerService_get_offset_y_args__isset __isset;

  void __set_camera_name(const std::string& val) {
    camera_name = val;
  }

  bool operator == (const AgentServerService_get_offset_y_args & rhs) const
  {
    if (!(camera_name == rhs.camera_name))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_offset_y_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_offset_y_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_get_offset_y_pargs {
 public:


  virtual ~AgentServerService_get_offset_y_pargs() throw() {}

  const std::string* camera_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_offset_y_result__isset {
  _AgentServerService_get_offset_y_result__isset() : success(false) {}
  bool success;
} _AgentServerService_get_offset_y_result__isset;

class AgentServerService_get_offset_y_result {
 public:

  AgentServerService_get_offset_y_result() : success(0) {
  }

  virtual ~AgentServerService_get_offset_y_result() throw() {}

  int32_t success;

  _AgentServerService_get_offset_y_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AgentServerService_get_offset_y_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_offset_y_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_offset_y_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_offset_y_presult__isset {
  _AgentServerService_get_offset_y_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_get_offset_y_presult__isset;

class AgentServerService_get_offset_y_presult {
 public:


  virtual ~AgentServerService_get_offset_y_presult() throw() {}

  int32_t* success;

  _AgentServerService_get_offset_y_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_is_enabled_turbo_transfer_args__isset {
  _AgentServerService_is_enabled_turbo_transfer_args__isset() : camera_name(false) {}
  bool camera_name;
} _AgentServerService_is_enabled_turbo_transfer_args__isset;

class AgentServerService_is_enabled_turbo_transfer_args {
 public:

  AgentServerService_is_enabled_turbo_transfer_args() : camera_name() {
  }

  virtual ~AgentServerService_is_enabled_turbo_transfer_args() throw() {}

  std::string camera_name;

  _AgentServerService_is_enabled_turbo_transfer_args__isset __isset;

  void __set_camera_name(const std::string& val) {
    camera_name = val;
  }

  bool operator == (const AgentServerService_is_enabled_turbo_transfer_args & rhs) const
  {
    if (!(camera_name == rhs.camera_name))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_is_enabled_turbo_transfer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_is_enabled_turbo_transfer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_is_enabled_turbo_transfer_pargs {
 public:


  virtual ~AgentServerService_is_enabled_turbo_transfer_pargs() throw() {}

  const std::string* camera_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_is_enabled_turbo_transfer_result__isset {
  _AgentServerService_is_enabled_turbo_transfer_result__isset() : success(false) {}
  bool success;
} _AgentServerService_is_enabled_turbo_transfer_result__isset;

class AgentServerService_is_enabled_turbo_transfer_result {
 public:

  AgentServerService_is_enabled_turbo_transfer_result() : success(0) {
  }

  virtual ~AgentServerService_is_enabled_turbo_transfer_result() throw() {}

  int32_t success;

  _AgentServerService_is_enabled_turbo_transfer_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AgentServerService_is_enabled_turbo_transfer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_is_enabled_turbo_transfer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_is_enabled_turbo_transfer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_is_enabled_turbo_transfer_presult__isset {
  _AgentServerService_is_enabled_turbo_transfer_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_is_enabled_turbo_transfer_presult__isset;

class AgentServerService_is_enabled_turbo_transfer_presult {
 public:


  virtual ~AgentServerService_is_enabled_turbo_transfer_presult() throw() {}

  int32_t* success;

  _AgentServerService_is_enabled_turbo_transfer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_get_pixel_fmt_args__isset {
  _AgentServerService_get_pixel_fmt_args__isset() : camera_name(false) {}
  bool camera_name;
} _AgentServerService_get_pixel_fmt_args__isset;

class AgentServerService_get_pixel_fmt_args {
 public:

  AgentServerService_get_pixel_fmt_args() : camera_name() {
  }

  virtual ~AgentServerService_get_pixel_fmt_args() throw() {}

  std::string camera_name;

  _AgentServerService_get_pixel_fmt_args__isset __isset;

  void __set_camera_name(const std::string& val) {
    camera_name = val;
  }

  bool operator == (const AgentServerService_get_pixel_fmt_args & rhs) const
  {
    if (!(camera_name == rhs.camera_name))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_pixel_fmt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_pixel_fmt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_get_pixel_fmt_pargs {
 public:


  virtual ~AgentServerService_get_pixel_fmt_pargs() throw() {}

  const std::string* camera_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_pixel_fmt_result__isset {
  _AgentServerService_get_pixel_fmt_result__isset() : success(false) {}
  bool success;
} _AgentServerService_get_pixel_fmt_result__isset;

class AgentServerService_get_pixel_fmt_result {
 public:

  AgentServerService_get_pixel_fmt_result() : success() {
  }

  virtual ~AgentServerService_get_pixel_fmt_result() throw() {}

  std::string success;

  _AgentServerService_get_pixel_fmt_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const AgentServerService_get_pixel_fmt_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_pixel_fmt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_pixel_fmt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_pixel_fmt_presult__isset {
  _AgentServerService_get_pixel_fmt_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_get_pixel_fmt_presult__isset;

class AgentServerService_get_pixel_fmt_presult {
 public:


  virtual ~AgentServerService_get_pixel_fmt_presult() throw() {}

  std::string* success;

  _AgentServerService_get_pixel_fmt_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_get_user_defined_name_args__isset {
  _AgentServerService_get_user_defined_name_args__isset() : camera_name(false) {}
  bool camera_name;
} _AgentServerService_get_user_defined_name_args__isset;

class AgentServerService_get_user_defined_name_args {
 public:

  AgentServerService_get_user_defined_name_args() : camera_name() {
  }

  virtual ~AgentServerService_get_user_defined_name_args() throw() {}

  std::string camera_name;

  _AgentServerService_get_user_defined_name_args__isset __isset;

  void __set_camera_name(const std::string& val) {
    camera_name = val;
  }

  bool operator == (const AgentServerService_get_user_defined_name_args & rhs) const
  {
    if (!(camera_name == rhs.camera_name))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_user_defined_name_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_user_defined_name_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_get_user_defined_name_pargs {
 public:


  virtual ~AgentServerService_get_user_defined_name_pargs() throw() {}

  const std::string* camera_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_user_defined_name_result__isset {
  _AgentServerService_get_user_defined_name_result__isset() : success(false) {}
  bool success;
} _AgentServerService_get_user_defined_name_result__isset;

class AgentServerService_get_user_defined_name_result {
 public:

  AgentServerService_get_user_defined_name_result() : success() {
  }

  virtual ~AgentServerService_get_user_defined_name_result() throw() {}

  std::string success;

  _AgentServerService_get_user_defined_name_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const AgentServerService_get_user_defined_name_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_user_defined_name_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_user_defined_name_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_user_defined_name_presult__isset {
  _AgentServerService_get_user_defined_name_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_get_user_defined_name_presult__isset;

class AgentServerService_get_user_defined_name_presult {
 public:


  virtual ~AgentServerService_get_user_defined_name_presult() throw() {}

  std::string* success;

  _AgentServerService_get_user_defined_name_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_get_device_serial_number_args__isset {
  _AgentServerService_get_device_serial_number_args__isset() : camera_name(false) {}
  bool camera_name;
} _AgentServerService_get_device_serial_number_args__isset;

class AgentServerService_get_device_serial_number_args {
 public:

  AgentServerService_get_device_serial_number_args() : camera_name() {
  }

  virtual ~AgentServerService_get_device_serial_number_args() throw() {}

  std::string camera_name;

  _AgentServerService_get_device_serial_number_args__isset __isset;

  void __set_camera_name(const std::string& val) {
    camera_name = val;
  }

  bool operator == (const AgentServerService_get_device_serial_number_args & rhs) const
  {
    if (!(camera_name == rhs.camera_name))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_device_serial_number_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_device_serial_number_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_get_device_serial_number_pargs {
 public:


  virtual ~AgentServerService_get_device_serial_number_pargs() throw() {}

  const std::string* camera_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_device_serial_number_result__isset {
  _AgentServerService_get_device_serial_number_result__isset() : success(false) {}
  bool success;
} _AgentServerService_get_device_serial_number_result__isset;

class AgentServerService_get_device_serial_number_result {
 public:

  AgentServerService_get_device_serial_number_result() : success() {
  }

  virtual ~AgentServerService_get_device_serial_number_result() throw() {}

  std::string success;

  _AgentServerService_get_device_serial_number_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const AgentServerService_get_device_serial_number_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_device_serial_number_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_device_serial_number_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_device_serial_number_presult__isset {
  _AgentServerService_get_device_serial_number_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_get_device_serial_number_presult__isset;

class AgentServerService_get_device_serial_number_presult {
 public:


  virtual ~AgentServerService_get_device_serial_number_presult() throw() {}

  std::string* success;

  _AgentServerService_get_device_serial_number_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_get_current_ip_address_args__isset {
  _AgentServerService_get_current_ip_address_args__isset() : camera_name(false) {}
  bool camera_name;
} _AgentServerService_get_current_ip_address_args__isset;

class AgentServerService_get_current_ip_address_args {
 public:

  AgentServerService_get_current_ip_address_args() : camera_name() {
  }

  virtual ~AgentServerService_get_current_ip_address_args() throw() {}

  std::string camera_name;

  _AgentServerService_get_current_ip_address_args__isset __isset;

  void __set_camera_name(const std::string& val) {
    camera_name = val;
  }

  bool operator == (const AgentServerService_get_current_ip_address_args & rhs) const
  {
    if (!(camera_name == rhs.camera_name))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_current_ip_address_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_current_ip_address_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_get_current_ip_address_pargs {
 public:


  virtual ~AgentServerService_get_current_ip_address_pargs() throw() {}

  const std::string* camera_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_current_ip_address_result__isset {
  _AgentServerService_get_current_ip_address_result__isset() : success(false) {}
  bool success;
} _AgentServerService_get_current_ip_address_result__isset;

class AgentServerService_get_current_ip_address_result {
 public:

  AgentServerService_get_current_ip_address_result() : success() {
  }

  virtual ~AgentServerService_get_current_ip_address_result() throw() {}

  std::string success;

  _AgentServerService_get_current_ip_address_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const AgentServerService_get_current_ip_address_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_current_ip_address_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_current_ip_address_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_current_ip_address_presult__isset {
  _AgentServerService_get_current_ip_address_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_get_current_ip_address_presult__isset;

class AgentServerService_get_current_ip_address_presult {
 public:


  virtual ~AgentServerService_get_current_ip_address_presult() throw() {}

  std::string* success;

  _AgentServerService_get_current_ip_address_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_get_grab_fps_args__isset {
  _AgentServerService_get_grab_fps_args__isset() : camera_name(false) {}
  bool camera_name;
} _AgentServerService_get_grab_fps_args__isset;

class AgentServerService_get_grab_fps_args {
 public:

  AgentServerService_get_grab_fps_args() : camera_name() {
  }

  virtual ~AgentServerService_get_grab_fps_args() throw() {}

  std::string camera_name;

  _AgentServerService_get_grab_fps_args__isset __isset;

  void __set_camera_name(const std::string& val) {
    camera_name = val;
  }

  bool operator == (const AgentServerService_get_grab_fps_args & rhs) const
  {
    if (!(camera_name == rhs.camera_name))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_grab_fps_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_grab_fps_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_get_grab_fps_pargs {
 public:


  virtual ~AgentServerService_get_grab_fps_pargs() throw() {}

  const std::string* camera_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_grab_fps_result__isset {
  _AgentServerService_get_grab_fps_result__isset() : success(false) {}
  bool success;
} _AgentServerService_get_grab_fps_result__isset;

class AgentServerService_get_grab_fps_result {
 public:

  AgentServerService_get_grab_fps_result() : success(0) {
  }

  virtual ~AgentServerService_get_grab_fps_result() throw() {}

  double success;

  _AgentServerService_get_grab_fps_result__isset __isset;

  void __set_success(const double val) {
    success = val;
  }

  bool operator == (const AgentServerService_get_grab_fps_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_grab_fps_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_grab_fps_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_grab_fps_presult__isset {
  _AgentServerService_get_grab_fps_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_get_grab_fps_presult__isset;

class AgentServerService_get_grab_fps_presult {
 public:


  virtual ~AgentServerService_get_grab_fps_presult() throw() {}

  double* success;

  _AgentServerService_get_grab_fps_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_get_process_fps_args__isset {
  _AgentServerService_get_process_fps_args__isset() : camera_name(false) {}
  bool camera_name;
} _AgentServerService_get_process_fps_args__isset;

class AgentServerService_get_process_fps_args {
 public:

  AgentServerService_get_process_fps_args() : camera_name() {
  }

  virtual ~AgentServerService_get_process_fps_args() throw() {}

  std::string camera_name;

  _AgentServerService_get_process_fps_args__isset __isset;

  void __set_camera_name(const std::string& val) {
    camera_name = val;
  }

  bool operator == (const AgentServerService_get_process_fps_args & rhs) const
  {
    if (!(camera_name == rhs.camera_name))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_process_fps_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_process_fps_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_get_process_fps_pargs {
 public:


  virtual ~AgentServerService_get_process_fps_pargs() throw() {}

  const std::string* camera_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_process_fps_result__isset {
  _AgentServerService_get_process_fps_result__isset() : success(false) {}
  bool success;
} _AgentServerService_get_process_fps_result__isset;

class AgentServerService_get_process_fps_result {
 public:

  AgentServerService_get_process_fps_result() : success(0) {
  }

  virtual ~AgentServerService_get_process_fps_result() throw() {}

  double success;

  _AgentServerService_get_process_fps_result__isset __isset;

  void __set_success(const double val) {
    success = val;
  }

  bool operator == (const AgentServerService_get_process_fps_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_process_fps_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_process_fps_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_process_fps_presult__isset {
  _AgentServerService_get_process_fps_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_get_process_fps_presult__isset;

class AgentServerService_get_process_fps_presult {
 public:


  virtual ~AgentServerService_get_process_fps_presult() throw() {}

  double* success;

  _AgentServerService_get_process_fps_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_save_feature_args__isset {
  _AgentServerService_save_feature_args__isset() : camera_name(false) {}
  bool camera_name;
} _AgentServerService_save_feature_args__isset;

class AgentServerService_save_feature_args {
 public:

  AgentServerService_save_feature_args() : camera_name() {
  }

  virtual ~AgentServerService_save_feature_args() throw() {}

  std::string camera_name;

  _AgentServerService_save_feature_args__isset __isset;

  void __set_camera_name(const std::string& val) {
    camera_name = val;
  }

  bool operator == (const AgentServerService_save_feature_args & rhs) const
  {
    if (!(camera_name == rhs.camera_name))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_save_feature_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_save_feature_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_save_feature_pargs {
 public:


  virtual ~AgentServerService_save_feature_pargs() throw() {}

  const std::string* camera_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_save_feature_result__isset {
  _AgentServerService_save_feature_result__isset() : success(false) {}
  bool success;
} _AgentServerService_save_feature_result__isset;

class AgentServerService_save_feature_result {
 public:

  AgentServerService_save_feature_result() : success() {
  }

  virtual ~AgentServerService_save_feature_result() throw() {}

  std::string success;

  _AgentServerService_save_feature_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const AgentServerService_save_feature_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_save_feature_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_save_feature_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_save_feature_presult__isset {
  _AgentServerService_save_feature_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_save_feature_presult__isset;

class AgentServerService_save_feature_presult {
 public:


  virtual ~AgentServerService_save_feature_presult() throw() {}

  std::string* success;

  _AgentServerService_save_feature_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_update_feature_args__isset {
  _AgentServerService_update_feature_args__isset() : camera_name(false), content(false) {}
  bool camera_name;
  bool content;
} _AgentServerService_update_feature_args__isset;

class AgentServerService_update_feature_args {
 public:

  AgentServerService_update_feature_args() : camera_name(), content() {
  }

  virtual ~AgentServerService_update_feature_args() throw() {}

  std::string camera_name;
  std::string content;

  _AgentServerService_update_feature_args__isset __isset;

  void __set_camera_name(const std::string& val) {
    camera_name = val;
  }

  void __set_content(const std::string& val) {
    content = val;
  }

  bool operator == (const AgentServerService_update_feature_args & rhs) const
  {
    if (!(camera_name == rhs.camera_name))
      return false;
    if (!(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_update_feature_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_update_feature_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_update_feature_pargs {
 public:


  virtual ~AgentServerService_update_feature_pargs() throw() {}

  const std::string* camera_name;
  const std::string* content;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_update_feature_result__isset {
  _AgentServerService_update_feature_result__isset() : success(false) {}
  bool success;
} _AgentServerService_update_feature_result__isset;

class AgentServerService_update_feature_result {
 public:

  AgentServerService_update_feature_result() : success(0) {
  }

  virtual ~AgentServerService_update_feature_result() throw() {}

  int32_t success;

  _AgentServerService_update_feature_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AgentServerService_update_feature_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_update_feature_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_update_feature_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_update_feature_presult__isset {
  _AgentServerService_update_feature_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_update_feature_presult__isset;

class AgentServerService_update_feature_presult {
 public:


  virtual ~AgentServerService_update_feature_presult() throw() {}

  int32_t* success;

  _AgentServerService_update_feature_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_ping_server_args__isset {
  _AgentServerService_ping_server_args__isset() : seq(false) {}
  bool seq;
} _AgentServerService_ping_server_args__isset;

class AgentServerService_ping_server_args {
 public:

  AgentServerService_ping_server_args() : seq(0) {
  }

  virtual ~AgentServerService_ping_server_args() throw() {}

  int64_t seq;

  _AgentServerService_ping_server_args__isset __isset;

  void __set_seq(const int64_t val) {
    seq = val;
  }

  bool operator == (const AgentServerService_ping_server_args & rhs) const
  {
    if (!(seq == rhs.seq))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_ping_server_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_ping_server_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_ping_server_pargs {
 public:


  virtual ~AgentServerService_ping_server_pargs() throw() {}

  const int64_t* seq;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_ping_server_result__isset {
  _AgentServerService_ping_server_result__isset() : success(false) {}
  bool success;
} _AgentServerService_ping_server_result__isset;

class AgentServerService_ping_server_result {
 public:

  AgentServerService_ping_server_result() : success(0) {
  }

  virtual ~AgentServerService_ping_server_result() throw() {}

  int64_t success;

  _AgentServerService_ping_server_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const AgentServerService_ping_server_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_ping_server_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_ping_server_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_ping_server_presult__isset {
  _AgentServerService_ping_server_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_ping_server_presult__isset;

class AgentServerService_ping_server_presult {
 public:


  virtual ~AgentServerService_ping_server_presult() throw() {}

  int64_t* success;

  _AgentServerService_ping_server_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AgentServerServiceClient : virtual public AgentServerServiceIf {
 public:
  AgentServerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  AgentServerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void find_cameras(std::vector<std::string> & _return);
  void send_find_cameras();
  void recv_find_cameras(std::vector<std::string> & _return);
  int32_t add_cameras(const std::vector<std::string> & l);
  void send_add_cameras(const std::vector<std::string> & l);
  int32_t recv_add_cameras();
  void get_hold_cameras(std::vector<std::string> & _return);
  void send_get_hold_cameras();
  void recv_get_hold_cameras(std::vector<std::string> & _return);
  int32_t del_cameras(const std::vector<std::string> & l);
  void send_del_cameras(const std::vector<std::string> & l);
  int32_t recv_del_cameras();
  int32_t open(const std::string& camera_name);
  void send_open(const std::string& camera_name);
  int32_t recv_open();
  int32_t close(const std::string& camera_name);
  void send_close(const std::string& camera_name);
  int32_t recv_close();
  int32_t start(const std::string& camera_name, const int32_t display_frame_rate);
  void send_start(const std::string& camera_name, const int32_t display_frame_rate);
  int32_t recv_start();
  int32_t stop(const std::string& camera_name);
  void send_stop(const std::string& camera_name);
  int32_t recv_stop();
  int32_t set_exposure_time(const std::string& camera_name, const double microseconds);
  void send_set_exposure_time(const std::string& camera_name, const double microseconds);
  int32_t recv_set_exposure_time();
  int32_t set_gain_by_sensor_all(const std::string& camera_name, const double gain);
  void send_set_gain_by_sensor_all(const std::string& camera_name, const double gain);
  int32_t recv_set_gain_by_sensor_all();
  int32_t set_gain_by_sensor_analog(const std::string& camera_name, const double gain);
  void send_set_gain_by_sensor_analog(const std::string& camera_name, const double gain);
  int32_t recv_set_gain_by_sensor_analog();
  int32_t set_gain_by_sensor_digital(const std::string& camera_name, const double gain);
  void send_set_gain_by_sensor_digital(const std::string& camera_name, const double gain);
  int32_t recv_set_gain_by_sensor_digital();
  int32_t set_frame_rate(const std::string& camera_name, const double rate);
  void send_set_frame_rate(const std::string& camera_name, const double rate);
  int32_t recv_set_frame_rate();
  int32_t enable_turbo_transfer(const std::string& camera_name, const int32_t enabled);
  void send_enable_turbo_transfer(const std::string& camera_name, const int32_t enabled);
  int32_t recv_enable_turbo_transfer();
  int32_t set_pixel_fmt(const std::string& camera_name, const std::string& pixel_fmt);
  void send_set_pixel_fmt(const std::string& camera_name, const std::string& pixel_fmt);
  int32_t recv_set_pixel_fmt();
  int32_t set_offset_x(const std::string& camera_name, const int32_t offset_x);
  void send_set_offset_x(const std::string& camera_name, const int32_t offset_x);
  int32_t recv_set_offset_x();
  int32_t set_offset_y(const std::string& camera_name, const int32_t offset_y);
  void send_set_offset_y(const std::string& camera_name, const int32_t offset_y);
  int32_t recv_set_offset_y();
  int32_t set_image_width(const std::string& camera_name, const int32_t width);
  void send_set_image_width(const std::string& camera_name, const int32_t width);
  int32_t recv_set_image_width();
  int32_t set_image_height(const std::string& camera_name, const int32_t height);
  void send_set_image_height(const std::string& camera_name, const int32_t height);
  int32_t recv_set_image_height();
  double get_exposure_time(const std::string& camera_name);
  void send_get_exposure_time(const std::string& camera_name);
  double recv_get_exposure_time();
  double get_gain_by_sensor_all(const std::string& camera_name);
  void send_get_gain_by_sensor_all(const std::string& camera_name);
  double recv_get_gain_by_sensor_all();
  double get_gain_by_sensor_analog(const std::string& camera_name);
  void send_get_gain_by_sensor_analog(const std::string& camera_name);
  double recv_get_gain_by_sensor_analog();
  double get_gain_by_sensor_digital(const std::string& camera_name);
  void send_get_gain_by_sensor_digital(const std::string& camera_name);
  double recv_get_gain_by_sensor_digital();
  double get_frame_rate(const std::string& camera_name);
  void send_get_frame_rate(const std::string& camera_name);
  double recv_get_frame_rate();
  void get_exposure_time_range(MinMaxStruct& _return, const std::string& camera_name);
  void send_get_exposure_time_range(const std::string& camera_name);
  void recv_get_exposure_time_range(MinMaxStruct& _return);
  void get_gain_range_by_sensor_all(MinMaxStruct& _return, const std::string& camera_name);
  void send_get_gain_range_by_sensor_all(const std::string& camera_name);
  void recv_get_gain_range_by_sensor_all(MinMaxStruct& _return);
  void get_gain_range_by_sensor_analog(MinMaxStruct& _return, const std::string& camera_name);
  void send_get_gain_range_by_sensor_analog(const std::string& camera_name);
  void recv_get_gain_range_by_sensor_analog(MinMaxStruct& _return);
  void get_gain_range_by_sensor_digital(MinMaxStruct& _return, const std::string& camera_name);
  void send_get_gain_range_by_sensor_digital(const std::string& camera_name);
  void recv_get_gain_range_by_sensor_digital(MinMaxStruct& _return);
  void get_frame_rate_range(MinMaxStruct& _return, const std::string& camera_name);
  void send_get_frame_rate_range(const std::string& camera_name);
  void recv_get_frame_rate_range(MinMaxStruct& _return);
  int32_t get_image_width(const std::string& camera_name);
  void send_get_image_width(const std::string& camera_name);
  int32_t recv_get_image_width();
  int32_t get_image_height(const std::string& camera_name);
  void send_get_image_height(const std::string& camera_name);
  int32_t recv_get_image_height();
  int32_t get_height_max(const std::string& camera_name);
  void send_get_height_max(const std::string& camera_name);
  int32_t recv_get_height_max();
  int32_t get_width_max(const std::string& camera_name);
  void send_get_width_max(const std::string& camera_name);
  int32_t recv_get_width_max();
  int32_t get_offset_x(const std::string& camera_name);
  void send_get_offset_x(const std::string& camera_name);
  int32_t recv_get_offset_x();
  int32_t get_offset_y(const std::string& camera_name);
  void send_get_offset_y(const std::string& camera_name);
  int32_t recv_get_offset_y();
  int32_t is_enabled_turbo_transfer(const std::string& camera_name);
  void send_is_enabled_turbo_transfer(const std::string& camera_name);
  int32_t recv_is_enabled_turbo_transfer();
  void get_pixel_fmt(std::string& _return, const std::string& camera_name);
  void send_get_pixel_fmt(const std::string& camera_name);
  void recv_get_pixel_fmt(std::string& _return);
  void get_user_defined_name(std::string& _return, const std::string& camera_name);
  void send_get_user_defined_name(const std::string& camera_name);
  void recv_get_user_defined_name(std::string& _return);
  void get_device_serial_number(std::string& _return, const std::string& camera_name);
  void send_get_device_serial_number(const std::string& camera_name);
  void recv_get_device_serial_number(std::string& _return);
  void get_current_ip_address(std::string& _return, const std::string& camera_name);
  void send_get_current_ip_address(const std::string& camera_name);
  void recv_get_current_ip_address(std::string& _return);
  double get_grab_fps(const std::string& camera_name);
  void send_get_grab_fps(const std::string& camera_name);
  double recv_get_grab_fps();
  double get_process_fps(const std::string& camera_name);
  void send_get_process_fps(const std::string& camera_name);
  double recv_get_process_fps();
  void save_feature(std::string& _return, const std::string& camera_name);
  void send_save_feature(const std::string& camera_name);
  void recv_save_feature(std::string& _return);
  int32_t update_feature(const std::string& camera_name, const std::string& content);
  void send_update_feature(const std::string& camera_name, const std::string& content);
  int32_t recv_update_feature();
  int64_t ping_server(const int64_t seq);
  void send_ping_server(const int64_t seq);
  int64_t recv_ping_server();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AgentServerServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<AgentServerServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AgentServerServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_find_cameras(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add_cameras(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_hold_cameras(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_del_cameras(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_open(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_close(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_start(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_exposure_time(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_gain_by_sensor_all(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_gain_by_sensor_analog(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_gain_by_sensor_digital(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_frame_rate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_enable_turbo_transfer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_pixel_fmt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_offset_x(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_offset_y(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_image_width(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_image_height(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_exposure_time(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_gain_by_sensor_all(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_gain_by_sensor_analog(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_gain_by_sensor_digital(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_frame_rate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_exposure_time_range(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_gain_range_by_sensor_all(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_gain_range_by_sensor_analog(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_gain_range_by_sensor_digital(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_frame_rate_range(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_image_width(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_image_height(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_height_max(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_width_max(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_offset_x(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_offset_y(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_is_enabled_turbo_transfer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_pixel_fmt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_user_defined_name(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_device_serial_number(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_current_ip_address(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_grab_fps(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_process_fps(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_save_feature(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update_feature(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ping_server(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AgentServerServiceProcessor(boost::shared_ptr<AgentServerServiceIf> iface) :
    iface_(iface) {
    processMap_["find_cameras"] = &AgentServerServiceProcessor::process_find_cameras;
    processMap_["add_cameras"] = &AgentServerServiceProcessor::process_add_cameras;
    processMap_["get_hold_cameras"] = &AgentServerServiceProcessor::process_get_hold_cameras;
    processMap_["del_cameras"] = &AgentServerServiceProcessor::process_del_cameras;
    processMap_["open"] = &AgentServerServiceProcessor::process_open;
    processMap_["close"] = &AgentServerServiceProcessor::process_close;
    processMap_["start"] = &AgentServerServiceProcessor::process_start;
    processMap_["stop"] = &AgentServerServiceProcessor::process_stop;
    processMap_["set_exposure_time"] = &AgentServerServiceProcessor::process_set_exposure_time;
    processMap_["set_gain_by_sensor_all"] = &AgentServerServiceProcessor::process_set_gain_by_sensor_all;
    processMap_["set_gain_by_sensor_analog"] = &AgentServerServiceProcessor::process_set_gain_by_sensor_analog;
    processMap_["set_gain_by_sensor_digital"] = &AgentServerServiceProcessor::process_set_gain_by_sensor_digital;
    processMap_["set_frame_rate"] = &AgentServerServiceProcessor::process_set_frame_rate;
    processMap_["enable_turbo_transfer"] = &AgentServerServiceProcessor::process_enable_turbo_transfer;
    processMap_["set_pixel_fmt"] = &AgentServerServiceProcessor::process_set_pixel_fmt;
    processMap_["set_offset_x"] = &AgentServerServiceProcessor::process_set_offset_x;
    processMap_["set_offset_y"] = &AgentServerServiceProcessor::process_set_offset_y;
    processMap_["set_image_width"] = &AgentServerServiceProcessor::process_set_image_width;
    processMap_["set_image_height"] = &AgentServerServiceProcessor::process_set_image_height;
    processMap_["get_exposure_time"] = &AgentServerServiceProcessor::process_get_exposure_time;
    processMap_["get_gain_by_sensor_all"] = &AgentServerServiceProcessor::process_get_gain_by_sensor_all;
    processMap_["get_gain_by_sensor_analog"] = &AgentServerServiceProcessor::process_get_gain_by_sensor_analog;
    processMap_["get_gain_by_sensor_digital"] = &AgentServerServiceProcessor::process_get_gain_by_sensor_digital;
    processMap_["get_frame_rate"] = &AgentServerServiceProcessor::process_get_frame_rate;
    processMap_["get_exposure_time_range"] = &AgentServerServiceProcessor::process_get_exposure_time_range;
    processMap_["get_gain_range_by_sensor_all"] = &AgentServerServiceProcessor::process_get_gain_range_by_sensor_all;
    processMap_["get_gain_range_by_sensor_analog"] = &AgentServerServiceProcessor::process_get_gain_range_by_sensor_analog;
    processMap_["get_gain_range_by_sensor_digital"] = &AgentServerServiceProcessor::process_get_gain_range_by_sensor_digital;
    processMap_["get_frame_rate_range"] = &AgentServerServiceProcessor::process_get_frame_rate_range;
    processMap_["get_image_width"] = &AgentServerServiceProcessor::process_get_image_width;
    processMap_["get_image_height"] = &AgentServerServiceProcessor::process_get_image_height;
    processMap_["get_height_max"] = &AgentServerServiceProcessor::process_get_height_max;
    processMap_["get_width_max"] = &AgentServerServiceProcessor::process_get_width_max;
    processMap_["get_offset_x"] = &AgentServerServiceProcessor::process_get_offset_x;
    processMap_["get_offset_y"] = &AgentServerServiceProcessor::process_get_offset_y;
    processMap_["is_enabled_turbo_transfer"] = &AgentServerServiceProcessor::process_is_enabled_turbo_transfer;
    processMap_["get_pixel_fmt"] = &AgentServerServiceProcessor::process_get_pixel_fmt;
    processMap_["get_user_defined_name"] = &AgentServerServiceProcessor::process_get_user_defined_name;
    processMap_["get_device_serial_number"] = &AgentServerServiceProcessor::process_get_device_serial_number;
    processMap_["get_current_ip_address"] = &AgentServerServiceProcessor::process_get_current_ip_address;
    processMap_["get_grab_fps"] = &AgentServerServiceProcessor::process_get_grab_fps;
    processMap_["get_process_fps"] = &AgentServerServiceProcessor::process_get_process_fps;
    processMap_["save_feature"] = &AgentServerServiceProcessor::process_save_feature;
    processMap_["update_feature"] = &AgentServerServiceProcessor::process_update_feature;
    processMap_["ping_server"] = &AgentServerServiceProcessor::process_ping_server;
  }

  virtual ~AgentServerServiceProcessor() {}
};

class AgentServerServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AgentServerServiceProcessorFactory(const ::boost::shared_ptr< AgentServerServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< AgentServerServiceIfFactory > handlerFactory_;
};

class AgentServerServiceMultiface : virtual public AgentServerServiceIf {
 public:
  AgentServerServiceMultiface(std::vector<boost::shared_ptr<AgentServerServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AgentServerServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AgentServerServiceIf> > ifaces_;
  AgentServerServiceMultiface() {}
  void add(boost::shared_ptr<AgentServerServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void find_cameras(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->find_cameras(_return);
    }
    ifaces_[i]->find_cameras(_return);
    return;
  }

  int32_t add_cameras(const std::vector<std::string> & l) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_cameras(l);
    }
    return ifaces_[i]->add_cameras(l);
  }

  void get_hold_cameras(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_hold_cameras(_return);
    }
    ifaces_[i]->get_hold_cameras(_return);
    return;
  }

  int32_t del_cameras(const std::vector<std::string> & l) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->del_cameras(l);
    }
    return ifaces_[i]->del_cameras(l);
  }

  int32_t open(const std::string& camera_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->open(camera_name);
    }
    return ifaces_[i]->open(camera_name);
  }

  int32_t close(const std::string& camera_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->close(camera_name);
    }
    return ifaces_[i]->close(camera_name);
  }

  int32_t start(const std::string& camera_name, const int32_t display_frame_rate) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->start(camera_name, display_frame_rate);
    }
    return ifaces_[i]->start(camera_name, display_frame_rate);
  }

  int32_t stop(const std::string& camera_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stop(camera_name);
    }
    return ifaces_[i]->stop(camera_name);
  }

  int32_t set_exposure_time(const std::string& camera_name, const double microseconds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_exposure_time(camera_name, microseconds);
    }
    return ifaces_[i]->set_exposure_time(camera_name, microseconds);
  }

  int32_t set_gain_by_sensor_all(const std::string& camera_name, const double gain) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_gain_by_sensor_all(camera_name, gain);
    }
    return ifaces_[i]->set_gain_by_sensor_all(camera_name, gain);
  }

  int32_t set_gain_by_sensor_analog(const std::string& camera_name, const double gain) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_gain_by_sensor_analog(camera_name, gain);
    }
    return ifaces_[i]->set_gain_by_sensor_analog(camera_name, gain);
  }

  int32_t set_gain_by_sensor_digital(const std::string& camera_name, const double gain) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_gain_by_sensor_digital(camera_name, gain);
    }
    return ifaces_[i]->set_gain_by_sensor_digital(camera_name, gain);
  }

  int32_t set_frame_rate(const std::string& camera_name, const double rate) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_frame_rate(camera_name, rate);
    }
    return ifaces_[i]->set_frame_rate(camera_name, rate);
  }

  int32_t enable_turbo_transfer(const std::string& camera_name, const int32_t enabled) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->enable_turbo_transfer(camera_name, enabled);
    }
    return ifaces_[i]->enable_turbo_transfer(camera_name, enabled);
  }

  int32_t set_pixel_fmt(const std::string& camera_name, const std::string& pixel_fmt) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_pixel_fmt(camera_name, pixel_fmt);
    }
    return ifaces_[i]->set_pixel_fmt(camera_name, pixel_fmt);
  }

  int32_t set_offset_x(const std::string& camera_name, const int32_t offset_x) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_offset_x(camera_name, offset_x);
    }
    return ifaces_[i]->set_offset_x(camera_name, offset_x);
  }

  int32_t set_offset_y(const std::string& camera_name, const int32_t offset_y) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_offset_y(camera_name, offset_y);
    }
    return ifaces_[i]->set_offset_y(camera_name, offset_y);
  }

  int32_t set_image_width(const std::string& camera_name, const int32_t width) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_image_width(camera_name, width);
    }
    return ifaces_[i]->set_image_width(camera_name, width);
  }

  int32_t set_image_height(const std::string& camera_name, const int32_t height) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_image_height(camera_name, height);
    }
    return ifaces_[i]->set_image_height(camera_name, height);
  }

  double get_exposure_time(const std::string& camera_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_exposure_time(camera_name);
    }
    return ifaces_[i]->get_exposure_time(camera_name);
  }

  double get_gain_by_sensor_all(const std::string& camera_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_gain_by_sensor_all(camera_name);
    }
    return ifaces_[i]->get_gain_by_sensor_all(camera_name);
  }

  double get_gain_by_sensor_analog(const std::string& camera_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_gain_by_sensor_analog(camera_name);
    }
    return ifaces_[i]->get_gain_by_sensor_analog(camera_name);
  }

  double get_gain_by_sensor_digital(const std::string& camera_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_gain_by_sensor_digital(camera_name);
    }
    return ifaces_[i]->get_gain_by_sensor_digital(camera_name);
  }

  double get_frame_rate(const std::string& camera_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_frame_rate(camera_name);
    }
    return ifaces_[i]->get_frame_rate(camera_name);
  }

  void get_exposure_time_range(MinMaxStruct& _return, const std::string& camera_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_exposure_time_range(_return, camera_name);
    }
    ifaces_[i]->get_exposure_time_range(_return, camera_name);
    return;
  }

  void get_gain_range_by_sensor_all(MinMaxStruct& _return, const std::string& camera_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_gain_range_by_sensor_all(_return, camera_name);
    }
    ifaces_[i]->get_gain_range_by_sensor_all(_return, camera_name);
    return;
  }

  void get_gain_range_by_sensor_analog(MinMaxStruct& _return, const std::string& camera_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_gain_range_by_sensor_analog(_return, camera_name);
    }
    ifaces_[i]->get_gain_range_by_sensor_analog(_return, camera_name);
    return;
  }

  void get_gain_range_by_sensor_digital(MinMaxStruct& _return, const std::string& camera_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_gain_range_by_sensor_digital(_return, camera_name);
    }
    ifaces_[i]->get_gain_range_by_sensor_digital(_return, camera_name);
    return;
  }

  void get_frame_rate_range(MinMaxStruct& _return, const std::string& camera_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_frame_rate_range(_return, camera_name);
    }
    ifaces_[i]->get_frame_rate_range(_return, camera_name);
    return;
  }

  int32_t get_image_width(const std::string& camera_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_image_width(camera_name);
    }
    return ifaces_[i]->get_image_width(camera_name);
  }

  int32_t get_image_height(const std::string& camera_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_image_height(camera_name);
    }
    return ifaces_[i]->get_image_height(camera_name);
  }

  int32_t get_height_max(const std::string& camera_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_height_max(camera_name);
    }
    return ifaces_[i]->get_height_max(camera_name);
  }

  int32_t get_width_max(const std::string& camera_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_width_max(camera_name);
    }
    return ifaces_[i]->get_width_max(camera_name);
  }

  int32_t get_offset_x(const std::string& camera_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_offset_x(camera_name);
    }
    return ifaces_[i]->get_offset_x(camera_name);
  }

  int32_t get_offset_y(const std::string& camera_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_offset_y(camera_name);
    }
    return ifaces_[i]->get_offset_y(camera_name);
  }

  int32_t is_enabled_turbo_transfer(const std::string& camera_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->is_enabled_turbo_transfer(camera_name);
    }
    return ifaces_[i]->is_enabled_turbo_transfer(camera_name);
  }

  void get_pixel_fmt(std::string& _return, const std::string& camera_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_pixel_fmt(_return, camera_name);
    }
    ifaces_[i]->get_pixel_fmt(_return, camera_name);
    return;
  }

  void get_user_defined_name(std::string& _return, const std::string& camera_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_user_defined_name(_return, camera_name);
    }
    ifaces_[i]->get_user_defined_name(_return, camera_name);
    return;
  }

  void get_device_serial_number(std::string& _return, const std::string& camera_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_device_serial_number(_return, camera_name);
    }
    ifaces_[i]->get_device_serial_number(_return, camera_name);
    return;
  }

  void get_current_ip_address(std::string& _return, const std::string& camera_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_current_ip_address(_return, camera_name);
    }
    ifaces_[i]->get_current_ip_address(_return, camera_name);
    return;
  }

  double get_grab_fps(const std::string& camera_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_grab_fps(camera_name);
    }
    return ifaces_[i]->get_grab_fps(camera_name);
  }

  double get_process_fps(const std::string& camera_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_process_fps(camera_name);
    }
    return ifaces_[i]->get_process_fps(camera_name);
  }

  void save_feature(std::string& _return, const std::string& camera_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->save_feature(_return, camera_name);
    }
    ifaces_[i]->save_feature(_return, camera_name);
    return;
  }

  int32_t update_feature(const std::string& camera_name, const std::string& content) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update_feature(camera_name, content);
    }
    return ifaces_[i]->update_feature(camera_name, content);
  }

  int64_t ping_server(const int64_t seq) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping_server(seq);
    }
    return ifaces_[i]->ping_server(seq);
  }

};

} // namespace

#endif
