// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "AgentServerService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

#include "Camera.h"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using boost::shared_ptr;
using namespace  ::hawkeye;


#define CHECK_CAMERA(camera_name)			\
	do{										\
		if (camera_name.length() == 0) {	\
		  return -1;						\
		}									\
		if (m_hold_camera_names.find(camera_name) == m_hold_camera_names.end()) {\
		 return -2;							\
		}									\
	}while(0)

#define CHECK_CAMERA_VOID(camera_name)			\
	do{										\
		if (camera_name.length() == 0) {	\
		  return;						\
		}									\
		if (m_hold_camera_names.find(camera_name) == m_hold_camera_names.end()) {\
		 return;							\
		}									\
	}while(0)


typedef struct _CustomData {

}CustomData;

int SinkBayerDatasCallbackImpl(unsigned char* buffer, int buffer_len, void* ctx) {

	return 0;
}


class AgentServerServiceHandler : virtual public AgentServerServiceIf {
public:
	std::map<std::string, std::pair<std::string, int>>		m_total_cameras;

	std::set<std::string>								   m_hold_camera_names;
	std::map<std::string, std::shared_ptr<CCamera>>			m_hold_cameras;

  AgentServerServiceHandler() {
    // Your initialization goes here
  }

  void find_cameras(std::vector<std::string> & _return) {
    // Your implementation goes here
    printf("find_cameras\n");
		CCamera::FindCamera(m_total_cameras);

		for (auto& a : m_total_cameras) {
			_return.push_back(a.first);
		}
  }

  int32_t add_cameras(const std::vector<std::string> & l) {
		// Your implementation goes here
		printf("add_cameras\n");
		int count = 0;
		for (int i = 0; i < l.size(); ++i) {
			for (auto& it = m_total_cameras.begin(); it != m_total_cameras.end(); ++it) {
				if (strcmp(l[i].c_str(),it->first.c_str()) == 0) {
					++count;
					m_hold_camera_names.insert(it->first);
				}
			}
		}
		return count;
  }
  
   void get_hold_cameras(std::vector<std::string> & _return) {
    // Your implementation goes here
    printf("get_hold_cameras\n");
	_return.clear();
	for (auto& a : m_hold_camera_names) {
		_return.push_back(a);
	}
  }

  int32_t del_cameras(const std::vector<std::string> & l) {
    // Your implementation goes here
    printf("del_cameras\n");
		int count = 0;
		for (int i = 0; i < l.size(); ++i) {
			std::set<std::string>::iterator it = m_hold_camera_names.find(l[i]);
			if (it != m_hold_camera_names.end()) {
				m_hold_camera_names.erase(it);
				++count;
			}
		}
		return count;
  }

  int32_t open(const std::string& camera_name) {
    // Your implementation goes here
    printf("open\n");
		CHECK_CAMERA(camera_name);
		auto& a = m_total_cameras[camera_name];
		auto& b = std::make_shared<CCamera>(a.first.c_str(), a.second);
		m_hold_cameras.insert(std::make_pair(camera_name.c_str(), b) );
		if (b->CreateDevice())
			return 1;
		return 0;
  }

  int32_t close(const std::string& camera_name) {
    // Your implementation goes here
    printf("close\n");
		CHECK_CAMERA(camera_name);
		auto& a = m_hold_cameras[camera_name];
		a->DestroyDevice();
		m_hold_cameras.erase(camera_name);
		return 1;
  }

  int32_t start(const std::string& camera_name) {
    // Your implementation goes here
		printf("start\n");
		CHECK_CAMERA(camera_name);
		auto& a = m_hold_cameras[camera_name];
		if (a->CreateOtherObjects() ) {
			a->Start();
			return 1;
		}
		return 0;
  }

  int32_t stop(const std::string& camera_name) {
    // Your implementation goes here
    printf("stop\n");
	CHECK_CAMERA(camera_name);

	auto& a = m_hold_cameras[camera_name];
	a->Stop();
	a->DestroyOtherObjects();
	return 1;
  }

  int32_t set_exposure_time(const std::string& camera_name, const double microseconds) {
    // Your implementation goes here
    printf("set_exposure_time\n");
	CHECK_CAMERA(camera_name);

	auto& a = m_hold_cameras[camera_name];
	return a->SetExposureTime(microseconds);
  }

  int32_t set_gain_by_sensor_all(const std::string& camera_name, const double gain) {
    // Your implementation goes here
    printf("set_gain_by_sensor_all\n");
	CHECK_CAMERA(camera_name);

	auto& a = m_hold_cameras[camera_name];
	return a->SetGainBySensorAll(gain);
  }

  int32_t set_gain_by_sensor_analog(const std::string& camera_name, const double gain) {
    // Your implementation goes here
    printf("set_gain_by_sensor_analog\n");
	CHECK_CAMERA(camera_name);

	auto& a = m_hold_cameras[camera_name];
	return a->SetGainBySensorAnalog(gain);
  }

  int32_t set_gain_by_sensor_digital(const std::string& camera_name, const double gain) {
    // Your implementation goes here
    printf("set_gain_by_sensor_digital\n");
	CHECK_CAMERA(camera_name);

	auto& a = m_hold_cameras[camera_name];
	return a->SetGainBySensorDigital(gain);
  }

  int32_t set_frame_rate(const std::string& camera_name, const double rate) {
    // Your implementation goes here
    printf("set_frame_rate\n");
	CHECK_CAMERA(camera_name);

	auto& a = m_hold_cameras[camera_name];
	return a->SetFrameRate(rate);
  }

  int32_t enable_turbo_transfer(const std::string& camera_name, const int32_t enabled) {
    // Your implementation goes here
    printf("enable_turbo_transfer\n");
	CHECK_CAMERA(camera_name);

	auto& a = m_hold_cameras[camera_name];
	return a->EnableTurboTransfer(enabled);
  }

  int32_t set_pixel_fmt(const std::string& camera_name, const std::string& pixel_fmt) {
    // Your implementation goes here
    printf("set_pixel_fmt\n");
	CHECK_CAMERA(camera_name);

	auto& a = m_hold_cameras[camera_name];
	return a->SetPixelFormat(pixel_fmt.c_str(), pixel_fmt.length());
  }

  int32_t set_offset_x(const std::string& camera_name, const int32_t offset_x) {
    // Your implementation goes here
    printf("set_offset_x\n");
	CHECK_CAMERA(camera_name);

	auto& a = m_hold_cameras[camera_name];
	return a->SetOffsetX(offset_x);
  }

  int32_t set_offset_y(const std::string& camera_name, const int32_t offset_y) {
    // Your implementation goes here
    printf("set_offset_y\n");
	CHECK_CAMERA(camera_name);

	auto& a = m_hold_cameras[camera_name];
	return a->SetOffsetY(offset_y);
  }

  int32_t set_image_width(const std::string& camera_name, const int32_t width) {
    // Your implementation goes here
    printf("set_image_width\n");
	CHECK_CAMERA(camera_name);

	auto& a = m_hold_cameras[camera_name];
	return a->SetImageWidth(width);
  }

  int32_t set_image_height(const std::string& camera_name, const int32_t height) {
    // Your implementation goes here
    printf("set_image_height\n");
	CHECK_CAMERA(camera_name);

	auto& a = m_hold_cameras[camera_name];
	return a->SetImageHeight(height);
  }

  double get_exposure_time(const std::string& camera_name) {
    // Your implementation goes here
    printf("get_exposure_time\n");
	CHECK_CAMERA(camera_name);

	auto& a = m_hold_cameras[camera_name];
	return a->GetExposureTime();
  }

  double get_gain_by_sensor_all(const std::string& camera_name) {
    // Your implementation goes here
    printf("get_gain_by_sensor_all\n");
	CHECK_CAMERA(camera_name);

	auto& a = m_hold_cameras[camera_name];
	return a->GetGainBySensorAll();
  }

  double get_gain_by_sensor_analog(const std::string& camera_name) {
    // Your implementation goes here
    printf("get_gain_by_sensor_analog\n");
	CHECK_CAMERA(camera_name);

	auto& a = m_hold_cameras[camera_name];
	return a->GetGainBySensorAnalog();
  }

  double get_gain_by_sensor_digital(const std::string& camera_name) {
    // Your implementation goes here
    printf("get_gain_by_sensor_digital\n");
	CHECK_CAMERA(camera_name);

	auto& a = m_hold_cameras[camera_name];
	return a->GetGainBySensorDigital();
  }

  double get_frame_rate(const std::string& camera_name) {
    // Your implementation goes here
    printf("get_frame_rate\n");
	CHECK_CAMERA(camera_name);

	auto& a = m_hold_cameras[camera_name];
	return a->GetFrameRate();
  }

  void get_exposure_time_range(MinMaxStruct& _return, const std::string& camera_name) {
    // Your implementation goes here
    printf("get_exposure_time_range\n");
	CHECK_CAMERA_VOID(camera_name);

	auto& a = m_hold_cameras[camera_name];
	a->GetExposureTimeRange(&_return.min, &_return.max);//FIXME: should check the value of return!
  }

  void get_gain_range_by_sensor_all(MinMaxStruct& _return, const std::string& camera_name) {
    // Your implementation goes here
    printf("get_gain_range_by_sensor_all\n");
	CHECK_CAMERA_VOID(camera_name);

	auto& a = m_hold_cameras[camera_name];
	a->GetGainBySensorAllRange(&_return.min, &_return.max);//FIXME: should check the value of return!
  }

  void get_gain_range_by_sensor_analog(MinMaxStruct& _return, const std::string& camera_name) {
    // Your implementation goes here
    printf("get_gain_range_by_sensor_analog\n");
	CHECK_CAMERA_VOID(camera_name);

	auto& a = m_hold_cameras[camera_name];
	a->GetGainBySensorAnalogRange(&_return.min, &_return.max);//FIXME: should check the value of return!
  }

  void get_gain_range_by_sensor_digital(MinMaxStruct& _return, const std::string& camera_name) {
    // Your implementation goes here
    printf("get_gain_range_by_sensor_digital\n");
	CHECK_CAMERA_VOID(camera_name);

	auto& a = m_hold_cameras[camera_name];
	a->GetGainBySensorDigitalRange(&_return.min, &_return.max);//FIXME: should check the value of return!
  }

  void get_frame_rate_range(MinMaxStruct& _return, const std::string& camera_name) {
    // Your implementation goes here
    printf("get_frame_rate_range\n");
	CHECK_CAMERA_VOID(camera_name);

	auto& a = m_hold_cameras[camera_name];
	a->GetFrameRateRange(&_return.min, &_return.max);//FIXME: should check the value of return!
  }

  int32_t get_image_width(const std::string& camera_name) {
	  // Your implementation goes here
	  printf("get_image_width\n");
	  CHECK_CAMERA(camera_name);

	  auto& a = m_hold_cameras[camera_name];
	  return a->GetImageWidth();
  }

  int32_t get_image_height(const std::string& camera_name) {
	  // Your implementation goes here
	  printf("get_image_height\n");
	  CHECK_CAMERA(camera_name);

	  auto& a = m_hold_cameras[camera_name];
	  return a->GetImageHeight();
  }


  int32_t get_height_max(const std::string& camera_name) {
    // Your implementation goes here
    printf("get_height_max\n");
	CHECK_CAMERA(camera_name);

	auto& a = m_hold_cameras[camera_name];
	return a->GetHeightMax();
  }

  int32_t get_width_max(const std::string& camera_name) {
    // Your implementation goes here
    printf("get_width_max\n");
	CHECK_CAMERA(camera_name);

	auto& a = m_hold_cameras[camera_name];
	return a->GetWidthMax();
  }

  int32_t get_offset_x(const std::string& camera_name) {
    // Your implementation goes here
    printf("get_offset_x\n");
	CHECK_CAMERA(camera_name);

	auto& a = m_hold_cameras[camera_name];
	return a->GetOffsetX();
  }

  int32_t get_offset_y(const std::string& camera_name) {
    // Your implementation goes here
    printf("get_offset_y\n");
	CHECK_CAMERA(camera_name);

	auto& a = m_hold_cameras[camera_name];
	return a->GetOffsetY();
  }

  int32_t is_enabled_turbo_transfer(const std::string& camera_name) {
    // Your implementation goes here
    printf("is_enabled_turbo_transfer\n");
	CHECK_CAMERA(camera_name);

	auto& a = m_hold_cameras[camera_name];
	return a->IsEnabledTurboTransfer();
  }

  void get_pixel_fmt(std::string& _return, const std::string& camera_name) {
    // Your implementation goes here
    printf("get_pixel_fmt\n");
	CHECK_CAMERA_VOID(camera_name);
	auto& a = m_hold_cameras[camera_name];
	char val[256] = { 0 };
	a->GetPixelFormat(val, sizeof val);
	_return.assign(val);
  }

  void get_user_defined_name(std::string& _return, const std::string& camera_name) {
    // Your implementation goes here
    printf("get_user_defined_name\n");
	CHECK_CAMERA_VOID(camera_name);
	auto& a = m_hold_cameras[camera_name];
	char val[256] = { 0 };
	a->GetUserDefinedName(val, sizeof val);
	_return.assign(val);
  }
  
    void get_device_serial_number(std::string& _return, const std::string& camera_name) {
    // Your implementation goes here
    printf("get_device_serial_number\n");
	CHECK_CAMERA_VOID(camera_name);
	auto& a = m_hold_cameras[camera_name];
	char val[256] = { 0 };
	a->GetDeviceSerialNumber(val, sizeof val);
	_return.assign(val);
  }

  void get_current_ip_address(std::string& _return, const std::string& camera_name) {
    // Your implementation goes here
    printf("get_current_ip_address\n");

	CHECK_CAMERA_VOID(camera_name);
	auto& a = m_hold_cameras[camera_name];
	char val[256] = { 0 };
	a->GetCurrentIPAddress(val, sizeof val);
	_return.assign(val);
  }

  double get_grab_fps(const std::string& camera_name) {
    // Your implementation goes here
    printf("get_grab_fps\n");
	CHECK_CAMERA(camera_name);

	auto& a = m_hold_cameras[camera_name];
	return a->GetGrabFPS();
  }

  double get_process_fps(const std::string& camera_name) {
    // Your implementation goes here
    printf("get_process_fps\n");
	CHECK_CAMERA(camera_name);

	auto& a = m_hold_cameras[camera_name];
	return a->GetProcessFPS();
  }

  void dump_raw_image(std::string& _return, const std::string& camera_name) {
    // Your implementation goes here
    printf("dump_raw_image\n");
  }

  void dump_rgb_image(std::string& _return, const std::string& camera_name) {
    // Your implementation goes here
    printf("dump_rgb_image\n");
  }

  void save_feature(std::string& _return, const std::string& camera_name) {
    // Your implementation goes here
    printf("save_feature\n");
  }

  int32_t update_feature(const std::string& camera_name, const std::string& content) {
    // Your implementation goes here
    printf("update_feature\n");
	return 0;
  }

};
