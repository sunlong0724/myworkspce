// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "AcquireStoreService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::hawkeye;

class AcquireStoreServiceHandler : virtual public AcquireStoreServiceIf {
 public:
  AcquireStoreServiceHandler() {
    // Your initialization goes here
  }

  int32_t init() {
    // Your implementation goes here
    printf("init\n");
  }

  int32_t uninit() {
    // Your implementation goes here
    printf("uninit\n");
  }

  int32_t start(const int32_t snd_frame_rate) {
    // Your implementation goes here
    printf("start\n");
  }

  int32_t stop() {
    // Your implementation goes here
    printf("stop\n");
  }

  int32_t set_snd_frame_rate(const int32_t snd_frame_rate) {
    // Your implementation goes here
    printf("set_snd_frame_rate\n");
  }

  int32_t set_snd_frame_resolution(const int32_t w, const int32_t h) {
    // Your implementation goes here
    printf("set_snd_frame_resolution\n");
  }

  int32_t set_store_file(const int32_t flag, const std::string& file_name) {
    // Your implementation goes here
    printf("set_store_file\n");
  }

  int32_t do_pause(const int32_t flag) {
    // Your implementation goes here
    printf("do_pause\n");
  }

  int32_t forward_play(const int64_t frame_seq, const int32_t snd_frame_rate) {
    // Your implementation goes here
    printf("forward_play\n");
  }

  int32_t backward_play(const int64_t frame_seq, const int32_t snd_frame_rate) {
    // Your implementation goes here
    printf("backward_play\n");
  }

  int32_t set_exposure_time(const double microseconds) {
    // Your implementation goes here
    printf("set_exposure_time\n");
  }

  int32_t set_gain_by_sensor_all(const double gain) {
    // Your implementation goes here
    printf("set_gain_by_sensor_all\n");
  }

  int32_t set_gain_by_sensor_analog(const double gain) {
    // Your implementation goes here
    printf("set_gain_by_sensor_analog\n");
  }

  int32_t set_gain_by_sensor_digital(const double gain) {
    // Your implementation goes here
    printf("set_gain_by_sensor_digital\n");
  }

  int32_t set_frame_rate(const double rate) {
    // Your implementation goes here
    printf("set_frame_rate\n");
  }

  int32_t enable_turbo_transfer(const int32_t enabled) {
    // Your implementation goes here
    printf("enable_turbo_transfer\n");
  }

  int32_t set_pixel_fmt(const std::string& pixel_fmt) {
    // Your implementation goes here
    printf("set_pixel_fmt\n");
  }

  int32_t set_offset_x(const int32_t offset_x) {
    // Your implementation goes here
    printf("set_offset_x\n");
  }

  int32_t set_offset_y(const int32_t offset_y) {
    // Your implementation goes here
    printf("set_offset_y\n");
  }

  int32_t set_image_width(const int32_t width) {
    // Your implementation goes here
    printf("set_image_width\n");
  }

  int32_t set_image_height(const int32_t height) {
    // Your implementation goes here
    printf("set_image_height\n");
  }

  double get_exposure_time() {
    // Your implementation goes here
    printf("get_exposure_time\n");
  }

  double get_gain_by_sensor_all() {
    // Your implementation goes here
    printf("get_gain_by_sensor_all\n");
  }

  double get_gain_by_sensor_analog() {
    // Your implementation goes here
    printf("get_gain_by_sensor_analog\n");
  }

  double get_gain_by_sensor_digital() {
    // Your implementation goes here
    printf("get_gain_by_sensor_digital\n");
  }

  double get_frame_rate() {
    // Your implementation goes here
    printf("get_frame_rate\n");
  }

  void get_exposure_time_range(MinMaxStruct& _return) {
    // Your implementation goes here
    printf("get_exposure_time_range\n");
  }

  void get_gain_range_by_sensor_all(MinMaxStruct& _return) {
    // Your implementation goes here
    printf("get_gain_range_by_sensor_all\n");
  }

  void get_gain_range_by_sensor_analog(MinMaxStruct& _return) {
    // Your implementation goes here
    printf("get_gain_range_by_sensor_analog\n");
  }

  void get_gain_range_by_sensor_digital(MinMaxStruct& _return) {
    // Your implementation goes here
    printf("get_gain_range_by_sensor_digital\n");
  }

  void get_frame_rate_range(MinMaxStruct& _return) {
    // Your implementation goes here
    printf("get_frame_rate_range\n");
  }

  int32_t get_image_width() {
    // Your implementation goes here
    printf("get_image_width\n");
  }

  int32_t get_image_height() {
    // Your implementation goes here
    printf("get_image_height\n");
  }

  int32_t get_height_max() {
    // Your implementation goes here
    printf("get_height_max\n");
  }

  int32_t get_width_max() {
    // Your implementation goes here
    printf("get_width_max\n");
  }

  int32_t get_offset_x() {
    // Your implementation goes here
    printf("get_offset_x\n");
  }

  int32_t get_offset_y() {
    // Your implementation goes here
    printf("get_offset_y\n");
  }

  int32_t is_enabled_turbo_transfer() {
    // Your implementation goes here
    printf("is_enabled_turbo_transfer\n");
  }

  void get_pixel_fmt(std::string& _return) {
    // Your implementation goes here
    printf("get_pixel_fmt\n");
  }

  void get_user_defined_name(std::string& _return) {
    // Your implementation goes here
    printf("get_user_defined_name\n");
  }

  void get_device_serial_number(std::string& _return) {
    // Your implementation goes here
    printf("get_device_serial_number\n");
  }

  void get_current_ip_address(std::string& _return) {
    // Your implementation goes here
    printf("get_current_ip_address\n");
  }

  double get_grab_fps() {
    // Your implementation goes here
    printf("get_grab_fps\n");
  }

  double get_process_fps() {
    // Your implementation goes here
    printf("get_process_fps\n");
  }

  void save_feature(std::string& _return) {
    // Your implementation goes here
    printf("save_feature\n");
  }

  int32_t update_feature(const std::string& content) {
    // Your implementation goes here
    printf("update_feature\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<AcquireStoreServiceHandler> handler(new AcquireStoreServiceHandler());
  shared_ptr<TProcessor> processor(new AcquireStoreServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

