/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef PlaybackCtrlService_H
#define PlaybackCtrlService_H

#include <thrift/TDispatchProcessor.h>
#include "PlaybackCtrlService_types.h"

namespace hawkeye {

class PlaybackCtrlServiceIf {
 public:
  virtual ~PlaybackCtrlServiceIf() {}
  virtual int32_t get_data_port() = 0;
  virtual int32_t set_play_frame_rate(const int32_t play_frame_rate, const int32_t sample_gap) = 0;
  virtual int32_t set_play_frame_resolution(const int32_t w, const int32_t h) = 0;
  virtual int32_t set_store_file(const int32_t flag) = 0;
  virtual int32_t start_grab() = 0;
  virtual int32_t stop_grab() = 0;
  virtual int32_t play_pause() = 0;
  virtual int32_t play_live(const int32_t play_frame_rate, const int32_t sample_gap) = 0;
  virtual int32_t play_forward(const int32_t play_frame_rate, const int32_t sample_gap) = 0;
  virtual int32_t play_backward(const int32_t play_frame_rate, const int32_t sample_gap) = 0;
  virtual int32_t play_from_a2b(const int64_t from, const int64_t to) = 0;
  virtual double get_camera_grab_fps() = 0;
  virtual double get_soft_grab_fps() = 0;
  virtual double get_soft_snd_fps() = 0;
  virtual double get_file_write_fps() = 0;
  virtual int32_t set_exposure_time(const double microseconds) = 0;
  virtual int32_t set_gain_by_sensor_all(const double gain) = 0;
  virtual int32_t set_gain_by_sensor_analog(const double gain) = 0;
  virtual int32_t set_gain_by_sensor_digital(const double gain) = 0;
  virtual int32_t set_frame_rate(const double rate) = 0;
  virtual int32_t enable_turbo_transfer(const int32_t enabled) = 0;
  virtual int32_t set_pixel_fmt(const std::string& pixel_fmt) = 0;
  virtual int32_t set_offset_x(const int32_t offset_x) = 0;
  virtual int32_t set_offset_y(const int32_t offset_y) = 0;
  virtual int32_t set_image_width(const int32_t width) = 0;
  virtual int32_t set_image_height(const int32_t height) = 0;
  virtual double get_exposure_time() = 0;
  virtual double get_gain_by_sensor_all() = 0;
  virtual double get_gain_by_sensor_analog() = 0;
  virtual double get_gain_by_sensor_digital() = 0;
  virtual double get_frame_rate() = 0;
  virtual void get_exposure_time_range(MinMaxStruct& _return) = 0;
  virtual void get_gain_range_by_sensor_all(MinMaxStruct& _return) = 0;
  virtual void get_gain_range_by_sensor_analog(MinMaxStruct& _return) = 0;
  virtual void get_gain_range_by_sensor_digital(MinMaxStruct& _return) = 0;
  virtual void get_frame_rate_range(MinMaxStruct& _return) = 0;
  virtual int32_t get_image_width() = 0;
  virtual int32_t get_image_height() = 0;
  virtual int32_t get_height_max() = 0;
  virtual int32_t get_width_max() = 0;
  virtual int32_t get_offset_x() = 0;
  virtual int32_t get_offset_y() = 0;
  virtual int32_t is_enabled_turbo_transfer() = 0;
  virtual void get_pixel_fmt(std::string& _return) = 0;
  virtual void get_user_defined_name(std::string& _return) = 0;
  virtual void get_device_serial_number(std::string& _return) = 0;
  virtual void get_current_ip_address(std::string& _return) = 0;
  virtual double get_grab_fps() = 0;
  virtual double get_process_fps() = 0;
  virtual void save_feature(std::string& _return) = 0;
  virtual int32_t update_feature(const std::string& content) = 0;
};

class PlaybackCtrlServiceIfFactory {
 public:
  typedef PlaybackCtrlServiceIf Handler;

  virtual ~PlaybackCtrlServiceIfFactory() {}

  virtual PlaybackCtrlServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(PlaybackCtrlServiceIf* /* handler */) = 0;
};

class PlaybackCtrlServiceIfSingletonFactory : virtual public PlaybackCtrlServiceIfFactory {
 public:
  PlaybackCtrlServiceIfSingletonFactory(const boost::shared_ptr<PlaybackCtrlServiceIf>& iface) : iface_(iface) {}
  virtual ~PlaybackCtrlServiceIfSingletonFactory() {}

  virtual PlaybackCtrlServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(PlaybackCtrlServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<PlaybackCtrlServiceIf> iface_;
};

class PlaybackCtrlServiceNull : virtual public PlaybackCtrlServiceIf {
 public:
  virtual ~PlaybackCtrlServiceNull() {}
  int32_t get_data_port() {
    int32_t _return = 0;
    return _return;
  }
  int32_t set_play_frame_rate(const int32_t /* play_frame_rate */, const int32_t /* sample_gap */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t set_play_frame_resolution(const int32_t /* w */, const int32_t /* h */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t set_store_file(const int32_t /* flag */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t start_grab() {
    int32_t _return = 0;
    return _return;
  }
  int32_t stop_grab() {
    int32_t _return = 0;
    return _return;
  }
  int32_t play_pause() {
    int32_t _return = 0;
    return _return;
  }
  int32_t play_live(const int32_t /* play_frame_rate */, const int32_t /* sample_gap */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t play_forward(const int32_t /* play_frame_rate */, const int32_t /* sample_gap */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t play_backward(const int32_t /* play_frame_rate */, const int32_t /* sample_gap */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t play_from_a2b(const int64_t /* from */, const int64_t /* to */) {
    int32_t _return = 0;
    return _return;
  }
  double get_camera_grab_fps() {
    double _return = (double)0;
    return _return;
  }
  double get_soft_grab_fps() {
    double _return = (double)0;
    return _return;
  }
  double get_soft_snd_fps() {
    double _return = (double)0;
    return _return;
  }
  double get_file_write_fps() {
    double _return = (double)0;
    return _return;
  }
  int32_t set_exposure_time(const double /* microseconds */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t set_gain_by_sensor_all(const double /* gain */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t set_gain_by_sensor_analog(const double /* gain */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t set_gain_by_sensor_digital(const double /* gain */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t set_frame_rate(const double /* rate */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t enable_turbo_transfer(const int32_t /* enabled */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t set_pixel_fmt(const std::string& /* pixel_fmt */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t set_offset_x(const int32_t /* offset_x */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t set_offset_y(const int32_t /* offset_y */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t set_image_width(const int32_t /* width */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t set_image_height(const int32_t /* height */) {
    int32_t _return = 0;
    return _return;
  }
  double get_exposure_time() {
    double _return = (double)0;
    return _return;
  }
  double get_gain_by_sensor_all() {
    double _return = (double)0;
    return _return;
  }
  double get_gain_by_sensor_analog() {
    double _return = (double)0;
    return _return;
  }
  double get_gain_by_sensor_digital() {
    double _return = (double)0;
    return _return;
  }
  double get_frame_rate() {
    double _return = (double)0;
    return _return;
  }
  void get_exposure_time_range(MinMaxStruct& /* _return */) {
    return;
  }
  void get_gain_range_by_sensor_all(MinMaxStruct& /* _return */) {
    return;
  }
  void get_gain_range_by_sensor_analog(MinMaxStruct& /* _return */) {
    return;
  }
  void get_gain_range_by_sensor_digital(MinMaxStruct& /* _return */) {
    return;
  }
  void get_frame_rate_range(MinMaxStruct& /* _return */) {
    return;
  }
  int32_t get_image_width() {
    int32_t _return = 0;
    return _return;
  }
  int32_t get_image_height() {
    int32_t _return = 0;
    return _return;
  }
  int32_t get_height_max() {
    int32_t _return = 0;
    return _return;
  }
  int32_t get_width_max() {
    int32_t _return = 0;
    return _return;
  }
  int32_t get_offset_x() {
    int32_t _return = 0;
    return _return;
  }
  int32_t get_offset_y() {
    int32_t _return = 0;
    return _return;
  }
  int32_t is_enabled_turbo_transfer() {
    int32_t _return = 0;
    return _return;
  }
  void get_pixel_fmt(std::string& /* _return */) {
    return;
  }
  void get_user_defined_name(std::string& /* _return */) {
    return;
  }
  void get_device_serial_number(std::string& /* _return */) {
    return;
  }
  void get_current_ip_address(std::string& /* _return */) {
    return;
  }
  double get_grab_fps() {
    double _return = (double)0;
    return _return;
  }
  double get_process_fps() {
    double _return = (double)0;
    return _return;
  }
  void save_feature(std::string& /* _return */) {
    return;
  }
  int32_t update_feature(const std::string& /* content */) {
    int32_t _return = 0;
    return _return;
  }
};


class PlaybackCtrlService_get_data_port_args {
 public:

  PlaybackCtrlService_get_data_port_args() {
  }

  virtual ~PlaybackCtrlService_get_data_port_args() throw() {}


  bool operator == (const PlaybackCtrlService_get_data_port_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_data_port_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_data_port_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_get_data_port_pargs {
 public:


  virtual ~PlaybackCtrlService_get_data_port_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_data_port_result__isset {
  _PlaybackCtrlService_get_data_port_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_data_port_result__isset;

class PlaybackCtrlService_get_data_port_result {
 public:

  PlaybackCtrlService_get_data_port_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_get_data_port_result() throw() {}

  int32_t success;

  _PlaybackCtrlService_get_data_port_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_get_data_port_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_data_port_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_data_port_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_data_port_presult__isset {
  _PlaybackCtrlService_get_data_port_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_data_port_presult__isset;

class PlaybackCtrlService_get_data_port_presult {
 public:


  virtual ~PlaybackCtrlService_get_data_port_presult() throw() {}

  int32_t* success;

  _PlaybackCtrlService_get_data_port_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PlaybackCtrlService_set_play_frame_rate_args__isset {
  _PlaybackCtrlService_set_play_frame_rate_args__isset() : play_frame_rate(false), sample_gap(false) {}
  bool play_frame_rate;
  bool sample_gap;
} _PlaybackCtrlService_set_play_frame_rate_args__isset;

class PlaybackCtrlService_set_play_frame_rate_args {
 public:

  PlaybackCtrlService_set_play_frame_rate_args() : play_frame_rate(0), sample_gap(0) {
  }

  virtual ~PlaybackCtrlService_set_play_frame_rate_args() throw() {}

  int32_t play_frame_rate;
  int32_t sample_gap;

  _PlaybackCtrlService_set_play_frame_rate_args__isset __isset;

  void __set_play_frame_rate(const int32_t val) {
    play_frame_rate = val;
  }

  void __set_sample_gap(const int32_t val) {
    sample_gap = val;
  }

  bool operator == (const PlaybackCtrlService_set_play_frame_rate_args & rhs) const
  {
    if (!(play_frame_rate == rhs.play_frame_rate))
      return false;
    if (!(sample_gap == rhs.sample_gap))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_set_play_frame_rate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_set_play_frame_rate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_set_play_frame_rate_pargs {
 public:


  virtual ~PlaybackCtrlService_set_play_frame_rate_pargs() throw() {}

  const int32_t* play_frame_rate;
  const int32_t* sample_gap;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_set_play_frame_rate_result__isset {
  _PlaybackCtrlService_set_play_frame_rate_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_set_play_frame_rate_result__isset;

class PlaybackCtrlService_set_play_frame_rate_result {
 public:

  PlaybackCtrlService_set_play_frame_rate_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_set_play_frame_rate_result() throw() {}

  int32_t success;

  _PlaybackCtrlService_set_play_frame_rate_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_set_play_frame_rate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_set_play_frame_rate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_set_play_frame_rate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_set_play_frame_rate_presult__isset {
  _PlaybackCtrlService_set_play_frame_rate_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_set_play_frame_rate_presult__isset;

class PlaybackCtrlService_set_play_frame_rate_presult {
 public:


  virtual ~PlaybackCtrlService_set_play_frame_rate_presult() throw() {}

  int32_t* success;

  _PlaybackCtrlService_set_play_frame_rate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PlaybackCtrlService_set_play_frame_resolution_args__isset {
  _PlaybackCtrlService_set_play_frame_resolution_args__isset() : w(false), h(false) {}
  bool w;
  bool h;
} _PlaybackCtrlService_set_play_frame_resolution_args__isset;

class PlaybackCtrlService_set_play_frame_resolution_args {
 public:

  PlaybackCtrlService_set_play_frame_resolution_args() : w(0), h(0) {
  }

  virtual ~PlaybackCtrlService_set_play_frame_resolution_args() throw() {}

  int32_t w;
  int32_t h;

  _PlaybackCtrlService_set_play_frame_resolution_args__isset __isset;

  void __set_w(const int32_t val) {
    w = val;
  }

  void __set_h(const int32_t val) {
    h = val;
  }

  bool operator == (const PlaybackCtrlService_set_play_frame_resolution_args & rhs) const
  {
    if (!(w == rhs.w))
      return false;
    if (!(h == rhs.h))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_set_play_frame_resolution_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_set_play_frame_resolution_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_set_play_frame_resolution_pargs {
 public:


  virtual ~PlaybackCtrlService_set_play_frame_resolution_pargs() throw() {}

  const int32_t* w;
  const int32_t* h;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_set_play_frame_resolution_result__isset {
  _PlaybackCtrlService_set_play_frame_resolution_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_set_play_frame_resolution_result__isset;

class PlaybackCtrlService_set_play_frame_resolution_result {
 public:

  PlaybackCtrlService_set_play_frame_resolution_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_set_play_frame_resolution_result() throw() {}

  int32_t success;

  _PlaybackCtrlService_set_play_frame_resolution_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_set_play_frame_resolution_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_set_play_frame_resolution_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_set_play_frame_resolution_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_set_play_frame_resolution_presult__isset {
  _PlaybackCtrlService_set_play_frame_resolution_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_set_play_frame_resolution_presult__isset;

class PlaybackCtrlService_set_play_frame_resolution_presult {
 public:


  virtual ~PlaybackCtrlService_set_play_frame_resolution_presult() throw() {}

  int32_t* success;

  _PlaybackCtrlService_set_play_frame_resolution_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PlaybackCtrlService_set_store_file_args__isset {
  _PlaybackCtrlService_set_store_file_args__isset() : flag(false) {}
  bool flag;
} _PlaybackCtrlService_set_store_file_args__isset;

class PlaybackCtrlService_set_store_file_args {
 public:

  PlaybackCtrlService_set_store_file_args() : flag(0) {
  }

  virtual ~PlaybackCtrlService_set_store_file_args() throw() {}

  int32_t flag;

  _PlaybackCtrlService_set_store_file_args__isset __isset;

  void __set_flag(const int32_t val) {
    flag = val;
  }

  bool operator == (const PlaybackCtrlService_set_store_file_args & rhs) const
  {
    if (!(flag == rhs.flag))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_set_store_file_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_set_store_file_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_set_store_file_pargs {
 public:


  virtual ~PlaybackCtrlService_set_store_file_pargs() throw() {}

  const int32_t* flag;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_set_store_file_result__isset {
  _PlaybackCtrlService_set_store_file_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_set_store_file_result__isset;

class PlaybackCtrlService_set_store_file_result {
 public:

  PlaybackCtrlService_set_store_file_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_set_store_file_result() throw() {}

  int32_t success;

  _PlaybackCtrlService_set_store_file_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_set_store_file_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_set_store_file_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_set_store_file_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_set_store_file_presult__isset {
  _PlaybackCtrlService_set_store_file_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_set_store_file_presult__isset;

class PlaybackCtrlService_set_store_file_presult {
 public:


  virtual ~PlaybackCtrlService_set_store_file_presult() throw() {}

  int32_t* success;

  _PlaybackCtrlService_set_store_file_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PlaybackCtrlService_start_grab_args {
 public:

  PlaybackCtrlService_start_grab_args() {
  }

  virtual ~PlaybackCtrlService_start_grab_args() throw() {}


  bool operator == (const PlaybackCtrlService_start_grab_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PlaybackCtrlService_start_grab_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_start_grab_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_start_grab_pargs {
 public:


  virtual ~PlaybackCtrlService_start_grab_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_start_grab_result__isset {
  _PlaybackCtrlService_start_grab_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_start_grab_result__isset;

class PlaybackCtrlService_start_grab_result {
 public:

  PlaybackCtrlService_start_grab_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_start_grab_result() throw() {}

  int32_t success;

  _PlaybackCtrlService_start_grab_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_start_grab_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_start_grab_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_start_grab_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_start_grab_presult__isset {
  _PlaybackCtrlService_start_grab_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_start_grab_presult__isset;

class PlaybackCtrlService_start_grab_presult {
 public:


  virtual ~PlaybackCtrlService_start_grab_presult() throw() {}

  int32_t* success;

  _PlaybackCtrlService_start_grab_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PlaybackCtrlService_stop_grab_args {
 public:

  PlaybackCtrlService_stop_grab_args() {
  }

  virtual ~PlaybackCtrlService_stop_grab_args() throw() {}


  bool operator == (const PlaybackCtrlService_stop_grab_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PlaybackCtrlService_stop_grab_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_stop_grab_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_stop_grab_pargs {
 public:


  virtual ~PlaybackCtrlService_stop_grab_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_stop_grab_result__isset {
  _PlaybackCtrlService_stop_grab_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_stop_grab_result__isset;

class PlaybackCtrlService_stop_grab_result {
 public:

  PlaybackCtrlService_stop_grab_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_stop_grab_result() throw() {}

  int32_t success;

  _PlaybackCtrlService_stop_grab_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_stop_grab_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_stop_grab_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_stop_grab_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_stop_grab_presult__isset {
  _PlaybackCtrlService_stop_grab_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_stop_grab_presult__isset;

class PlaybackCtrlService_stop_grab_presult {
 public:


  virtual ~PlaybackCtrlService_stop_grab_presult() throw() {}

  int32_t* success;

  _PlaybackCtrlService_stop_grab_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PlaybackCtrlService_play_pause_args {
 public:

  PlaybackCtrlService_play_pause_args() {
  }

  virtual ~PlaybackCtrlService_play_pause_args() throw() {}


  bool operator == (const PlaybackCtrlService_play_pause_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PlaybackCtrlService_play_pause_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_play_pause_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_play_pause_pargs {
 public:


  virtual ~PlaybackCtrlService_play_pause_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_play_pause_result__isset {
  _PlaybackCtrlService_play_pause_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_play_pause_result__isset;

class PlaybackCtrlService_play_pause_result {
 public:

  PlaybackCtrlService_play_pause_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_play_pause_result() throw() {}

  int32_t success;

  _PlaybackCtrlService_play_pause_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_play_pause_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_play_pause_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_play_pause_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_play_pause_presult__isset {
  _PlaybackCtrlService_play_pause_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_play_pause_presult__isset;

class PlaybackCtrlService_play_pause_presult {
 public:


  virtual ~PlaybackCtrlService_play_pause_presult() throw() {}

  int32_t* success;

  _PlaybackCtrlService_play_pause_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PlaybackCtrlService_play_live_args__isset {
  _PlaybackCtrlService_play_live_args__isset() : play_frame_rate(false), sample_gap(false) {}
  bool play_frame_rate;
  bool sample_gap;
} _PlaybackCtrlService_play_live_args__isset;

class PlaybackCtrlService_play_live_args {
 public:

  PlaybackCtrlService_play_live_args() : play_frame_rate(0), sample_gap(0) {
  }

  virtual ~PlaybackCtrlService_play_live_args() throw() {}

  int32_t play_frame_rate;
  int32_t sample_gap;

  _PlaybackCtrlService_play_live_args__isset __isset;

  void __set_play_frame_rate(const int32_t val) {
    play_frame_rate = val;
  }

  void __set_sample_gap(const int32_t val) {
    sample_gap = val;
  }

  bool operator == (const PlaybackCtrlService_play_live_args & rhs) const
  {
    if (!(play_frame_rate == rhs.play_frame_rate))
      return false;
    if (!(sample_gap == rhs.sample_gap))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_play_live_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_play_live_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_play_live_pargs {
 public:


  virtual ~PlaybackCtrlService_play_live_pargs() throw() {}

  const int32_t* play_frame_rate;
  const int32_t* sample_gap;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_play_live_result__isset {
  _PlaybackCtrlService_play_live_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_play_live_result__isset;

class PlaybackCtrlService_play_live_result {
 public:

  PlaybackCtrlService_play_live_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_play_live_result() throw() {}

  int32_t success;

  _PlaybackCtrlService_play_live_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_play_live_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_play_live_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_play_live_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_play_live_presult__isset {
  _PlaybackCtrlService_play_live_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_play_live_presult__isset;

class PlaybackCtrlService_play_live_presult {
 public:


  virtual ~PlaybackCtrlService_play_live_presult() throw() {}

  int32_t* success;

  _PlaybackCtrlService_play_live_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PlaybackCtrlService_play_forward_args__isset {
  _PlaybackCtrlService_play_forward_args__isset() : play_frame_rate(false), sample_gap(false) {}
  bool play_frame_rate;
  bool sample_gap;
} _PlaybackCtrlService_play_forward_args__isset;

class PlaybackCtrlService_play_forward_args {
 public:

  PlaybackCtrlService_play_forward_args() : play_frame_rate(0), sample_gap(0) {
  }

  virtual ~PlaybackCtrlService_play_forward_args() throw() {}

  int32_t play_frame_rate;
  int32_t sample_gap;

  _PlaybackCtrlService_play_forward_args__isset __isset;

  void __set_play_frame_rate(const int32_t val) {
    play_frame_rate = val;
  }

  void __set_sample_gap(const int32_t val) {
    sample_gap = val;
  }

  bool operator == (const PlaybackCtrlService_play_forward_args & rhs) const
  {
    if (!(play_frame_rate == rhs.play_frame_rate))
      return false;
    if (!(sample_gap == rhs.sample_gap))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_play_forward_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_play_forward_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_play_forward_pargs {
 public:


  virtual ~PlaybackCtrlService_play_forward_pargs() throw() {}

  const int32_t* play_frame_rate;
  const int32_t* sample_gap;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_play_forward_result__isset {
  _PlaybackCtrlService_play_forward_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_play_forward_result__isset;

class PlaybackCtrlService_play_forward_result {
 public:

  PlaybackCtrlService_play_forward_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_play_forward_result() throw() {}

  int32_t success;

  _PlaybackCtrlService_play_forward_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_play_forward_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_play_forward_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_play_forward_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_play_forward_presult__isset {
  _PlaybackCtrlService_play_forward_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_play_forward_presult__isset;

class PlaybackCtrlService_play_forward_presult {
 public:


  virtual ~PlaybackCtrlService_play_forward_presult() throw() {}

  int32_t* success;

  _PlaybackCtrlService_play_forward_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PlaybackCtrlService_play_backward_args__isset {
  _PlaybackCtrlService_play_backward_args__isset() : play_frame_rate(false), sample_gap(false) {}
  bool play_frame_rate;
  bool sample_gap;
} _PlaybackCtrlService_play_backward_args__isset;

class PlaybackCtrlService_play_backward_args {
 public:

  PlaybackCtrlService_play_backward_args() : play_frame_rate(0), sample_gap(0) {
  }

  virtual ~PlaybackCtrlService_play_backward_args() throw() {}

  int32_t play_frame_rate;
  int32_t sample_gap;

  _PlaybackCtrlService_play_backward_args__isset __isset;

  void __set_play_frame_rate(const int32_t val) {
    play_frame_rate = val;
  }

  void __set_sample_gap(const int32_t val) {
    sample_gap = val;
  }

  bool operator == (const PlaybackCtrlService_play_backward_args & rhs) const
  {
    if (!(play_frame_rate == rhs.play_frame_rate))
      return false;
    if (!(sample_gap == rhs.sample_gap))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_play_backward_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_play_backward_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_play_backward_pargs {
 public:


  virtual ~PlaybackCtrlService_play_backward_pargs() throw() {}

  const int32_t* play_frame_rate;
  const int32_t* sample_gap;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_play_backward_result__isset {
  _PlaybackCtrlService_play_backward_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_play_backward_result__isset;

class PlaybackCtrlService_play_backward_result {
 public:

  PlaybackCtrlService_play_backward_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_play_backward_result() throw() {}

  int32_t success;

  _PlaybackCtrlService_play_backward_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_play_backward_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_play_backward_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_play_backward_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_play_backward_presult__isset {
  _PlaybackCtrlService_play_backward_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_play_backward_presult__isset;

class PlaybackCtrlService_play_backward_presult {
 public:


  virtual ~PlaybackCtrlService_play_backward_presult() throw() {}

  int32_t* success;

  _PlaybackCtrlService_play_backward_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PlaybackCtrlService_play_from_a2b_args__isset {
  _PlaybackCtrlService_play_from_a2b_args__isset() : from(false), to(false) {}
  bool from;
  bool to;
} _PlaybackCtrlService_play_from_a2b_args__isset;

class PlaybackCtrlService_play_from_a2b_args {
 public:

  PlaybackCtrlService_play_from_a2b_args() : from(0), to(0) {
  }

  virtual ~PlaybackCtrlService_play_from_a2b_args() throw() {}

  int64_t from;
  int64_t to;

  _PlaybackCtrlService_play_from_a2b_args__isset __isset;

  void __set_from(const int64_t val) {
    from = val;
  }

  void __set_to(const int64_t val) {
    to = val;
  }

  bool operator == (const PlaybackCtrlService_play_from_a2b_args & rhs) const
  {
    if (!(from == rhs.from))
      return false;
    if (!(to == rhs.to))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_play_from_a2b_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_play_from_a2b_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_play_from_a2b_pargs {
 public:


  virtual ~PlaybackCtrlService_play_from_a2b_pargs() throw() {}

  const int64_t* from;
  const int64_t* to;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_play_from_a2b_result__isset {
  _PlaybackCtrlService_play_from_a2b_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_play_from_a2b_result__isset;

class PlaybackCtrlService_play_from_a2b_result {
 public:

  PlaybackCtrlService_play_from_a2b_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_play_from_a2b_result() throw() {}

  int32_t success;

  _PlaybackCtrlService_play_from_a2b_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_play_from_a2b_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_play_from_a2b_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_play_from_a2b_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_play_from_a2b_presult__isset {
  _PlaybackCtrlService_play_from_a2b_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_play_from_a2b_presult__isset;

class PlaybackCtrlService_play_from_a2b_presult {
 public:


  virtual ~PlaybackCtrlService_play_from_a2b_presult() throw() {}

  int32_t* success;

  _PlaybackCtrlService_play_from_a2b_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PlaybackCtrlService_get_camera_grab_fps_args {
 public:

  PlaybackCtrlService_get_camera_grab_fps_args() {
  }

  virtual ~PlaybackCtrlService_get_camera_grab_fps_args() throw() {}


  bool operator == (const PlaybackCtrlService_get_camera_grab_fps_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_camera_grab_fps_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_camera_grab_fps_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_get_camera_grab_fps_pargs {
 public:


  virtual ~PlaybackCtrlService_get_camera_grab_fps_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_camera_grab_fps_result__isset {
  _PlaybackCtrlService_get_camera_grab_fps_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_camera_grab_fps_result__isset;

class PlaybackCtrlService_get_camera_grab_fps_result {
 public:

  PlaybackCtrlService_get_camera_grab_fps_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_get_camera_grab_fps_result() throw() {}

  double success;

  _PlaybackCtrlService_get_camera_grab_fps_result__isset __isset;

  void __set_success(const double val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_get_camera_grab_fps_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_camera_grab_fps_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_camera_grab_fps_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_camera_grab_fps_presult__isset {
  _PlaybackCtrlService_get_camera_grab_fps_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_camera_grab_fps_presult__isset;

class PlaybackCtrlService_get_camera_grab_fps_presult {
 public:


  virtual ~PlaybackCtrlService_get_camera_grab_fps_presult() throw() {}

  double* success;

  _PlaybackCtrlService_get_camera_grab_fps_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PlaybackCtrlService_get_soft_grab_fps_args {
 public:

  PlaybackCtrlService_get_soft_grab_fps_args() {
  }

  virtual ~PlaybackCtrlService_get_soft_grab_fps_args() throw() {}


  bool operator == (const PlaybackCtrlService_get_soft_grab_fps_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_soft_grab_fps_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_soft_grab_fps_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_get_soft_grab_fps_pargs {
 public:


  virtual ~PlaybackCtrlService_get_soft_grab_fps_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_soft_grab_fps_result__isset {
  _PlaybackCtrlService_get_soft_grab_fps_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_soft_grab_fps_result__isset;

class PlaybackCtrlService_get_soft_grab_fps_result {
 public:

  PlaybackCtrlService_get_soft_grab_fps_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_get_soft_grab_fps_result() throw() {}

  double success;

  _PlaybackCtrlService_get_soft_grab_fps_result__isset __isset;

  void __set_success(const double val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_get_soft_grab_fps_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_soft_grab_fps_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_soft_grab_fps_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_soft_grab_fps_presult__isset {
  _PlaybackCtrlService_get_soft_grab_fps_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_soft_grab_fps_presult__isset;

class PlaybackCtrlService_get_soft_grab_fps_presult {
 public:


  virtual ~PlaybackCtrlService_get_soft_grab_fps_presult() throw() {}

  double* success;

  _PlaybackCtrlService_get_soft_grab_fps_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PlaybackCtrlService_get_soft_snd_fps_args {
 public:

  PlaybackCtrlService_get_soft_snd_fps_args() {
  }

  virtual ~PlaybackCtrlService_get_soft_snd_fps_args() throw() {}


  bool operator == (const PlaybackCtrlService_get_soft_snd_fps_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_soft_snd_fps_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_soft_snd_fps_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_get_soft_snd_fps_pargs {
 public:


  virtual ~PlaybackCtrlService_get_soft_snd_fps_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_soft_snd_fps_result__isset {
  _PlaybackCtrlService_get_soft_snd_fps_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_soft_snd_fps_result__isset;

class PlaybackCtrlService_get_soft_snd_fps_result {
 public:

  PlaybackCtrlService_get_soft_snd_fps_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_get_soft_snd_fps_result() throw() {}

  double success;

  _PlaybackCtrlService_get_soft_snd_fps_result__isset __isset;

  void __set_success(const double val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_get_soft_snd_fps_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_soft_snd_fps_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_soft_snd_fps_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_soft_snd_fps_presult__isset {
  _PlaybackCtrlService_get_soft_snd_fps_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_soft_snd_fps_presult__isset;

class PlaybackCtrlService_get_soft_snd_fps_presult {
 public:


  virtual ~PlaybackCtrlService_get_soft_snd_fps_presult() throw() {}

  double* success;

  _PlaybackCtrlService_get_soft_snd_fps_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PlaybackCtrlService_get_file_write_fps_args {
 public:

  PlaybackCtrlService_get_file_write_fps_args() {
  }

  virtual ~PlaybackCtrlService_get_file_write_fps_args() throw() {}


  bool operator == (const PlaybackCtrlService_get_file_write_fps_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_file_write_fps_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_file_write_fps_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_get_file_write_fps_pargs {
 public:


  virtual ~PlaybackCtrlService_get_file_write_fps_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_file_write_fps_result__isset {
  _PlaybackCtrlService_get_file_write_fps_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_file_write_fps_result__isset;

class PlaybackCtrlService_get_file_write_fps_result {
 public:

  PlaybackCtrlService_get_file_write_fps_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_get_file_write_fps_result() throw() {}

  double success;

  _PlaybackCtrlService_get_file_write_fps_result__isset __isset;

  void __set_success(const double val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_get_file_write_fps_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_file_write_fps_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_file_write_fps_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_file_write_fps_presult__isset {
  _PlaybackCtrlService_get_file_write_fps_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_file_write_fps_presult__isset;

class PlaybackCtrlService_get_file_write_fps_presult {
 public:


  virtual ~PlaybackCtrlService_get_file_write_fps_presult() throw() {}

  double* success;

  _PlaybackCtrlService_get_file_write_fps_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PlaybackCtrlService_set_exposure_time_args__isset {
  _PlaybackCtrlService_set_exposure_time_args__isset() : microseconds(false) {}
  bool microseconds;
} _PlaybackCtrlService_set_exposure_time_args__isset;

class PlaybackCtrlService_set_exposure_time_args {
 public:

  PlaybackCtrlService_set_exposure_time_args() : microseconds(0) {
  }

  virtual ~PlaybackCtrlService_set_exposure_time_args() throw() {}

  double microseconds;

  _PlaybackCtrlService_set_exposure_time_args__isset __isset;

  void __set_microseconds(const double val) {
    microseconds = val;
  }

  bool operator == (const PlaybackCtrlService_set_exposure_time_args & rhs) const
  {
    if (!(microseconds == rhs.microseconds))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_set_exposure_time_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_set_exposure_time_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_set_exposure_time_pargs {
 public:


  virtual ~PlaybackCtrlService_set_exposure_time_pargs() throw() {}

  const double* microseconds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_set_exposure_time_result__isset {
  _PlaybackCtrlService_set_exposure_time_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_set_exposure_time_result__isset;

class PlaybackCtrlService_set_exposure_time_result {
 public:

  PlaybackCtrlService_set_exposure_time_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_set_exposure_time_result() throw() {}

  int32_t success;

  _PlaybackCtrlService_set_exposure_time_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_set_exposure_time_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_set_exposure_time_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_set_exposure_time_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_set_exposure_time_presult__isset {
  _PlaybackCtrlService_set_exposure_time_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_set_exposure_time_presult__isset;

class PlaybackCtrlService_set_exposure_time_presult {
 public:


  virtual ~PlaybackCtrlService_set_exposure_time_presult() throw() {}

  int32_t* success;

  _PlaybackCtrlService_set_exposure_time_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PlaybackCtrlService_set_gain_by_sensor_all_args__isset {
  _PlaybackCtrlService_set_gain_by_sensor_all_args__isset() : gain(false) {}
  bool gain;
} _PlaybackCtrlService_set_gain_by_sensor_all_args__isset;

class PlaybackCtrlService_set_gain_by_sensor_all_args {
 public:

  PlaybackCtrlService_set_gain_by_sensor_all_args() : gain(0) {
  }

  virtual ~PlaybackCtrlService_set_gain_by_sensor_all_args() throw() {}

  double gain;

  _PlaybackCtrlService_set_gain_by_sensor_all_args__isset __isset;

  void __set_gain(const double val) {
    gain = val;
  }

  bool operator == (const PlaybackCtrlService_set_gain_by_sensor_all_args & rhs) const
  {
    if (!(gain == rhs.gain))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_set_gain_by_sensor_all_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_set_gain_by_sensor_all_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_set_gain_by_sensor_all_pargs {
 public:


  virtual ~PlaybackCtrlService_set_gain_by_sensor_all_pargs() throw() {}

  const double* gain;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_set_gain_by_sensor_all_result__isset {
  _PlaybackCtrlService_set_gain_by_sensor_all_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_set_gain_by_sensor_all_result__isset;

class PlaybackCtrlService_set_gain_by_sensor_all_result {
 public:

  PlaybackCtrlService_set_gain_by_sensor_all_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_set_gain_by_sensor_all_result() throw() {}

  int32_t success;

  _PlaybackCtrlService_set_gain_by_sensor_all_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_set_gain_by_sensor_all_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_set_gain_by_sensor_all_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_set_gain_by_sensor_all_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_set_gain_by_sensor_all_presult__isset {
  _PlaybackCtrlService_set_gain_by_sensor_all_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_set_gain_by_sensor_all_presult__isset;

class PlaybackCtrlService_set_gain_by_sensor_all_presult {
 public:


  virtual ~PlaybackCtrlService_set_gain_by_sensor_all_presult() throw() {}

  int32_t* success;

  _PlaybackCtrlService_set_gain_by_sensor_all_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PlaybackCtrlService_set_gain_by_sensor_analog_args__isset {
  _PlaybackCtrlService_set_gain_by_sensor_analog_args__isset() : gain(false) {}
  bool gain;
} _PlaybackCtrlService_set_gain_by_sensor_analog_args__isset;

class PlaybackCtrlService_set_gain_by_sensor_analog_args {
 public:

  PlaybackCtrlService_set_gain_by_sensor_analog_args() : gain(0) {
  }

  virtual ~PlaybackCtrlService_set_gain_by_sensor_analog_args() throw() {}

  double gain;

  _PlaybackCtrlService_set_gain_by_sensor_analog_args__isset __isset;

  void __set_gain(const double val) {
    gain = val;
  }

  bool operator == (const PlaybackCtrlService_set_gain_by_sensor_analog_args & rhs) const
  {
    if (!(gain == rhs.gain))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_set_gain_by_sensor_analog_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_set_gain_by_sensor_analog_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_set_gain_by_sensor_analog_pargs {
 public:


  virtual ~PlaybackCtrlService_set_gain_by_sensor_analog_pargs() throw() {}

  const double* gain;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_set_gain_by_sensor_analog_result__isset {
  _PlaybackCtrlService_set_gain_by_sensor_analog_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_set_gain_by_sensor_analog_result__isset;

class PlaybackCtrlService_set_gain_by_sensor_analog_result {
 public:

  PlaybackCtrlService_set_gain_by_sensor_analog_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_set_gain_by_sensor_analog_result() throw() {}

  int32_t success;

  _PlaybackCtrlService_set_gain_by_sensor_analog_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_set_gain_by_sensor_analog_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_set_gain_by_sensor_analog_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_set_gain_by_sensor_analog_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_set_gain_by_sensor_analog_presult__isset {
  _PlaybackCtrlService_set_gain_by_sensor_analog_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_set_gain_by_sensor_analog_presult__isset;

class PlaybackCtrlService_set_gain_by_sensor_analog_presult {
 public:


  virtual ~PlaybackCtrlService_set_gain_by_sensor_analog_presult() throw() {}

  int32_t* success;

  _PlaybackCtrlService_set_gain_by_sensor_analog_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PlaybackCtrlService_set_gain_by_sensor_digital_args__isset {
  _PlaybackCtrlService_set_gain_by_sensor_digital_args__isset() : gain(false) {}
  bool gain;
} _PlaybackCtrlService_set_gain_by_sensor_digital_args__isset;

class PlaybackCtrlService_set_gain_by_sensor_digital_args {
 public:

  PlaybackCtrlService_set_gain_by_sensor_digital_args() : gain(0) {
  }

  virtual ~PlaybackCtrlService_set_gain_by_sensor_digital_args() throw() {}

  double gain;

  _PlaybackCtrlService_set_gain_by_sensor_digital_args__isset __isset;

  void __set_gain(const double val) {
    gain = val;
  }

  bool operator == (const PlaybackCtrlService_set_gain_by_sensor_digital_args & rhs) const
  {
    if (!(gain == rhs.gain))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_set_gain_by_sensor_digital_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_set_gain_by_sensor_digital_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_set_gain_by_sensor_digital_pargs {
 public:


  virtual ~PlaybackCtrlService_set_gain_by_sensor_digital_pargs() throw() {}

  const double* gain;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_set_gain_by_sensor_digital_result__isset {
  _PlaybackCtrlService_set_gain_by_sensor_digital_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_set_gain_by_sensor_digital_result__isset;

class PlaybackCtrlService_set_gain_by_sensor_digital_result {
 public:

  PlaybackCtrlService_set_gain_by_sensor_digital_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_set_gain_by_sensor_digital_result() throw() {}

  int32_t success;

  _PlaybackCtrlService_set_gain_by_sensor_digital_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_set_gain_by_sensor_digital_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_set_gain_by_sensor_digital_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_set_gain_by_sensor_digital_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_set_gain_by_sensor_digital_presult__isset {
  _PlaybackCtrlService_set_gain_by_sensor_digital_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_set_gain_by_sensor_digital_presult__isset;

class PlaybackCtrlService_set_gain_by_sensor_digital_presult {
 public:


  virtual ~PlaybackCtrlService_set_gain_by_sensor_digital_presult() throw() {}

  int32_t* success;

  _PlaybackCtrlService_set_gain_by_sensor_digital_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PlaybackCtrlService_set_frame_rate_args__isset {
  _PlaybackCtrlService_set_frame_rate_args__isset() : rate(false) {}
  bool rate;
} _PlaybackCtrlService_set_frame_rate_args__isset;

class PlaybackCtrlService_set_frame_rate_args {
 public:

  PlaybackCtrlService_set_frame_rate_args() : rate(0) {
  }

  virtual ~PlaybackCtrlService_set_frame_rate_args() throw() {}

  double rate;

  _PlaybackCtrlService_set_frame_rate_args__isset __isset;

  void __set_rate(const double val) {
    rate = val;
  }

  bool operator == (const PlaybackCtrlService_set_frame_rate_args & rhs) const
  {
    if (!(rate == rhs.rate))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_set_frame_rate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_set_frame_rate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_set_frame_rate_pargs {
 public:


  virtual ~PlaybackCtrlService_set_frame_rate_pargs() throw() {}

  const double* rate;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_set_frame_rate_result__isset {
  _PlaybackCtrlService_set_frame_rate_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_set_frame_rate_result__isset;

class PlaybackCtrlService_set_frame_rate_result {
 public:

  PlaybackCtrlService_set_frame_rate_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_set_frame_rate_result() throw() {}

  int32_t success;

  _PlaybackCtrlService_set_frame_rate_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_set_frame_rate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_set_frame_rate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_set_frame_rate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_set_frame_rate_presult__isset {
  _PlaybackCtrlService_set_frame_rate_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_set_frame_rate_presult__isset;

class PlaybackCtrlService_set_frame_rate_presult {
 public:


  virtual ~PlaybackCtrlService_set_frame_rate_presult() throw() {}

  int32_t* success;

  _PlaybackCtrlService_set_frame_rate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PlaybackCtrlService_enable_turbo_transfer_args__isset {
  _PlaybackCtrlService_enable_turbo_transfer_args__isset() : enabled(false) {}
  bool enabled;
} _PlaybackCtrlService_enable_turbo_transfer_args__isset;

class PlaybackCtrlService_enable_turbo_transfer_args {
 public:

  PlaybackCtrlService_enable_turbo_transfer_args() : enabled(0) {
  }

  virtual ~PlaybackCtrlService_enable_turbo_transfer_args() throw() {}

  int32_t enabled;

  _PlaybackCtrlService_enable_turbo_transfer_args__isset __isset;

  void __set_enabled(const int32_t val) {
    enabled = val;
  }

  bool operator == (const PlaybackCtrlService_enable_turbo_transfer_args & rhs) const
  {
    if (!(enabled == rhs.enabled))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_enable_turbo_transfer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_enable_turbo_transfer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_enable_turbo_transfer_pargs {
 public:


  virtual ~PlaybackCtrlService_enable_turbo_transfer_pargs() throw() {}

  const int32_t* enabled;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_enable_turbo_transfer_result__isset {
  _PlaybackCtrlService_enable_turbo_transfer_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_enable_turbo_transfer_result__isset;

class PlaybackCtrlService_enable_turbo_transfer_result {
 public:

  PlaybackCtrlService_enable_turbo_transfer_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_enable_turbo_transfer_result() throw() {}

  int32_t success;

  _PlaybackCtrlService_enable_turbo_transfer_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_enable_turbo_transfer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_enable_turbo_transfer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_enable_turbo_transfer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_enable_turbo_transfer_presult__isset {
  _PlaybackCtrlService_enable_turbo_transfer_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_enable_turbo_transfer_presult__isset;

class PlaybackCtrlService_enable_turbo_transfer_presult {
 public:


  virtual ~PlaybackCtrlService_enable_turbo_transfer_presult() throw() {}

  int32_t* success;

  _PlaybackCtrlService_enable_turbo_transfer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PlaybackCtrlService_set_pixel_fmt_args__isset {
  _PlaybackCtrlService_set_pixel_fmt_args__isset() : pixel_fmt(false) {}
  bool pixel_fmt;
} _PlaybackCtrlService_set_pixel_fmt_args__isset;

class PlaybackCtrlService_set_pixel_fmt_args {
 public:

  PlaybackCtrlService_set_pixel_fmt_args() : pixel_fmt() {
  }

  virtual ~PlaybackCtrlService_set_pixel_fmt_args() throw() {}

  std::string pixel_fmt;

  _PlaybackCtrlService_set_pixel_fmt_args__isset __isset;

  void __set_pixel_fmt(const std::string& val) {
    pixel_fmt = val;
  }

  bool operator == (const PlaybackCtrlService_set_pixel_fmt_args & rhs) const
  {
    if (!(pixel_fmt == rhs.pixel_fmt))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_set_pixel_fmt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_set_pixel_fmt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_set_pixel_fmt_pargs {
 public:


  virtual ~PlaybackCtrlService_set_pixel_fmt_pargs() throw() {}

  const std::string* pixel_fmt;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_set_pixel_fmt_result__isset {
  _PlaybackCtrlService_set_pixel_fmt_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_set_pixel_fmt_result__isset;

class PlaybackCtrlService_set_pixel_fmt_result {
 public:

  PlaybackCtrlService_set_pixel_fmt_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_set_pixel_fmt_result() throw() {}

  int32_t success;

  _PlaybackCtrlService_set_pixel_fmt_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_set_pixel_fmt_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_set_pixel_fmt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_set_pixel_fmt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_set_pixel_fmt_presult__isset {
  _PlaybackCtrlService_set_pixel_fmt_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_set_pixel_fmt_presult__isset;

class PlaybackCtrlService_set_pixel_fmt_presult {
 public:


  virtual ~PlaybackCtrlService_set_pixel_fmt_presult() throw() {}

  int32_t* success;

  _PlaybackCtrlService_set_pixel_fmt_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PlaybackCtrlService_set_offset_x_args__isset {
  _PlaybackCtrlService_set_offset_x_args__isset() : offset_x(false) {}
  bool offset_x;
} _PlaybackCtrlService_set_offset_x_args__isset;

class PlaybackCtrlService_set_offset_x_args {
 public:

  PlaybackCtrlService_set_offset_x_args() : offset_x(0) {
  }

  virtual ~PlaybackCtrlService_set_offset_x_args() throw() {}

  int32_t offset_x;

  _PlaybackCtrlService_set_offset_x_args__isset __isset;

  void __set_offset_x(const int32_t val) {
    offset_x = val;
  }

  bool operator == (const PlaybackCtrlService_set_offset_x_args & rhs) const
  {
    if (!(offset_x == rhs.offset_x))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_set_offset_x_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_set_offset_x_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_set_offset_x_pargs {
 public:


  virtual ~PlaybackCtrlService_set_offset_x_pargs() throw() {}

  const int32_t* offset_x;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_set_offset_x_result__isset {
  _PlaybackCtrlService_set_offset_x_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_set_offset_x_result__isset;

class PlaybackCtrlService_set_offset_x_result {
 public:

  PlaybackCtrlService_set_offset_x_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_set_offset_x_result() throw() {}

  int32_t success;

  _PlaybackCtrlService_set_offset_x_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_set_offset_x_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_set_offset_x_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_set_offset_x_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_set_offset_x_presult__isset {
  _PlaybackCtrlService_set_offset_x_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_set_offset_x_presult__isset;

class PlaybackCtrlService_set_offset_x_presult {
 public:


  virtual ~PlaybackCtrlService_set_offset_x_presult() throw() {}

  int32_t* success;

  _PlaybackCtrlService_set_offset_x_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PlaybackCtrlService_set_offset_y_args__isset {
  _PlaybackCtrlService_set_offset_y_args__isset() : offset_y(false) {}
  bool offset_y;
} _PlaybackCtrlService_set_offset_y_args__isset;

class PlaybackCtrlService_set_offset_y_args {
 public:

  PlaybackCtrlService_set_offset_y_args() : offset_y(0) {
  }

  virtual ~PlaybackCtrlService_set_offset_y_args() throw() {}

  int32_t offset_y;

  _PlaybackCtrlService_set_offset_y_args__isset __isset;

  void __set_offset_y(const int32_t val) {
    offset_y = val;
  }

  bool operator == (const PlaybackCtrlService_set_offset_y_args & rhs) const
  {
    if (!(offset_y == rhs.offset_y))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_set_offset_y_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_set_offset_y_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_set_offset_y_pargs {
 public:


  virtual ~PlaybackCtrlService_set_offset_y_pargs() throw() {}

  const int32_t* offset_y;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_set_offset_y_result__isset {
  _PlaybackCtrlService_set_offset_y_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_set_offset_y_result__isset;

class PlaybackCtrlService_set_offset_y_result {
 public:

  PlaybackCtrlService_set_offset_y_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_set_offset_y_result() throw() {}

  int32_t success;

  _PlaybackCtrlService_set_offset_y_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_set_offset_y_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_set_offset_y_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_set_offset_y_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_set_offset_y_presult__isset {
  _PlaybackCtrlService_set_offset_y_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_set_offset_y_presult__isset;

class PlaybackCtrlService_set_offset_y_presult {
 public:


  virtual ~PlaybackCtrlService_set_offset_y_presult() throw() {}

  int32_t* success;

  _PlaybackCtrlService_set_offset_y_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PlaybackCtrlService_set_image_width_args__isset {
  _PlaybackCtrlService_set_image_width_args__isset() : width(false) {}
  bool width;
} _PlaybackCtrlService_set_image_width_args__isset;

class PlaybackCtrlService_set_image_width_args {
 public:

  PlaybackCtrlService_set_image_width_args() : width(0) {
  }

  virtual ~PlaybackCtrlService_set_image_width_args() throw() {}

  int32_t width;

  _PlaybackCtrlService_set_image_width_args__isset __isset;

  void __set_width(const int32_t val) {
    width = val;
  }

  bool operator == (const PlaybackCtrlService_set_image_width_args & rhs) const
  {
    if (!(width == rhs.width))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_set_image_width_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_set_image_width_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_set_image_width_pargs {
 public:


  virtual ~PlaybackCtrlService_set_image_width_pargs() throw() {}

  const int32_t* width;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_set_image_width_result__isset {
  _PlaybackCtrlService_set_image_width_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_set_image_width_result__isset;

class PlaybackCtrlService_set_image_width_result {
 public:

  PlaybackCtrlService_set_image_width_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_set_image_width_result() throw() {}

  int32_t success;

  _PlaybackCtrlService_set_image_width_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_set_image_width_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_set_image_width_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_set_image_width_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_set_image_width_presult__isset {
  _PlaybackCtrlService_set_image_width_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_set_image_width_presult__isset;

class PlaybackCtrlService_set_image_width_presult {
 public:


  virtual ~PlaybackCtrlService_set_image_width_presult() throw() {}

  int32_t* success;

  _PlaybackCtrlService_set_image_width_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PlaybackCtrlService_set_image_height_args__isset {
  _PlaybackCtrlService_set_image_height_args__isset() : height(false) {}
  bool height;
} _PlaybackCtrlService_set_image_height_args__isset;

class PlaybackCtrlService_set_image_height_args {
 public:

  PlaybackCtrlService_set_image_height_args() : height(0) {
  }

  virtual ~PlaybackCtrlService_set_image_height_args() throw() {}

  int32_t height;

  _PlaybackCtrlService_set_image_height_args__isset __isset;

  void __set_height(const int32_t val) {
    height = val;
  }

  bool operator == (const PlaybackCtrlService_set_image_height_args & rhs) const
  {
    if (!(height == rhs.height))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_set_image_height_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_set_image_height_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_set_image_height_pargs {
 public:


  virtual ~PlaybackCtrlService_set_image_height_pargs() throw() {}

  const int32_t* height;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_set_image_height_result__isset {
  _PlaybackCtrlService_set_image_height_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_set_image_height_result__isset;

class PlaybackCtrlService_set_image_height_result {
 public:

  PlaybackCtrlService_set_image_height_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_set_image_height_result() throw() {}

  int32_t success;

  _PlaybackCtrlService_set_image_height_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_set_image_height_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_set_image_height_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_set_image_height_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_set_image_height_presult__isset {
  _PlaybackCtrlService_set_image_height_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_set_image_height_presult__isset;

class PlaybackCtrlService_set_image_height_presult {
 public:


  virtual ~PlaybackCtrlService_set_image_height_presult() throw() {}

  int32_t* success;

  _PlaybackCtrlService_set_image_height_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PlaybackCtrlService_get_exposure_time_args {
 public:

  PlaybackCtrlService_get_exposure_time_args() {
  }

  virtual ~PlaybackCtrlService_get_exposure_time_args() throw() {}


  bool operator == (const PlaybackCtrlService_get_exposure_time_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_exposure_time_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_exposure_time_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_get_exposure_time_pargs {
 public:


  virtual ~PlaybackCtrlService_get_exposure_time_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_exposure_time_result__isset {
  _PlaybackCtrlService_get_exposure_time_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_exposure_time_result__isset;

class PlaybackCtrlService_get_exposure_time_result {
 public:

  PlaybackCtrlService_get_exposure_time_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_get_exposure_time_result() throw() {}

  double success;

  _PlaybackCtrlService_get_exposure_time_result__isset __isset;

  void __set_success(const double val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_get_exposure_time_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_exposure_time_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_exposure_time_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_exposure_time_presult__isset {
  _PlaybackCtrlService_get_exposure_time_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_exposure_time_presult__isset;

class PlaybackCtrlService_get_exposure_time_presult {
 public:


  virtual ~PlaybackCtrlService_get_exposure_time_presult() throw() {}

  double* success;

  _PlaybackCtrlService_get_exposure_time_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PlaybackCtrlService_get_gain_by_sensor_all_args {
 public:

  PlaybackCtrlService_get_gain_by_sensor_all_args() {
  }

  virtual ~PlaybackCtrlService_get_gain_by_sensor_all_args() throw() {}


  bool operator == (const PlaybackCtrlService_get_gain_by_sensor_all_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_gain_by_sensor_all_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_gain_by_sensor_all_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_get_gain_by_sensor_all_pargs {
 public:


  virtual ~PlaybackCtrlService_get_gain_by_sensor_all_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_gain_by_sensor_all_result__isset {
  _PlaybackCtrlService_get_gain_by_sensor_all_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_gain_by_sensor_all_result__isset;

class PlaybackCtrlService_get_gain_by_sensor_all_result {
 public:

  PlaybackCtrlService_get_gain_by_sensor_all_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_get_gain_by_sensor_all_result() throw() {}

  double success;

  _PlaybackCtrlService_get_gain_by_sensor_all_result__isset __isset;

  void __set_success(const double val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_get_gain_by_sensor_all_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_gain_by_sensor_all_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_gain_by_sensor_all_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_gain_by_sensor_all_presult__isset {
  _PlaybackCtrlService_get_gain_by_sensor_all_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_gain_by_sensor_all_presult__isset;

class PlaybackCtrlService_get_gain_by_sensor_all_presult {
 public:


  virtual ~PlaybackCtrlService_get_gain_by_sensor_all_presult() throw() {}

  double* success;

  _PlaybackCtrlService_get_gain_by_sensor_all_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PlaybackCtrlService_get_gain_by_sensor_analog_args {
 public:

  PlaybackCtrlService_get_gain_by_sensor_analog_args() {
  }

  virtual ~PlaybackCtrlService_get_gain_by_sensor_analog_args() throw() {}


  bool operator == (const PlaybackCtrlService_get_gain_by_sensor_analog_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_gain_by_sensor_analog_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_gain_by_sensor_analog_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_get_gain_by_sensor_analog_pargs {
 public:


  virtual ~PlaybackCtrlService_get_gain_by_sensor_analog_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_gain_by_sensor_analog_result__isset {
  _PlaybackCtrlService_get_gain_by_sensor_analog_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_gain_by_sensor_analog_result__isset;

class PlaybackCtrlService_get_gain_by_sensor_analog_result {
 public:

  PlaybackCtrlService_get_gain_by_sensor_analog_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_get_gain_by_sensor_analog_result() throw() {}

  double success;

  _PlaybackCtrlService_get_gain_by_sensor_analog_result__isset __isset;

  void __set_success(const double val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_get_gain_by_sensor_analog_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_gain_by_sensor_analog_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_gain_by_sensor_analog_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_gain_by_sensor_analog_presult__isset {
  _PlaybackCtrlService_get_gain_by_sensor_analog_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_gain_by_sensor_analog_presult__isset;

class PlaybackCtrlService_get_gain_by_sensor_analog_presult {
 public:


  virtual ~PlaybackCtrlService_get_gain_by_sensor_analog_presult() throw() {}

  double* success;

  _PlaybackCtrlService_get_gain_by_sensor_analog_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PlaybackCtrlService_get_gain_by_sensor_digital_args {
 public:

  PlaybackCtrlService_get_gain_by_sensor_digital_args() {
  }

  virtual ~PlaybackCtrlService_get_gain_by_sensor_digital_args() throw() {}


  bool operator == (const PlaybackCtrlService_get_gain_by_sensor_digital_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_gain_by_sensor_digital_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_gain_by_sensor_digital_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_get_gain_by_sensor_digital_pargs {
 public:


  virtual ~PlaybackCtrlService_get_gain_by_sensor_digital_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_gain_by_sensor_digital_result__isset {
  _PlaybackCtrlService_get_gain_by_sensor_digital_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_gain_by_sensor_digital_result__isset;

class PlaybackCtrlService_get_gain_by_sensor_digital_result {
 public:

  PlaybackCtrlService_get_gain_by_sensor_digital_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_get_gain_by_sensor_digital_result() throw() {}

  double success;

  _PlaybackCtrlService_get_gain_by_sensor_digital_result__isset __isset;

  void __set_success(const double val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_get_gain_by_sensor_digital_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_gain_by_sensor_digital_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_gain_by_sensor_digital_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_gain_by_sensor_digital_presult__isset {
  _PlaybackCtrlService_get_gain_by_sensor_digital_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_gain_by_sensor_digital_presult__isset;

class PlaybackCtrlService_get_gain_by_sensor_digital_presult {
 public:


  virtual ~PlaybackCtrlService_get_gain_by_sensor_digital_presult() throw() {}

  double* success;

  _PlaybackCtrlService_get_gain_by_sensor_digital_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PlaybackCtrlService_get_frame_rate_args {
 public:

  PlaybackCtrlService_get_frame_rate_args() {
  }

  virtual ~PlaybackCtrlService_get_frame_rate_args() throw() {}


  bool operator == (const PlaybackCtrlService_get_frame_rate_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_frame_rate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_frame_rate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_get_frame_rate_pargs {
 public:


  virtual ~PlaybackCtrlService_get_frame_rate_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_frame_rate_result__isset {
  _PlaybackCtrlService_get_frame_rate_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_frame_rate_result__isset;

class PlaybackCtrlService_get_frame_rate_result {
 public:

  PlaybackCtrlService_get_frame_rate_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_get_frame_rate_result() throw() {}

  double success;

  _PlaybackCtrlService_get_frame_rate_result__isset __isset;

  void __set_success(const double val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_get_frame_rate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_frame_rate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_frame_rate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_frame_rate_presult__isset {
  _PlaybackCtrlService_get_frame_rate_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_frame_rate_presult__isset;

class PlaybackCtrlService_get_frame_rate_presult {
 public:


  virtual ~PlaybackCtrlService_get_frame_rate_presult() throw() {}

  double* success;

  _PlaybackCtrlService_get_frame_rate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PlaybackCtrlService_get_exposure_time_range_args {
 public:

  PlaybackCtrlService_get_exposure_time_range_args() {
  }

  virtual ~PlaybackCtrlService_get_exposure_time_range_args() throw() {}


  bool operator == (const PlaybackCtrlService_get_exposure_time_range_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_exposure_time_range_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_exposure_time_range_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_get_exposure_time_range_pargs {
 public:


  virtual ~PlaybackCtrlService_get_exposure_time_range_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_exposure_time_range_result__isset {
  _PlaybackCtrlService_get_exposure_time_range_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_exposure_time_range_result__isset;

class PlaybackCtrlService_get_exposure_time_range_result {
 public:

  PlaybackCtrlService_get_exposure_time_range_result() {
  }

  virtual ~PlaybackCtrlService_get_exposure_time_range_result() throw() {}

  MinMaxStruct success;

  _PlaybackCtrlService_get_exposure_time_range_result__isset __isset;

  void __set_success(const MinMaxStruct& val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_get_exposure_time_range_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_exposure_time_range_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_exposure_time_range_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_exposure_time_range_presult__isset {
  _PlaybackCtrlService_get_exposure_time_range_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_exposure_time_range_presult__isset;

class PlaybackCtrlService_get_exposure_time_range_presult {
 public:


  virtual ~PlaybackCtrlService_get_exposure_time_range_presult() throw() {}

  MinMaxStruct* success;

  _PlaybackCtrlService_get_exposure_time_range_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PlaybackCtrlService_get_gain_range_by_sensor_all_args {
 public:

  PlaybackCtrlService_get_gain_range_by_sensor_all_args() {
  }

  virtual ~PlaybackCtrlService_get_gain_range_by_sensor_all_args() throw() {}


  bool operator == (const PlaybackCtrlService_get_gain_range_by_sensor_all_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_gain_range_by_sensor_all_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_gain_range_by_sensor_all_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_get_gain_range_by_sensor_all_pargs {
 public:


  virtual ~PlaybackCtrlService_get_gain_range_by_sensor_all_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_gain_range_by_sensor_all_result__isset {
  _PlaybackCtrlService_get_gain_range_by_sensor_all_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_gain_range_by_sensor_all_result__isset;

class PlaybackCtrlService_get_gain_range_by_sensor_all_result {
 public:

  PlaybackCtrlService_get_gain_range_by_sensor_all_result() {
  }

  virtual ~PlaybackCtrlService_get_gain_range_by_sensor_all_result() throw() {}

  MinMaxStruct success;

  _PlaybackCtrlService_get_gain_range_by_sensor_all_result__isset __isset;

  void __set_success(const MinMaxStruct& val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_get_gain_range_by_sensor_all_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_gain_range_by_sensor_all_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_gain_range_by_sensor_all_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_gain_range_by_sensor_all_presult__isset {
  _PlaybackCtrlService_get_gain_range_by_sensor_all_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_gain_range_by_sensor_all_presult__isset;

class PlaybackCtrlService_get_gain_range_by_sensor_all_presult {
 public:


  virtual ~PlaybackCtrlService_get_gain_range_by_sensor_all_presult() throw() {}

  MinMaxStruct* success;

  _PlaybackCtrlService_get_gain_range_by_sensor_all_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PlaybackCtrlService_get_gain_range_by_sensor_analog_args {
 public:

  PlaybackCtrlService_get_gain_range_by_sensor_analog_args() {
  }

  virtual ~PlaybackCtrlService_get_gain_range_by_sensor_analog_args() throw() {}


  bool operator == (const PlaybackCtrlService_get_gain_range_by_sensor_analog_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_gain_range_by_sensor_analog_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_gain_range_by_sensor_analog_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_get_gain_range_by_sensor_analog_pargs {
 public:


  virtual ~PlaybackCtrlService_get_gain_range_by_sensor_analog_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_gain_range_by_sensor_analog_result__isset {
  _PlaybackCtrlService_get_gain_range_by_sensor_analog_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_gain_range_by_sensor_analog_result__isset;

class PlaybackCtrlService_get_gain_range_by_sensor_analog_result {
 public:

  PlaybackCtrlService_get_gain_range_by_sensor_analog_result() {
  }

  virtual ~PlaybackCtrlService_get_gain_range_by_sensor_analog_result() throw() {}

  MinMaxStruct success;

  _PlaybackCtrlService_get_gain_range_by_sensor_analog_result__isset __isset;

  void __set_success(const MinMaxStruct& val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_get_gain_range_by_sensor_analog_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_gain_range_by_sensor_analog_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_gain_range_by_sensor_analog_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_gain_range_by_sensor_analog_presult__isset {
  _PlaybackCtrlService_get_gain_range_by_sensor_analog_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_gain_range_by_sensor_analog_presult__isset;

class PlaybackCtrlService_get_gain_range_by_sensor_analog_presult {
 public:


  virtual ~PlaybackCtrlService_get_gain_range_by_sensor_analog_presult() throw() {}

  MinMaxStruct* success;

  _PlaybackCtrlService_get_gain_range_by_sensor_analog_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PlaybackCtrlService_get_gain_range_by_sensor_digital_args {
 public:

  PlaybackCtrlService_get_gain_range_by_sensor_digital_args() {
  }

  virtual ~PlaybackCtrlService_get_gain_range_by_sensor_digital_args() throw() {}


  bool operator == (const PlaybackCtrlService_get_gain_range_by_sensor_digital_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_gain_range_by_sensor_digital_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_gain_range_by_sensor_digital_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_get_gain_range_by_sensor_digital_pargs {
 public:


  virtual ~PlaybackCtrlService_get_gain_range_by_sensor_digital_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_gain_range_by_sensor_digital_result__isset {
  _PlaybackCtrlService_get_gain_range_by_sensor_digital_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_gain_range_by_sensor_digital_result__isset;

class PlaybackCtrlService_get_gain_range_by_sensor_digital_result {
 public:

  PlaybackCtrlService_get_gain_range_by_sensor_digital_result() {
  }

  virtual ~PlaybackCtrlService_get_gain_range_by_sensor_digital_result() throw() {}

  MinMaxStruct success;

  _PlaybackCtrlService_get_gain_range_by_sensor_digital_result__isset __isset;

  void __set_success(const MinMaxStruct& val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_get_gain_range_by_sensor_digital_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_gain_range_by_sensor_digital_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_gain_range_by_sensor_digital_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_gain_range_by_sensor_digital_presult__isset {
  _PlaybackCtrlService_get_gain_range_by_sensor_digital_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_gain_range_by_sensor_digital_presult__isset;

class PlaybackCtrlService_get_gain_range_by_sensor_digital_presult {
 public:


  virtual ~PlaybackCtrlService_get_gain_range_by_sensor_digital_presult() throw() {}

  MinMaxStruct* success;

  _PlaybackCtrlService_get_gain_range_by_sensor_digital_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PlaybackCtrlService_get_frame_rate_range_args {
 public:

  PlaybackCtrlService_get_frame_rate_range_args() {
  }

  virtual ~PlaybackCtrlService_get_frame_rate_range_args() throw() {}


  bool operator == (const PlaybackCtrlService_get_frame_rate_range_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_frame_rate_range_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_frame_rate_range_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_get_frame_rate_range_pargs {
 public:


  virtual ~PlaybackCtrlService_get_frame_rate_range_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_frame_rate_range_result__isset {
  _PlaybackCtrlService_get_frame_rate_range_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_frame_rate_range_result__isset;

class PlaybackCtrlService_get_frame_rate_range_result {
 public:

  PlaybackCtrlService_get_frame_rate_range_result() {
  }

  virtual ~PlaybackCtrlService_get_frame_rate_range_result() throw() {}

  MinMaxStruct success;

  _PlaybackCtrlService_get_frame_rate_range_result__isset __isset;

  void __set_success(const MinMaxStruct& val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_get_frame_rate_range_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_frame_rate_range_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_frame_rate_range_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_frame_rate_range_presult__isset {
  _PlaybackCtrlService_get_frame_rate_range_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_frame_rate_range_presult__isset;

class PlaybackCtrlService_get_frame_rate_range_presult {
 public:


  virtual ~PlaybackCtrlService_get_frame_rate_range_presult() throw() {}

  MinMaxStruct* success;

  _PlaybackCtrlService_get_frame_rate_range_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PlaybackCtrlService_get_image_width_args {
 public:

  PlaybackCtrlService_get_image_width_args() {
  }

  virtual ~PlaybackCtrlService_get_image_width_args() throw() {}


  bool operator == (const PlaybackCtrlService_get_image_width_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_image_width_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_image_width_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_get_image_width_pargs {
 public:


  virtual ~PlaybackCtrlService_get_image_width_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_image_width_result__isset {
  _PlaybackCtrlService_get_image_width_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_image_width_result__isset;

class PlaybackCtrlService_get_image_width_result {
 public:

  PlaybackCtrlService_get_image_width_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_get_image_width_result() throw() {}

  int32_t success;

  _PlaybackCtrlService_get_image_width_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_get_image_width_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_image_width_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_image_width_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_image_width_presult__isset {
  _PlaybackCtrlService_get_image_width_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_image_width_presult__isset;

class PlaybackCtrlService_get_image_width_presult {
 public:


  virtual ~PlaybackCtrlService_get_image_width_presult() throw() {}

  int32_t* success;

  _PlaybackCtrlService_get_image_width_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PlaybackCtrlService_get_image_height_args {
 public:

  PlaybackCtrlService_get_image_height_args() {
  }

  virtual ~PlaybackCtrlService_get_image_height_args() throw() {}


  bool operator == (const PlaybackCtrlService_get_image_height_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_image_height_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_image_height_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_get_image_height_pargs {
 public:


  virtual ~PlaybackCtrlService_get_image_height_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_image_height_result__isset {
  _PlaybackCtrlService_get_image_height_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_image_height_result__isset;

class PlaybackCtrlService_get_image_height_result {
 public:

  PlaybackCtrlService_get_image_height_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_get_image_height_result() throw() {}

  int32_t success;

  _PlaybackCtrlService_get_image_height_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_get_image_height_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_image_height_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_image_height_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_image_height_presult__isset {
  _PlaybackCtrlService_get_image_height_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_image_height_presult__isset;

class PlaybackCtrlService_get_image_height_presult {
 public:


  virtual ~PlaybackCtrlService_get_image_height_presult() throw() {}

  int32_t* success;

  _PlaybackCtrlService_get_image_height_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PlaybackCtrlService_get_height_max_args {
 public:

  PlaybackCtrlService_get_height_max_args() {
  }

  virtual ~PlaybackCtrlService_get_height_max_args() throw() {}


  bool operator == (const PlaybackCtrlService_get_height_max_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_height_max_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_height_max_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_get_height_max_pargs {
 public:


  virtual ~PlaybackCtrlService_get_height_max_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_height_max_result__isset {
  _PlaybackCtrlService_get_height_max_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_height_max_result__isset;

class PlaybackCtrlService_get_height_max_result {
 public:

  PlaybackCtrlService_get_height_max_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_get_height_max_result() throw() {}

  int32_t success;

  _PlaybackCtrlService_get_height_max_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_get_height_max_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_height_max_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_height_max_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_height_max_presult__isset {
  _PlaybackCtrlService_get_height_max_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_height_max_presult__isset;

class PlaybackCtrlService_get_height_max_presult {
 public:


  virtual ~PlaybackCtrlService_get_height_max_presult() throw() {}

  int32_t* success;

  _PlaybackCtrlService_get_height_max_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PlaybackCtrlService_get_width_max_args {
 public:

  PlaybackCtrlService_get_width_max_args() {
  }

  virtual ~PlaybackCtrlService_get_width_max_args() throw() {}


  bool operator == (const PlaybackCtrlService_get_width_max_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_width_max_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_width_max_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_get_width_max_pargs {
 public:


  virtual ~PlaybackCtrlService_get_width_max_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_width_max_result__isset {
  _PlaybackCtrlService_get_width_max_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_width_max_result__isset;

class PlaybackCtrlService_get_width_max_result {
 public:

  PlaybackCtrlService_get_width_max_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_get_width_max_result() throw() {}

  int32_t success;

  _PlaybackCtrlService_get_width_max_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_get_width_max_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_width_max_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_width_max_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_width_max_presult__isset {
  _PlaybackCtrlService_get_width_max_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_width_max_presult__isset;

class PlaybackCtrlService_get_width_max_presult {
 public:


  virtual ~PlaybackCtrlService_get_width_max_presult() throw() {}

  int32_t* success;

  _PlaybackCtrlService_get_width_max_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PlaybackCtrlService_get_offset_x_args {
 public:

  PlaybackCtrlService_get_offset_x_args() {
  }

  virtual ~PlaybackCtrlService_get_offset_x_args() throw() {}


  bool operator == (const PlaybackCtrlService_get_offset_x_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_offset_x_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_offset_x_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_get_offset_x_pargs {
 public:


  virtual ~PlaybackCtrlService_get_offset_x_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_offset_x_result__isset {
  _PlaybackCtrlService_get_offset_x_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_offset_x_result__isset;

class PlaybackCtrlService_get_offset_x_result {
 public:

  PlaybackCtrlService_get_offset_x_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_get_offset_x_result() throw() {}

  int32_t success;

  _PlaybackCtrlService_get_offset_x_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_get_offset_x_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_offset_x_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_offset_x_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_offset_x_presult__isset {
  _PlaybackCtrlService_get_offset_x_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_offset_x_presult__isset;

class PlaybackCtrlService_get_offset_x_presult {
 public:


  virtual ~PlaybackCtrlService_get_offset_x_presult() throw() {}

  int32_t* success;

  _PlaybackCtrlService_get_offset_x_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PlaybackCtrlService_get_offset_y_args {
 public:

  PlaybackCtrlService_get_offset_y_args() {
  }

  virtual ~PlaybackCtrlService_get_offset_y_args() throw() {}


  bool operator == (const PlaybackCtrlService_get_offset_y_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_offset_y_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_offset_y_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_get_offset_y_pargs {
 public:


  virtual ~PlaybackCtrlService_get_offset_y_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_offset_y_result__isset {
  _PlaybackCtrlService_get_offset_y_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_offset_y_result__isset;

class PlaybackCtrlService_get_offset_y_result {
 public:

  PlaybackCtrlService_get_offset_y_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_get_offset_y_result() throw() {}

  int32_t success;

  _PlaybackCtrlService_get_offset_y_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_get_offset_y_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_offset_y_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_offset_y_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_offset_y_presult__isset {
  _PlaybackCtrlService_get_offset_y_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_offset_y_presult__isset;

class PlaybackCtrlService_get_offset_y_presult {
 public:


  virtual ~PlaybackCtrlService_get_offset_y_presult() throw() {}

  int32_t* success;

  _PlaybackCtrlService_get_offset_y_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PlaybackCtrlService_is_enabled_turbo_transfer_args {
 public:

  PlaybackCtrlService_is_enabled_turbo_transfer_args() {
  }

  virtual ~PlaybackCtrlService_is_enabled_turbo_transfer_args() throw() {}


  bool operator == (const PlaybackCtrlService_is_enabled_turbo_transfer_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PlaybackCtrlService_is_enabled_turbo_transfer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_is_enabled_turbo_transfer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_is_enabled_turbo_transfer_pargs {
 public:


  virtual ~PlaybackCtrlService_is_enabled_turbo_transfer_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_is_enabled_turbo_transfer_result__isset {
  _PlaybackCtrlService_is_enabled_turbo_transfer_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_is_enabled_turbo_transfer_result__isset;

class PlaybackCtrlService_is_enabled_turbo_transfer_result {
 public:

  PlaybackCtrlService_is_enabled_turbo_transfer_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_is_enabled_turbo_transfer_result() throw() {}

  int32_t success;

  _PlaybackCtrlService_is_enabled_turbo_transfer_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_is_enabled_turbo_transfer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_is_enabled_turbo_transfer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_is_enabled_turbo_transfer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_is_enabled_turbo_transfer_presult__isset {
  _PlaybackCtrlService_is_enabled_turbo_transfer_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_is_enabled_turbo_transfer_presult__isset;

class PlaybackCtrlService_is_enabled_turbo_transfer_presult {
 public:


  virtual ~PlaybackCtrlService_is_enabled_turbo_transfer_presult() throw() {}

  int32_t* success;

  _PlaybackCtrlService_is_enabled_turbo_transfer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PlaybackCtrlService_get_pixel_fmt_args {
 public:

  PlaybackCtrlService_get_pixel_fmt_args() {
  }

  virtual ~PlaybackCtrlService_get_pixel_fmt_args() throw() {}


  bool operator == (const PlaybackCtrlService_get_pixel_fmt_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_pixel_fmt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_pixel_fmt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_get_pixel_fmt_pargs {
 public:


  virtual ~PlaybackCtrlService_get_pixel_fmt_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_pixel_fmt_result__isset {
  _PlaybackCtrlService_get_pixel_fmt_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_pixel_fmt_result__isset;

class PlaybackCtrlService_get_pixel_fmt_result {
 public:

  PlaybackCtrlService_get_pixel_fmt_result() : success() {
  }

  virtual ~PlaybackCtrlService_get_pixel_fmt_result() throw() {}

  std::string success;

  _PlaybackCtrlService_get_pixel_fmt_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_get_pixel_fmt_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_pixel_fmt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_pixel_fmt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_pixel_fmt_presult__isset {
  _PlaybackCtrlService_get_pixel_fmt_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_pixel_fmt_presult__isset;

class PlaybackCtrlService_get_pixel_fmt_presult {
 public:


  virtual ~PlaybackCtrlService_get_pixel_fmt_presult() throw() {}

  std::string* success;

  _PlaybackCtrlService_get_pixel_fmt_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PlaybackCtrlService_get_user_defined_name_args {
 public:

  PlaybackCtrlService_get_user_defined_name_args() {
  }

  virtual ~PlaybackCtrlService_get_user_defined_name_args() throw() {}


  bool operator == (const PlaybackCtrlService_get_user_defined_name_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_user_defined_name_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_user_defined_name_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_get_user_defined_name_pargs {
 public:


  virtual ~PlaybackCtrlService_get_user_defined_name_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_user_defined_name_result__isset {
  _PlaybackCtrlService_get_user_defined_name_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_user_defined_name_result__isset;

class PlaybackCtrlService_get_user_defined_name_result {
 public:

  PlaybackCtrlService_get_user_defined_name_result() : success() {
  }

  virtual ~PlaybackCtrlService_get_user_defined_name_result() throw() {}

  std::string success;

  _PlaybackCtrlService_get_user_defined_name_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_get_user_defined_name_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_user_defined_name_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_user_defined_name_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_user_defined_name_presult__isset {
  _PlaybackCtrlService_get_user_defined_name_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_user_defined_name_presult__isset;

class PlaybackCtrlService_get_user_defined_name_presult {
 public:


  virtual ~PlaybackCtrlService_get_user_defined_name_presult() throw() {}

  std::string* success;

  _PlaybackCtrlService_get_user_defined_name_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PlaybackCtrlService_get_device_serial_number_args {
 public:

  PlaybackCtrlService_get_device_serial_number_args() {
  }

  virtual ~PlaybackCtrlService_get_device_serial_number_args() throw() {}


  bool operator == (const PlaybackCtrlService_get_device_serial_number_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_device_serial_number_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_device_serial_number_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_get_device_serial_number_pargs {
 public:


  virtual ~PlaybackCtrlService_get_device_serial_number_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_device_serial_number_result__isset {
  _PlaybackCtrlService_get_device_serial_number_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_device_serial_number_result__isset;

class PlaybackCtrlService_get_device_serial_number_result {
 public:

  PlaybackCtrlService_get_device_serial_number_result() : success() {
  }

  virtual ~PlaybackCtrlService_get_device_serial_number_result() throw() {}

  std::string success;

  _PlaybackCtrlService_get_device_serial_number_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_get_device_serial_number_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_device_serial_number_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_device_serial_number_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_device_serial_number_presult__isset {
  _PlaybackCtrlService_get_device_serial_number_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_device_serial_number_presult__isset;

class PlaybackCtrlService_get_device_serial_number_presult {
 public:


  virtual ~PlaybackCtrlService_get_device_serial_number_presult() throw() {}

  std::string* success;

  _PlaybackCtrlService_get_device_serial_number_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PlaybackCtrlService_get_current_ip_address_args {
 public:

  PlaybackCtrlService_get_current_ip_address_args() {
  }

  virtual ~PlaybackCtrlService_get_current_ip_address_args() throw() {}


  bool operator == (const PlaybackCtrlService_get_current_ip_address_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_current_ip_address_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_current_ip_address_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_get_current_ip_address_pargs {
 public:


  virtual ~PlaybackCtrlService_get_current_ip_address_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_current_ip_address_result__isset {
  _PlaybackCtrlService_get_current_ip_address_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_current_ip_address_result__isset;

class PlaybackCtrlService_get_current_ip_address_result {
 public:

  PlaybackCtrlService_get_current_ip_address_result() : success() {
  }

  virtual ~PlaybackCtrlService_get_current_ip_address_result() throw() {}

  std::string success;

  _PlaybackCtrlService_get_current_ip_address_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_get_current_ip_address_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_current_ip_address_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_current_ip_address_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_current_ip_address_presult__isset {
  _PlaybackCtrlService_get_current_ip_address_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_current_ip_address_presult__isset;

class PlaybackCtrlService_get_current_ip_address_presult {
 public:


  virtual ~PlaybackCtrlService_get_current_ip_address_presult() throw() {}

  std::string* success;

  _PlaybackCtrlService_get_current_ip_address_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PlaybackCtrlService_get_grab_fps_args {
 public:

  PlaybackCtrlService_get_grab_fps_args() {
  }

  virtual ~PlaybackCtrlService_get_grab_fps_args() throw() {}


  bool operator == (const PlaybackCtrlService_get_grab_fps_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_grab_fps_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_grab_fps_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_get_grab_fps_pargs {
 public:


  virtual ~PlaybackCtrlService_get_grab_fps_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_grab_fps_result__isset {
  _PlaybackCtrlService_get_grab_fps_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_grab_fps_result__isset;

class PlaybackCtrlService_get_grab_fps_result {
 public:

  PlaybackCtrlService_get_grab_fps_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_get_grab_fps_result() throw() {}

  double success;

  _PlaybackCtrlService_get_grab_fps_result__isset __isset;

  void __set_success(const double val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_get_grab_fps_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_grab_fps_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_grab_fps_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_grab_fps_presult__isset {
  _PlaybackCtrlService_get_grab_fps_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_grab_fps_presult__isset;

class PlaybackCtrlService_get_grab_fps_presult {
 public:


  virtual ~PlaybackCtrlService_get_grab_fps_presult() throw() {}

  double* success;

  _PlaybackCtrlService_get_grab_fps_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PlaybackCtrlService_get_process_fps_args {
 public:

  PlaybackCtrlService_get_process_fps_args() {
  }

  virtual ~PlaybackCtrlService_get_process_fps_args() throw() {}


  bool operator == (const PlaybackCtrlService_get_process_fps_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_process_fps_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_process_fps_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_get_process_fps_pargs {
 public:


  virtual ~PlaybackCtrlService_get_process_fps_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_process_fps_result__isset {
  _PlaybackCtrlService_get_process_fps_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_process_fps_result__isset;

class PlaybackCtrlService_get_process_fps_result {
 public:

  PlaybackCtrlService_get_process_fps_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_get_process_fps_result() throw() {}

  double success;

  _PlaybackCtrlService_get_process_fps_result__isset __isset;

  void __set_success(const double val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_get_process_fps_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_get_process_fps_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_get_process_fps_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_get_process_fps_presult__isset {
  _PlaybackCtrlService_get_process_fps_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_get_process_fps_presult__isset;

class PlaybackCtrlService_get_process_fps_presult {
 public:


  virtual ~PlaybackCtrlService_get_process_fps_presult() throw() {}

  double* success;

  _PlaybackCtrlService_get_process_fps_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PlaybackCtrlService_save_feature_args {
 public:

  PlaybackCtrlService_save_feature_args() {
  }

  virtual ~PlaybackCtrlService_save_feature_args() throw() {}


  bool operator == (const PlaybackCtrlService_save_feature_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PlaybackCtrlService_save_feature_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_save_feature_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_save_feature_pargs {
 public:


  virtual ~PlaybackCtrlService_save_feature_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_save_feature_result__isset {
  _PlaybackCtrlService_save_feature_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_save_feature_result__isset;

class PlaybackCtrlService_save_feature_result {
 public:

  PlaybackCtrlService_save_feature_result() : success() {
  }

  virtual ~PlaybackCtrlService_save_feature_result() throw() {}

  std::string success;

  _PlaybackCtrlService_save_feature_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_save_feature_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_save_feature_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_save_feature_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_save_feature_presult__isset {
  _PlaybackCtrlService_save_feature_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_save_feature_presult__isset;

class PlaybackCtrlService_save_feature_presult {
 public:


  virtual ~PlaybackCtrlService_save_feature_presult() throw() {}

  std::string* success;

  _PlaybackCtrlService_save_feature_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PlaybackCtrlService_update_feature_args__isset {
  _PlaybackCtrlService_update_feature_args__isset() : content(false) {}
  bool content;
} _PlaybackCtrlService_update_feature_args__isset;

class PlaybackCtrlService_update_feature_args {
 public:

  PlaybackCtrlService_update_feature_args() : content() {
  }

  virtual ~PlaybackCtrlService_update_feature_args() throw() {}

  std::string content;

  _PlaybackCtrlService_update_feature_args__isset __isset;

  void __set_content(const std::string& val) {
    content = val;
  }

  bool operator == (const PlaybackCtrlService_update_feature_args & rhs) const
  {
    if (!(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_update_feature_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_update_feature_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PlaybackCtrlService_update_feature_pargs {
 public:


  virtual ~PlaybackCtrlService_update_feature_pargs() throw() {}

  const std::string* content;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_update_feature_result__isset {
  _PlaybackCtrlService_update_feature_result__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_update_feature_result__isset;

class PlaybackCtrlService_update_feature_result {
 public:

  PlaybackCtrlService_update_feature_result() : success(0) {
  }

  virtual ~PlaybackCtrlService_update_feature_result() throw() {}

  int32_t success;

  _PlaybackCtrlService_update_feature_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const PlaybackCtrlService_update_feature_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlaybackCtrlService_update_feature_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaybackCtrlService_update_feature_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PlaybackCtrlService_update_feature_presult__isset {
  _PlaybackCtrlService_update_feature_presult__isset() : success(false) {}
  bool success;
} _PlaybackCtrlService_update_feature_presult__isset;

class PlaybackCtrlService_update_feature_presult {
 public:


  virtual ~PlaybackCtrlService_update_feature_presult() throw() {}

  int32_t* success;

  _PlaybackCtrlService_update_feature_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class PlaybackCtrlServiceClient : virtual public PlaybackCtrlServiceIf {
 public:
  PlaybackCtrlServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  PlaybackCtrlServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t get_data_port();
  void send_get_data_port();
  int32_t recv_get_data_port();
  int32_t set_play_frame_rate(const int32_t play_frame_rate, const int32_t sample_gap);
  void send_set_play_frame_rate(const int32_t play_frame_rate, const int32_t sample_gap);
  int32_t recv_set_play_frame_rate();
  int32_t set_play_frame_resolution(const int32_t w, const int32_t h);
  void send_set_play_frame_resolution(const int32_t w, const int32_t h);
  int32_t recv_set_play_frame_resolution();
  int32_t set_store_file(const int32_t flag);
  void send_set_store_file(const int32_t flag);
  int32_t recv_set_store_file();
  int32_t start_grab();
  void send_start_grab();
  int32_t recv_start_grab();
  int32_t stop_grab();
  void send_stop_grab();
  int32_t recv_stop_grab();
  int32_t play_pause();
  void send_play_pause();
  int32_t recv_play_pause();
  int32_t play_live(const int32_t play_frame_rate, const int32_t sample_gap);
  void send_play_live(const int32_t play_frame_rate, const int32_t sample_gap);
  int32_t recv_play_live();
  int32_t play_forward(const int32_t play_frame_rate, const int32_t sample_gap);
  void send_play_forward(const int32_t play_frame_rate, const int32_t sample_gap);
  int32_t recv_play_forward();
  int32_t play_backward(const int32_t play_frame_rate, const int32_t sample_gap);
  void send_play_backward(const int32_t play_frame_rate, const int32_t sample_gap);
  int32_t recv_play_backward();
  int32_t play_from_a2b(const int64_t from, const int64_t to);
  void send_play_from_a2b(const int64_t from, const int64_t to);
  int32_t recv_play_from_a2b();
  double get_camera_grab_fps();
  void send_get_camera_grab_fps();
  double recv_get_camera_grab_fps();
  double get_soft_grab_fps();
  void send_get_soft_grab_fps();
  double recv_get_soft_grab_fps();
  double get_soft_snd_fps();
  void send_get_soft_snd_fps();
  double recv_get_soft_snd_fps();
  double get_file_write_fps();
  void send_get_file_write_fps();
  double recv_get_file_write_fps();
  int32_t set_exposure_time(const double microseconds);
  void send_set_exposure_time(const double microseconds);
  int32_t recv_set_exposure_time();
  int32_t set_gain_by_sensor_all(const double gain);
  void send_set_gain_by_sensor_all(const double gain);
  int32_t recv_set_gain_by_sensor_all();
  int32_t set_gain_by_sensor_analog(const double gain);
  void send_set_gain_by_sensor_analog(const double gain);
  int32_t recv_set_gain_by_sensor_analog();
  int32_t set_gain_by_sensor_digital(const double gain);
  void send_set_gain_by_sensor_digital(const double gain);
  int32_t recv_set_gain_by_sensor_digital();
  int32_t set_frame_rate(const double rate);
  void send_set_frame_rate(const double rate);
  int32_t recv_set_frame_rate();
  int32_t enable_turbo_transfer(const int32_t enabled);
  void send_enable_turbo_transfer(const int32_t enabled);
  int32_t recv_enable_turbo_transfer();
  int32_t set_pixel_fmt(const std::string& pixel_fmt);
  void send_set_pixel_fmt(const std::string& pixel_fmt);
  int32_t recv_set_pixel_fmt();
  int32_t set_offset_x(const int32_t offset_x);
  void send_set_offset_x(const int32_t offset_x);
  int32_t recv_set_offset_x();
  int32_t set_offset_y(const int32_t offset_y);
  void send_set_offset_y(const int32_t offset_y);
  int32_t recv_set_offset_y();
  int32_t set_image_width(const int32_t width);
  void send_set_image_width(const int32_t width);
  int32_t recv_set_image_width();
  int32_t set_image_height(const int32_t height);
  void send_set_image_height(const int32_t height);
  int32_t recv_set_image_height();
  double get_exposure_time();
  void send_get_exposure_time();
  double recv_get_exposure_time();
  double get_gain_by_sensor_all();
  void send_get_gain_by_sensor_all();
  double recv_get_gain_by_sensor_all();
  double get_gain_by_sensor_analog();
  void send_get_gain_by_sensor_analog();
  double recv_get_gain_by_sensor_analog();
  double get_gain_by_sensor_digital();
  void send_get_gain_by_sensor_digital();
  double recv_get_gain_by_sensor_digital();
  double get_frame_rate();
  void send_get_frame_rate();
  double recv_get_frame_rate();
  void get_exposure_time_range(MinMaxStruct& _return);
  void send_get_exposure_time_range();
  void recv_get_exposure_time_range(MinMaxStruct& _return);
  void get_gain_range_by_sensor_all(MinMaxStruct& _return);
  void send_get_gain_range_by_sensor_all();
  void recv_get_gain_range_by_sensor_all(MinMaxStruct& _return);
  void get_gain_range_by_sensor_analog(MinMaxStruct& _return);
  void send_get_gain_range_by_sensor_analog();
  void recv_get_gain_range_by_sensor_analog(MinMaxStruct& _return);
  void get_gain_range_by_sensor_digital(MinMaxStruct& _return);
  void send_get_gain_range_by_sensor_digital();
  void recv_get_gain_range_by_sensor_digital(MinMaxStruct& _return);
  void get_frame_rate_range(MinMaxStruct& _return);
  void send_get_frame_rate_range();
  void recv_get_frame_rate_range(MinMaxStruct& _return);
  int32_t get_image_width();
  void send_get_image_width();
  int32_t recv_get_image_width();
  int32_t get_image_height();
  void send_get_image_height();
  int32_t recv_get_image_height();
  int32_t get_height_max();
  void send_get_height_max();
  int32_t recv_get_height_max();
  int32_t get_width_max();
  void send_get_width_max();
  int32_t recv_get_width_max();
  int32_t get_offset_x();
  void send_get_offset_x();
  int32_t recv_get_offset_x();
  int32_t get_offset_y();
  void send_get_offset_y();
  int32_t recv_get_offset_y();
  int32_t is_enabled_turbo_transfer();
  void send_is_enabled_turbo_transfer();
  int32_t recv_is_enabled_turbo_transfer();
  void get_pixel_fmt(std::string& _return);
  void send_get_pixel_fmt();
  void recv_get_pixel_fmt(std::string& _return);
  void get_user_defined_name(std::string& _return);
  void send_get_user_defined_name();
  void recv_get_user_defined_name(std::string& _return);
  void get_device_serial_number(std::string& _return);
  void send_get_device_serial_number();
  void recv_get_device_serial_number(std::string& _return);
  void get_current_ip_address(std::string& _return);
  void send_get_current_ip_address();
  void recv_get_current_ip_address(std::string& _return);
  double get_grab_fps();
  void send_get_grab_fps();
  double recv_get_grab_fps();
  double get_process_fps();
  void send_get_process_fps();
  double recv_get_process_fps();
  void save_feature(std::string& _return);
  void send_save_feature();
  void recv_save_feature(std::string& _return);
  int32_t update_feature(const std::string& content);
  void send_update_feature(const std::string& content);
  int32_t recv_update_feature();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class PlaybackCtrlServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<PlaybackCtrlServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (PlaybackCtrlServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get_data_port(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_play_frame_rate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_play_frame_resolution(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_store_file(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_start_grab(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stop_grab(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_play_pause(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_play_live(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_play_forward(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_play_backward(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_play_from_a2b(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_camera_grab_fps(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_soft_grab_fps(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_soft_snd_fps(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_file_write_fps(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_exposure_time(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_gain_by_sensor_all(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_gain_by_sensor_analog(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_gain_by_sensor_digital(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_frame_rate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_enable_turbo_transfer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_pixel_fmt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_offset_x(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_offset_y(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_image_width(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_image_height(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_exposure_time(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_gain_by_sensor_all(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_gain_by_sensor_analog(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_gain_by_sensor_digital(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_frame_rate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_exposure_time_range(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_gain_range_by_sensor_all(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_gain_range_by_sensor_analog(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_gain_range_by_sensor_digital(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_frame_rate_range(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_image_width(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_image_height(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_height_max(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_width_max(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_offset_x(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_offset_y(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_is_enabled_turbo_transfer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_pixel_fmt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_user_defined_name(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_device_serial_number(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_current_ip_address(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_grab_fps(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_process_fps(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_save_feature(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update_feature(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  PlaybackCtrlServiceProcessor(boost::shared_ptr<PlaybackCtrlServiceIf> iface) :
    iface_(iface) {
    processMap_["get_data_port"] = &PlaybackCtrlServiceProcessor::process_get_data_port;
    processMap_["set_play_frame_rate"] = &PlaybackCtrlServiceProcessor::process_set_play_frame_rate;
    processMap_["set_play_frame_resolution"] = &PlaybackCtrlServiceProcessor::process_set_play_frame_resolution;
    processMap_["set_store_file"] = &PlaybackCtrlServiceProcessor::process_set_store_file;
    processMap_["start_grab"] = &PlaybackCtrlServiceProcessor::process_start_grab;
    processMap_["stop_grab"] = &PlaybackCtrlServiceProcessor::process_stop_grab;
    processMap_["play_pause"] = &PlaybackCtrlServiceProcessor::process_play_pause;
    processMap_["play_live"] = &PlaybackCtrlServiceProcessor::process_play_live;
    processMap_["play_forward"] = &PlaybackCtrlServiceProcessor::process_play_forward;
    processMap_["play_backward"] = &PlaybackCtrlServiceProcessor::process_play_backward;
    processMap_["play_from_a2b"] = &PlaybackCtrlServiceProcessor::process_play_from_a2b;
    processMap_["get_camera_grab_fps"] = &PlaybackCtrlServiceProcessor::process_get_camera_grab_fps;
    processMap_["get_soft_grab_fps"] = &PlaybackCtrlServiceProcessor::process_get_soft_grab_fps;
    processMap_["get_soft_snd_fps"] = &PlaybackCtrlServiceProcessor::process_get_soft_snd_fps;
    processMap_["get_file_write_fps"] = &PlaybackCtrlServiceProcessor::process_get_file_write_fps;
    processMap_["set_exposure_time"] = &PlaybackCtrlServiceProcessor::process_set_exposure_time;
    processMap_["set_gain_by_sensor_all"] = &PlaybackCtrlServiceProcessor::process_set_gain_by_sensor_all;
    processMap_["set_gain_by_sensor_analog"] = &PlaybackCtrlServiceProcessor::process_set_gain_by_sensor_analog;
    processMap_["set_gain_by_sensor_digital"] = &PlaybackCtrlServiceProcessor::process_set_gain_by_sensor_digital;
    processMap_["set_frame_rate"] = &PlaybackCtrlServiceProcessor::process_set_frame_rate;
    processMap_["enable_turbo_transfer"] = &PlaybackCtrlServiceProcessor::process_enable_turbo_transfer;
    processMap_["set_pixel_fmt"] = &PlaybackCtrlServiceProcessor::process_set_pixel_fmt;
    processMap_["set_offset_x"] = &PlaybackCtrlServiceProcessor::process_set_offset_x;
    processMap_["set_offset_y"] = &PlaybackCtrlServiceProcessor::process_set_offset_y;
    processMap_["set_image_width"] = &PlaybackCtrlServiceProcessor::process_set_image_width;
    processMap_["set_image_height"] = &PlaybackCtrlServiceProcessor::process_set_image_height;
    processMap_["get_exposure_time"] = &PlaybackCtrlServiceProcessor::process_get_exposure_time;
    processMap_["get_gain_by_sensor_all"] = &PlaybackCtrlServiceProcessor::process_get_gain_by_sensor_all;
    processMap_["get_gain_by_sensor_analog"] = &PlaybackCtrlServiceProcessor::process_get_gain_by_sensor_analog;
    processMap_["get_gain_by_sensor_digital"] = &PlaybackCtrlServiceProcessor::process_get_gain_by_sensor_digital;
    processMap_["get_frame_rate"] = &PlaybackCtrlServiceProcessor::process_get_frame_rate;
    processMap_["get_exposure_time_range"] = &PlaybackCtrlServiceProcessor::process_get_exposure_time_range;
    processMap_["get_gain_range_by_sensor_all"] = &PlaybackCtrlServiceProcessor::process_get_gain_range_by_sensor_all;
    processMap_["get_gain_range_by_sensor_analog"] = &PlaybackCtrlServiceProcessor::process_get_gain_range_by_sensor_analog;
    processMap_["get_gain_range_by_sensor_digital"] = &PlaybackCtrlServiceProcessor::process_get_gain_range_by_sensor_digital;
    processMap_["get_frame_rate_range"] = &PlaybackCtrlServiceProcessor::process_get_frame_rate_range;
    processMap_["get_image_width"] = &PlaybackCtrlServiceProcessor::process_get_image_width;
    processMap_["get_image_height"] = &PlaybackCtrlServiceProcessor::process_get_image_height;
    processMap_["get_height_max"] = &PlaybackCtrlServiceProcessor::process_get_height_max;
    processMap_["get_width_max"] = &PlaybackCtrlServiceProcessor::process_get_width_max;
    processMap_["get_offset_x"] = &PlaybackCtrlServiceProcessor::process_get_offset_x;
    processMap_["get_offset_y"] = &PlaybackCtrlServiceProcessor::process_get_offset_y;
    processMap_["is_enabled_turbo_transfer"] = &PlaybackCtrlServiceProcessor::process_is_enabled_turbo_transfer;
    processMap_["get_pixel_fmt"] = &PlaybackCtrlServiceProcessor::process_get_pixel_fmt;
    processMap_["get_user_defined_name"] = &PlaybackCtrlServiceProcessor::process_get_user_defined_name;
    processMap_["get_device_serial_number"] = &PlaybackCtrlServiceProcessor::process_get_device_serial_number;
    processMap_["get_current_ip_address"] = &PlaybackCtrlServiceProcessor::process_get_current_ip_address;
    processMap_["get_grab_fps"] = &PlaybackCtrlServiceProcessor::process_get_grab_fps;
    processMap_["get_process_fps"] = &PlaybackCtrlServiceProcessor::process_get_process_fps;
    processMap_["save_feature"] = &PlaybackCtrlServiceProcessor::process_save_feature;
    processMap_["update_feature"] = &PlaybackCtrlServiceProcessor::process_update_feature;
  }

  virtual ~PlaybackCtrlServiceProcessor() {}
};

class PlaybackCtrlServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  PlaybackCtrlServiceProcessorFactory(const ::boost::shared_ptr< PlaybackCtrlServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< PlaybackCtrlServiceIfFactory > handlerFactory_;
};

class PlaybackCtrlServiceMultiface : virtual public PlaybackCtrlServiceIf {
 public:
  PlaybackCtrlServiceMultiface(std::vector<boost::shared_ptr<PlaybackCtrlServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~PlaybackCtrlServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<PlaybackCtrlServiceIf> > ifaces_;
  PlaybackCtrlServiceMultiface() {}
  void add(boost::shared_ptr<PlaybackCtrlServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t get_data_port() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_data_port();
    }
    return ifaces_[i]->get_data_port();
  }

  int32_t set_play_frame_rate(const int32_t play_frame_rate, const int32_t sample_gap) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_play_frame_rate(play_frame_rate, sample_gap);
    }
    return ifaces_[i]->set_play_frame_rate(play_frame_rate, sample_gap);
  }

  int32_t set_play_frame_resolution(const int32_t w, const int32_t h) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_play_frame_resolution(w, h);
    }
    return ifaces_[i]->set_play_frame_resolution(w, h);
  }

  int32_t set_store_file(const int32_t flag) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_store_file(flag);
    }
    return ifaces_[i]->set_store_file(flag);
  }

  int32_t start_grab() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->start_grab();
    }
    return ifaces_[i]->start_grab();
  }

  int32_t stop_grab() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stop_grab();
    }
    return ifaces_[i]->stop_grab();
  }

  int32_t play_pause() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->play_pause();
    }
    return ifaces_[i]->play_pause();
  }

  int32_t play_live(const int32_t play_frame_rate, const int32_t sample_gap) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->play_live(play_frame_rate, sample_gap);
    }
    return ifaces_[i]->play_live(play_frame_rate, sample_gap);
  }

  int32_t play_forward(const int32_t play_frame_rate, const int32_t sample_gap) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->play_forward(play_frame_rate, sample_gap);
    }
    return ifaces_[i]->play_forward(play_frame_rate, sample_gap);
  }

  int32_t play_backward(const int32_t play_frame_rate, const int32_t sample_gap) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->play_backward(play_frame_rate, sample_gap);
    }
    return ifaces_[i]->play_backward(play_frame_rate, sample_gap);
  }

  int32_t play_from_a2b(const int64_t from, const int64_t to) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->play_from_a2b(from, to);
    }
    return ifaces_[i]->play_from_a2b(from, to);
  }

  double get_camera_grab_fps() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_camera_grab_fps();
    }
    return ifaces_[i]->get_camera_grab_fps();
  }

  double get_soft_grab_fps() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_soft_grab_fps();
    }
    return ifaces_[i]->get_soft_grab_fps();
  }

  double get_soft_snd_fps() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_soft_snd_fps();
    }
    return ifaces_[i]->get_soft_snd_fps();
  }

  double get_file_write_fps() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_file_write_fps();
    }
    return ifaces_[i]->get_file_write_fps();
  }

  int32_t set_exposure_time(const double microseconds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_exposure_time(microseconds);
    }
    return ifaces_[i]->set_exposure_time(microseconds);
  }

  int32_t set_gain_by_sensor_all(const double gain) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_gain_by_sensor_all(gain);
    }
    return ifaces_[i]->set_gain_by_sensor_all(gain);
  }

  int32_t set_gain_by_sensor_analog(const double gain) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_gain_by_sensor_analog(gain);
    }
    return ifaces_[i]->set_gain_by_sensor_analog(gain);
  }

  int32_t set_gain_by_sensor_digital(const double gain) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_gain_by_sensor_digital(gain);
    }
    return ifaces_[i]->set_gain_by_sensor_digital(gain);
  }

  int32_t set_frame_rate(const double rate) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_frame_rate(rate);
    }
    return ifaces_[i]->set_frame_rate(rate);
  }

  int32_t enable_turbo_transfer(const int32_t enabled) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->enable_turbo_transfer(enabled);
    }
    return ifaces_[i]->enable_turbo_transfer(enabled);
  }

  int32_t set_pixel_fmt(const std::string& pixel_fmt) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_pixel_fmt(pixel_fmt);
    }
    return ifaces_[i]->set_pixel_fmt(pixel_fmt);
  }

  int32_t set_offset_x(const int32_t offset_x) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_offset_x(offset_x);
    }
    return ifaces_[i]->set_offset_x(offset_x);
  }

  int32_t set_offset_y(const int32_t offset_y) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_offset_y(offset_y);
    }
    return ifaces_[i]->set_offset_y(offset_y);
  }

  int32_t set_image_width(const int32_t width) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_image_width(width);
    }
    return ifaces_[i]->set_image_width(width);
  }

  int32_t set_image_height(const int32_t height) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_image_height(height);
    }
    return ifaces_[i]->set_image_height(height);
  }

  double get_exposure_time() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_exposure_time();
    }
    return ifaces_[i]->get_exposure_time();
  }

  double get_gain_by_sensor_all() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_gain_by_sensor_all();
    }
    return ifaces_[i]->get_gain_by_sensor_all();
  }

  double get_gain_by_sensor_analog() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_gain_by_sensor_analog();
    }
    return ifaces_[i]->get_gain_by_sensor_analog();
  }

  double get_gain_by_sensor_digital() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_gain_by_sensor_digital();
    }
    return ifaces_[i]->get_gain_by_sensor_digital();
  }

  double get_frame_rate() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_frame_rate();
    }
    return ifaces_[i]->get_frame_rate();
  }

  void get_exposure_time_range(MinMaxStruct& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_exposure_time_range(_return);
    }
    ifaces_[i]->get_exposure_time_range(_return);
    return;
  }

  void get_gain_range_by_sensor_all(MinMaxStruct& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_gain_range_by_sensor_all(_return);
    }
    ifaces_[i]->get_gain_range_by_sensor_all(_return);
    return;
  }

  void get_gain_range_by_sensor_analog(MinMaxStruct& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_gain_range_by_sensor_analog(_return);
    }
    ifaces_[i]->get_gain_range_by_sensor_analog(_return);
    return;
  }

  void get_gain_range_by_sensor_digital(MinMaxStruct& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_gain_range_by_sensor_digital(_return);
    }
    ifaces_[i]->get_gain_range_by_sensor_digital(_return);
    return;
  }

  void get_frame_rate_range(MinMaxStruct& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_frame_rate_range(_return);
    }
    ifaces_[i]->get_frame_rate_range(_return);
    return;
  }

  int32_t get_image_width() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_image_width();
    }
    return ifaces_[i]->get_image_width();
  }

  int32_t get_image_height() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_image_height();
    }
    return ifaces_[i]->get_image_height();
  }

  int32_t get_height_max() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_height_max();
    }
    return ifaces_[i]->get_height_max();
  }

  int32_t get_width_max() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_width_max();
    }
    return ifaces_[i]->get_width_max();
  }

  int32_t get_offset_x() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_offset_x();
    }
    return ifaces_[i]->get_offset_x();
  }

  int32_t get_offset_y() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_offset_y();
    }
    return ifaces_[i]->get_offset_y();
  }

  int32_t is_enabled_turbo_transfer() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->is_enabled_turbo_transfer();
    }
    return ifaces_[i]->is_enabled_turbo_transfer();
  }

  void get_pixel_fmt(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_pixel_fmt(_return);
    }
    ifaces_[i]->get_pixel_fmt(_return);
    return;
  }

  void get_user_defined_name(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_user_defined_name(_return);
    }
    ifaces_[i]->get_user_defined_name(_return);
    return;
  }

  void get_device_serial_number(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_device_serial_number(_return);
    }
    ifaces_[i]->get_device_serial_number(_return);
    return;
  }

  void get_current_ip_address(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_current_ip_address(_return);
    }
    ifaces_[i]->get_current_ip_address(_return);
    return;
  }

  double get_grab_fps() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_grab_fps();
    }
    return ifaces_[i]->get_grab_fps();
  }

  double get_process_fps() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_process_fps();
    }
    return ifaces_[i]->get_process_fps();
  }

  void save_feature(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->save_feature(_return);
    }
    ifaces_[i]->save_feature(_return);
    return;
  }

  int32_t update_feature(const std::string& content) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update_feature(content);
    }
    return ifaces_[i]->update_feature(content);
  }

};

} // namespace

#endif
