/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AgentServerService_H
#define AgentServerService_H

#include <thrift/TDispatchProcessor.h>
#include "AgentServer_types.h"

namespace hawkeye {

class AgentServerServiceIf {
 public:
  virtual ~AgentServerServiceIf() {}
  virtual void find_cameras(std::map<std::string, std::map<int32_t, std::string> > & _return) = 0;
  virtual int32_t add_cameras(const std::vector<std::string> & l) = 0;
  virtual void get_hold_cameras(std::vector<std::string> & _return) = 0;
  virtual int32_t del_cameras(const std::vector<std::string> & l) = 0;
  virtual int32_t exec_acquire_store(const std::string& cmdline) = 0;
  virtual int32_t kill_acquire_store(const int64_t process_id) = 0;
};

class AgentServerServiceIfFactory {
 public:
  typedef AgentServerServiceIf Handler;

  virtual ~AgentServerServiceIfFactory() {}

  virtual AgentServerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AgentServerServiceIf* /* handler */) = 0;
};

class AgentServerServiceIfSingletonFactory : virtual public AgentServerServiceIfFactory {
 public:
  AgentServerServiceIfSingletonFactory(const boost::shared_ptr<AgentServerServiceIf>& iface) : iface_(iface) {}
  virtual ~AgentServerServiceIfSingletonFactory() {}

  virtual AgentServerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AgentServerServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<AgentServerServiceIf> iface_;
};

class AgentServerServiceNull : virtual public AgentServerServiceIf {
 public:
  virtual ~AgentServerServiceNull() {}
  void find_cameras(std::map<std::string, std::map<int32_t, std::string> > & /* _return */) {
    return;
  }
  int32_t add_cameras(const std::vector<std::string> & /* l */) {
    int32_t _return = 0;
    return _return;
  }
  void get_hold_cameras(std::vector<std::string> & /* _return */) {
    return;
  }
  int32_t del_cameras(const std::vector<std::string> & /* l */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t exec_acquire_store(const std::string& /* cmdline */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t kill_acquire_store(const int64_t /* process_id */) {
    int32_t _return = 0;
    return _return;
  }
};


class AgentServerService_find_cameras_args {
 public:

  AgentServerService_find_cameras_args() {
  }

  virtual ~AgentServerService_find_cameras_args() throw() {}


  bool operator == (const AgentServerService_find_cameras_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AgentServerService_find_cameras_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_find_cameras_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_find_cameras_pargs {
 public:


  virtual ~AgentServerService_find_cameras_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_find_cameras_result__isset {
  _AgentServerService_find_cameras_result__isset() : success(false) {}
  bool success;
} _AgentServerService_find_cameras_result__isset;

class AgentServerService_find_cameras_result {
 public:

  AgentServerService_find_cameras_result() {
  }

  virtual ~AgentServerService_find_cameras_result() throw() {}

  std::map<std::string, std::map<int32_t, std::string> >  success;

  _AgentServerService_find_cameras_result__isset __isset;

  void __set_success(const std::map<std::string, std::map<int32_t, std::string> > & val) {
    success = val;
  }

  bool operator == (const AgentServerService_find_cameras_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_find_cameras_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_find_cameras_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_find_cameras_presult__isset {
  _AgentServerService_find_cameras_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_find_cameras_presult__isset;

class AgentServerService_find_cameras_presult {
 public:


  virtual ~AgentServerService_find_cameras_presult() throw() {}

  std::map<std::string, std::map<int32_t, std::string> > * success;

  _AgentServerService_find_cameras_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_add_cameras_args__isset {
  _AgentServerService_add_cameras_args__isset() : l(false) {}
  bool l;
} _AgentServerService_add_cameras_args__isset;

class AgentServerService_add_cameras_args {
 public:

  AgentServerService_add_cameras_args() {
  }

  virtual ~AgentServerService_add_cameras_args() throw() {}

  std::vector<std::string>  l;

  _AgentServerService_add_cameras_args__isset __isset;

  void __set_l(const std::vector<std::string> & val) {
    l = val;
  }

  bool operator == (const AgentServerService_add_cameras_args & rhs) const
  {
    if (!(l == rhs.l))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_add_cameras_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_add_cameras_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_add_cameras_pargs {
 public:


  virtual ~AgentServerService_add_cameras_pargs() throw() {}

  const std::vector<std::string> * l;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_add_cameras_result__isset {
  _AgentServerService_add_cameras_result__isset() : success(false) {}
  bool success;
} _AgentServerService_add_cameras_result__isset;

class AgentServerService_add_cameras_result {
 public:

  AgentServerService_add_cameras_result() : success(0) {
  }

  virtual ~AgentServerService_add_cameras_result() throw() {}

  int32_t success;

  _AgentServerService_add_cameras_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AgentServerService_add_cameras_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_add_cameras_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_add_cameras_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_add_cameras_presult__isset {
  _AgentServerService_add_cameras_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_add_cameras_presult__isset;

class AgentServerService_add_cameras_presult {
 public:


  virtual ~AgentServerService_add_cameras_presult() throw() {}

  int32_t* success;

  _AgentServerService_add_cameras_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class AgentServerService_get_hold_cameras_args {
 public:

  AgentServerService_get_hold_cameras_args() {
  }

  virtual ~AgentServerService_get_hold_cameras_args() throw() {}


  bool operator == (const AgentServerService_get_hold_cameras_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AgentServerService_get_hold_cameras_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_hold_cameras_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_get_hold_cameras_pargs {
 public:


  virtual ~AgentServerService_get_hold_cameras_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_hold_cameras_result__isset {
  _AgentServerService_get_hold_cameras_result__isset() : success(false) {}
  bool success;
} _AgentServerService_get_hold_cameras_result__isset;

class AgentServerService_get_hold_cameras_result {
 public:

  AgentServerService_get_hold_cameras_result() {
  }

  virtual ~AgentServerService_get_hold_cameras_result() throw() {}

  std::vector<std::string>  success;

  _AgentServerService_get_hold_cameras_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const AgentServerService_get_hold_cameras_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_get_hold_cameras_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_get_hold_cameras_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_get_hold_cameras_presult__isset {
  _AgentServerService_get_hold_cameras_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_get_hold_cameras_presult__isset;

class AgentServerService_get_hold_cameras_presult {
 public:


  virtual ~AgentServerService_get_hold_cameras_presult() throw() {}

  std::vector<std::string> * success;

  _AgentServerService_get_hold_cameras_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_del_cameras_args__isset {
  _AgentServerService_del_cameras_args__isset() : l(false) {}
  bool l;
} _AgentServerService_del_cameras_args__isset;

class AgentServerService_del_cameras_args {
 public:

  AgentServerService_del_cameras_args() {
  }

  virtual ~AgentServerService_del_cameras_args() throw() {}

  std::vector<std::string>  l;

  _AgentServerService_del_cameras_args__isset __isset;

  void __set_l(const std::vector<std::string> & val) {
    l = val;
  }

  bool operator == (const AgentServerService_del_cameras_args & rhs) const
  {
    if (!(l == rhs.l))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_del_cameras_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_del_cameras_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_del_cameras_pargs {
 public:


  virtual ~AgentServerService_del_cameras_pargs() throw() {}

  const std::vector<std::string> * l;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_del_cameras_result__isset {
  _AgentServerService_del_cameras_result__isset() : success(false) {}
  bool success;
} _AgentServerService_del_cameras_result__isset;

class AgentServerService_del_cameras_result {
 public:

  AgentServerService_del_cameras_result() : success(0) {
  }

  virtual ~AgentServerService_del_cameras_result() throw() {}

  int32_t success;

  _AgentServerService_del_cameras_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AgentServerService_del_cameras_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_del_cameras_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_del_cameras_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_del_cameras_presult__isset {
  _AgentServerService_del_cameras_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_del_cameras_presult__isset;

class AgentServerService_del_cameras_presult {
 public:


  virtual ~AgentServerService_del_cameras_presult() throw() {}

  int32_t* success;

  _AgentServerService_del_cameras_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_exec_acquire_store_args__isset {
  _AgentServerService_exec_acquire_store_args__isset() : cmdline(false) {}
  bool cmdline;
} _AgentServerService_exec_acquire_store_args__isset;

class AgentServerService_exec_acquire_store_args {
 public:

  AgentServerService_exec_acquire_store_args() : cmdline() {
  }

  virtual ~AgentServerService_exec_acquire_store_args() throw() {}

  std::string cmdline;

  _AgentServerService_exec_acquire_store_args__isset __isset;

  void __set_cmdline(const std::string& val) {
    cmdline = val;
  }

  bool operator == (const AgentServerService_exec_acquire_store_args & rhs) const
  {
    if (!(cmdline == rhs.cmdline))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_exec_acquire_store_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_exec_acquire_store_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_exec_acquire_store_pargs {
 public:


  virtual ~AgentServerService_exec_acquire_store_pargs() throw() {}

  const std::string* cmdline;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_exec_acquire_store_result__isset {
  _AgentServerService_exec_acquire_store_result__isset() : success(false) {}
  bool success;
} _AgentServerService_exec_acquire_store_result__isset;

class AgentServerService_exec_acquire_store_result {
 public:

  AgentServerService_exec_acquire_store_result() : success(0) {
  }

  virtual ~AgentServerService_exec_acquire_store_result() throw() {}

  int32_t success;

  _AgentServerService_exec_acquire_store_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AgentServerService_exec_acquire_store_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_exec_acquire_store_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_exec_acquire_store_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_exec_acquire_store_presult__isset {
  _AgentServerService_exec_acquire_store_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_exec_acquire_store_presult__isset;

class AgentServerService_exec_acquire_store_presult {
 public:


  virtual ~AgentServerService_exec_acquire_store_presult() throw() {}

  int32_t* success;

  _AgentServerService_exec_acquire_store_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AgentServerService_kill_acquire_store_args__isset {
  _AgentServerService_kill_acquire_store_args__isset() : process_id(false) {}
  bool process_id;
} _AgentServerService_kill_acquire_store_args__isset;

class AgentServerService_kill_acquire_store_args {
 public:

  AgentServerService_kill_acquire_store_args() : process_id(0) {
  }

  virtual ~AgentServerService_kill_acquire_store_args() throw() {}

  int64_t process_id;

  _AgentServerService_kill_acquire_store_args__isset __isset;

  void __set_process_id(const int64_t val) {
    process_id = val;
  }

  bool operator == (const AgentServerService_kill_acquire_store_args & rhs) const
  {
    if (!(process_id == rhs.process_id))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_kill_acquire_store_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_kill_acquire_store_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentServerService_kill_acquire_store_pargs {
 public:


  virtual ~AgentServerService_kill_acquire_store_pargs() throw() {}

  const int64_t* process_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_kill_acquire_store_result__isset {
  _AgentServerService_kill_acquire_store_result__isset() : success(false) {}
  bool success;
} _AgentServerService_kill_acquire_store_result__isset;

class AgentServerService_kill_acquire_store_result {
 public:

  AgentServerService_kill_acquire_store_result() : success(0) {
  }

  virtual ~AgentServerService_kill_acquire_store_result() throw() {}

  int32_t success;

  _AgentServerService_kill_acquire_store_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AgentServerService_kill_acquire_store_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentServerService_kill_acquire_store_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentServerService_kill_acquire_store_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentServerService_kill_acquire_store_presult__isset {
  _AgentServerService_kill_acquire_store_presult__isset() : success(false) {}
  bool success;
} _AgentServerService_kill_acquire_store_presult__isset;

class AgentServerService_kill_acquire_store_presult {
 public:


  virtual ~AgentServerService_kill_acquire_store_presult() throw() {}

  int32_t* success;

  _AgentServerService_kill_acquire_store_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AgentServerServiceClient : virtual public AgentServerServiceIf {
 public:
  AgentServerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  AgentServerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void find_cameras(std::map<std::string, std::map<int32_t, std::string> > & _return);
  void send_find_cameras();
  void recv_find_cameras(std::map<std::string, std::map<int32_t, std::string> > & _return);
  int32_t add_cameras(const std::vector<std::string> & l);
  void send_add_cameras(const std::vector<std::string> & l);
  int32_t recv_add_cameras();
  void get_hold_cameras(std::vector<std::string> & _return);
  void send_get_hold_cameras();
  void recv_get_hold_cameras(std::vector<std::string> & _return);
  int32_t del_cameras(const std::vector<std::string> & l);
  void send_del_cameras(const std::vector<std::string> & l);
  int32_t recv_del_cameras();
  int32_t exec_acquire_store(const std::string& cmdline);
  void send_exec_acquire_store(const std::string& cmdline);
  int32_t recv_exec_acquire_store();
  int32_t kill_acquire_store(const int64_t process_id);
  void send_kill_acquire_store(const int64_t process_id);
  int32_t recv_kill_acquire_store();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AgentServerServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<AgentServerServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AgentServerServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_find_cameras(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add_cameras(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_hold_cameras(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_del_cameras(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_exec_acquire_store(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_kill_acquire_store(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AgentServerServiceProcessor(boost::shared_ptr<AgentServerServiceIf> iface) :
    iface_(iface) {
    processMap_["find_cameras"] = &AgentServerServiceProcessor::process_find_cameras;
    processMap_["add_cameras"] = &AgentServerServiceProcessor::process_add_cameras;
    processMap_["get_hold_cameras"] = &AgentServerServiceProcessor::process_get_hold_cameras;
    processMap_["del_cameras"] = &AgentServerServiceProcessor::process_del_cameras;
    processMap_["exec_acquire_store"] = &AgentServerServiceProcessor::process_exec_acquire_store;
    processMap_["kill_acquire_store"] = &AgentServerServiceProcessor::process_kill_acquire_store;
  }

  virtual ~AgentServerServiceProcessor() {}
};

class AgentServerServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AgentServerServiceProcessorFactory(const ::boost::shared_ptr< AgentServerServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< AgentServerServiceIfFactory > handlerFactory_;
};

class AgentServerServiceMultiface : virtual public AgentServerServiceIf {
 public:
  AgentServerServiceMultiface(std::vector<boost::shared_ptr<AgentServerServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AgentServerServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AgentServerServiceIf> > ifaces_;
  AgentServerServiceMultiface() {}
  void add(boost::shared_ptr<AgentServerServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void find_cameras(std::map<std::string, std::map<int32_t, std::string> > & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->find_cameras(_return);
    }
    ifaces_[i]->find_cameras(_return);
    return;
  }

  int32_t add_cameras(const std::vector<std::string> & l) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_cameras(l);
    }
    return ifaces_[i]->add_cameras(l);
  }

  void get_hold_cameras(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_hold_cameras(_return);
    }
    ifaces_[i]->get_hold_cameras(_return);
    return;
  }

  int32_t del_cameras(const std::vector<std::string> & l) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->del_cameras(l);
    }
    return ifaces_[i]->del_cameras(l);
  }

  int32_t exec_acquire_store(const std::string& cmdline) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->exec_acquire_store(cmdline);
    }
    return ifaces_[i]->exec_acquire_store(cmdline);
  }

  int32_t kill_acquire_store(const int64_t process_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->kill_acquire_store(process_id);
    }
    return ifaces_[i]->kill_acquire_store(process_id);
  }

};

} // namespace

#endif
