// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "PlaybackCtrlService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

#include "Camera.h"
#include "defs.h"
#include "PlaybackCtrl.h"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::hawkeye;

extern CustomStruct g_cs;

inline void calc_frame_rate_some(const int32_t play_frame_rate) {
	g_cs.m_play_frame_rate = play_frame_rate;
	g_cs.m_frame_rate = g_cs.m_camera->GetFrameRate();
	g_cs.m_frame_gap = (g_cs.m_frame_rate + 1) / g_cs.m_play_frame_rate;

	g_cs.m_last_play_seq = 0;
}


class PlaybackCtrlServiceHandler : virtual public PlaybackCtrlServiceIf {
 public:
  PlaybackCtrlServiceHandler() {
    // Your initialization goes here
  }

  int32_t set_play_frame_rate(const int32_t play_frame_rate) {
    // Your implementation goes here
    printf("set_play_frame_rate\n");
	calc_frame_rate_some(play_frame_rate);
	return 1;
  }

  int32_t set_play_frame_resolution(const int32_t w, const int32_t h) {
    // Your implementation goes here
    printf("set_play_frame_resolution\n");
	g_cs.m_play_frame_w = w;
	g_cs.m_play_frame_h = h;
	g_cs.m_buffer.resize(GET_IMAGE_BUFFER_SIZE(g_cs.m_play_frame_w, g_cs.m_play_frame_h));
	return 1;
  }

  int32_t set_store_file(const int32_t flag, const std::string& file_name) {
    // Your implementation goes here
    printf("set_store_file\n");
	if (0 == CFileStorage::m_file_name.size()) {
		char ip[30] = { 0 };
		if (g_cs.m_camera->GetCurrentIPAddress(ip, sizeof ip)) {
			std::string name(ip);
			CFileStorage::m_file_name = name + ".raw";
		}
	}
	return g_cs.m_store_file_flag = flag;
  }

  int32_t start_play_live() {
    // Your implementation goes here
    printf("start_play_live\n");
	g_cs.m_playback_thread->m_status = Playback_START_PLAY_CAMERAS;
	g_cs.m_snd_data_thread->m_status = TRANSPORT_STATUS_SENDING;
	return g_cs.m_data_port;
  }

  int32_t stop_play_live() {
    // Your implementation goes here
    printf("stop_play_live\n");
	g_cs.m_snd_data_thread->m_status = TRANSPORT_STATUS_NONE;
	return g_cs.m_playback_thread->m_status = Playback_STOP_PLAY_CAMERAS;
  }

  int32_t forward_play(const int64_t frame_seq, const int32_t play_frame_rate, const int32_t how_many_frames) {
    // Your implementation goes here
    printf("forward_play\n");
	calc_frame_rate_some(play_frame_rate);
	g_cs.m_playback_thread->m_start_play_frame_no = frame_seq;
	g_cs.m_playback_thread->m_play_how_many_frames = how_many_frames;
	g_cs.m_playback_thread->m_is_forward = TRUE;
	return 1;
  }

  int32_t backward_play(const int64_t frame_seq, const int32_t play_frame_rate, const int32_t how_many_frames) {
    // Your implementation goes here
    printf("backward_play\n");
	calc_frame_rate_some(play_frame_rate);
	g_cs.m_playback_thread->m_start_play_frame_no = frame_seq;
	g_cs.m_playback_thread->m_play_how_many_frames = how_many_frames;
	g_cs.m_playback_thread->m_is_forward = FALSE;
	return 1;
  }

  int32_t forward_play_temp(const int64_t frame_seq, const int32_t play_frame_rate, const int32_t how_many_frames) {
    // Your implementation goes here
    printf("forward_play_temp\n");
	return 1;
  }

  int32_t backward_play_temp(const int64_t frame_seq, const int32_t play_frame_rate, const int32_t how_many_frames) {
    // Your implementation goes here
    printf("backward_play_temp\n");
	return 1;
  }

  int32_t set_exposure_time(const double microseconds) {
	  // Your implementation goes here
	  printf("set_exposure_time\n");
	  return g_cs.m_camera->SetExposureTime(microseconds);
  }

  int32_t set_gain_by_sensor_all(const double gain) {
	  // Your implementation goes here
	  printf("set_gain_by_sensor_all\n");
	  return g_cs.m_camera->SetGainBySensorAll(gain);
  }

  int32_t set_gain_by_sensor_analog(const double gain) {
	  // Your implementation goes here
	  printf("set_gain_by_sensor_analog\n");
	  return g_cs.m_camera->SetGainBySensorAnalog(gain);
  }

  int32_t set_gain_by_sensor_digital(const double gain) {
	  // Your implementation goes here
	  printf("set_gain_by_sensor_digital\n");
	  return g_cs.m_camera->SetGainBySensorDigital(gain);
  }

  int32_t set_frame_rate(const double rate) {
	  // Your implementation goes here
	  printf("set_frame_rate\n");
	  return g_cs.m_camera->SetFrameRate(rate);
  }

  int32_t enable_turbo_transfer(const int32_t enabled) {
	  // Your implementation goes here
	  printf("enable_turbo_transfer\n");
	  return g_cs.m_camera->EnableTurboTransfer(enabled);
  }

  int32_t set_pixel_fmt(const std::string& pixel_fmt) {
	  // Your implementation goes here
	  printf("set_pixel_fmt\n");
	  return g_cs.m_camera->SetPixelFormat(pixel_fmt.c_str(), pixel_fmt.length());
  }

  int32_t set_offset_x(const int32_t offset_x) {
	  // Your implementation goes here
	  printf("set_offset_x\n");
	  return g_cs.m_camera->SetOffsetX(offset_x);
  }

  int32_t set_offset_y(const int32_t offset_y) {
	  // Your implementation goes here
	  printf("set_offset_y\n");
	  return g_cs.m_camera->SetOffsetY(offset_y);
  }

  int32_t set_image_width(const int32_t width) {
	  // Your implementation goes here
	  printf("set_image_width\n");
	  return g_cs.m_camera->SetImageWidth(width);
  }

  int32_t set_image_height(const int32_t height) {
	  // Your implementation goes here
	  printf("set_image_height\n");
	  return g_cs.m_camera->SetImageHeight(height);
  }

  double get_exposure_time() {
	  // Your implementation goes here
	  printf("get_exposure_time\n");
	  return g_cs.m_camera->GetExposureTime();
  }

  double get_gain_by_sensor_all() {
	  // Your implementation goes here
	  printf("get_gain_by_sensor_all\n");
	  return g_cs.m_camera->GetGainBySensorAll();
  }

  double get_gain_by_sensor_analog() {
	  // Your implementation goes here
	  printf("get_gain_by_sensor_analog\n");
	  return g_cs.m_camera->GetGainBySensorAnalog();
  }

  double get_gain_by_sensor_digital() {
	  // Your implementation goes here
	  printf("get_gain_by_sensor_digital\n");
	  return g_cs.m_camera->GetGainBySensorDigital();
  }

  double get_frame_rate() {
	  // Your implementation goes here
	  printf("get_frame_rate\n");
	  return g_cs.m_camera->GetFrameRate();
  }

  void get_exposure_time_range(MinMaxStruct& _return) {
	  // Your implementation goes here
	  printf("get_exposure_time_range\n");
	  g_cs.m_camera->GetExposureTimeRange(&_return.min, &_return.max);//FIXME: should check the value of return!
  }

  void get_gain_range_by_sensor_all(MinMaxStruct& _return) {
	  // Your implementation goes here
	  printf("get_gain_range_by_sensor_all\n");
	  g_cs.m_camera->GetGainBySensorAllRange(&_return.min, &_return.max);//FIXME: should check the value of return!
  }

  void get_gain_range_by_sensor_analog(MinMaxStruct& _return) {
	  // Your implementation goes here
	  printf("get_gain_range_by_sensor_analog\n");
	  g_cs.m_camera->GetGainBySensorAnalogRange(&_return.min, &_return.max);//FIXME: should check the value of return!
  }

  void get_gain_range_by_sensor_digital(MinMaxStruct& _return) {
	  // Your implementation goes here
	  printf("get_gain_range_by_sensor_digital\n");
	  g_cs.m_camera->GetGainBySensorDigitalRange(&_return.min, &_return.max);//FIXME: should check the value of return!
  }

  void get_frame_rate_range(MinMaxStruct& _return) {
	  // Your implementation goes here
	  printf("get_frame_rate_range\n");
	  g_cs.m_camera->GetFrameRateRange(&_return.min, &_return.max);//FIXME: should check the value of return!
  }

  int32_t get_image_width() {
	  // Your implementation goes here
	  printf("get_image_width\n");
	  return g_cs.m_camera->GetImageWidth();
  }

  int32_t get_image_height() {
	  // Your implementation goes here
	  printf("get_image_height\n");
	  return g_cs.m_camera->GetImageHeight();
  }


  int32_t get_height_max() {
	  // Your implementation goes here
	  printf("get_height_max\n");
	  return g_cs.m_camera->GetHeightMax();
  }

  int32_t get_width_max() {
	  // Your implementation goes here
	  printf("get_width_max\n");
	  return g_cs.m_camera->GetWidthMax();
  }

  int32_t get_offset_x() {
	  // Your implementation goes here
	  printf("get_offset_x\n");
	  return g_cs.m_camera->GetOffsetX();
  }

  int32_t get_offset_y() {
	  // Your implementation goes here
	  printf("get_offset_y\n");
	  return g_cs.m_camera->GetOffsetY();
  }

  int32_t is_enabled_turbo_transfer() {
	  // Your implementation goes here
	  printf("is_enabled_turbo_transfer\n");
	  return g_cs.m_camera->IsEnabledTurboTransfer();
  }

  void get_pixel_fmt(std::string& _return) {
	  // Your implementation goes here
	  printf("get_pixel_fmt\n");
	  char val[256] = { 0 };
	  g_cs.m_camera->GetPixelFormat(val, sizeof val);
	  _return.assign(val);
  }

  void get_user_defined_name(std::string& _return) {
	  // Your implementation goes here
	  printf("get_user_defined_name\n");
	  char val[256] = { 0 };
	  g_cs.m_camera->GetUserDefinedName(val, sizeof val);
	  _return.assign(val);
  }

  void get_device_serial_number(std::string& _return) {
	  // Your implementation goes here
	  printf("get_device_serial_number\n");
	  char val[256] = { 0 };
	  g_cs.m_camera->GetDeviceSerialNumber(val, sizeof val);
	  _return.assign(val);
  }

  void get_current_ip_address(std::string& _return) {
	  // Your implementation goes here
	  printf("get_current_ip_address\n");

	  char val[256] = { 0 };
	  g_cs.m_camera->GetCurrentIPAddress(val, sizeof val);
	  _return.assign(val);
  }

  double get_grab_fps() {
	  // Your implementation goes here
	  printf("get_grab_fps\n");
	  return g_cs.m_camera->GetGrabFPS();
  }

  double get_process_fps() {
	  // Your implementation goes here
	  printf("get_process_fps\n");
	  return g_cs.m_camera->GetProcessFPS();
  }

  void save_feature(std::string& _return) {
	  // Your implementation goes here
	  printf("save_feature\n");
	  g_cs.m_camera->SaveFeatures(g_cs.m_camera->GetUserDefinedName());
	  FILE* fp = fopen(g_cs.m_camera->GetUserDefinedName(), "r");
	  if (fp) {
		  char buf[1024 * 10] = { 0 };
		  int r = fread(buf, 1, sizeof buf, fp);
		  _return.append(buf, r);
		  fclose(fp);
	  }
  }

  int32_t update_feature(const std::string& content) {
	  // Your implementation goes here
	  printf("update_feature\n");
	  FILE* fp = fopen(g_cs.m_camera->GetUserDefinedName(), "w");
	  if (fp) {
		  fwrite(content.data(), 1, content.size(), fp);
		  fclose(fp);
	  }
	  return g_cs.m_camera->LoadFeatures(g_cs.m_camera->GetUserDefinedName());
  }


};



